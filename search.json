[{"title":"2020学习/工作计划","url":"/blog/2020/04/30/2020%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/","content":"<h3 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h3><ol>\n<li>写在前面</li>\n<li>疫情期间的工作</li>\n<li>反思自己的不足</li>\n<li>2020学习/工作计划</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p>2020年已经过去了四分之一，我才意识到需要做一个全年计划。这几个月来，小计划不断，但是都没有很好的完成，并且很容易受到外界因素的干扰，自己不知道自己到底<strong>需要做什么</strong>，于是看似做了不少东西，但是意义不大。我觉得全年的学习生活应该有一个基调，一年中总是要完成一些事情的。来到西电读研是进一步的学习机会，我要抓住这个机会。</p>\n<h4 id=\"疫情期间都做了什么？\"><a href=\"#疫情期间都做了什么？\" class=\"headerlink\" title=\"疫情期间都做了什么？\"></a>疫情期间都做了什么？</h4><ol>\n<li><p>首先是帮助师兄改了一个polar码的scl译码方法，其实到现在我对其原理也不是很明白，只是知道代码怎么用…</p>\n</li>\n<li><p>开始刷leetcode的题目，目前大概刷了100+，还是有一定的作用的。完成了</p>\n<ul>\n<li>数据结构部分：队列和栈，数组和字符串，二分查找(83%)，链表(46%)</li>\n<li>算法：BFS，DFS，双指针</li>\n<li>C++中vector，map，set等容器的使用，发现自己掌握的真是冰山一角</li>\n</ul>\n</li>\n<li><p>阅读了机器学习的几篇论文，主要是了解了随机梯度下降(SGD)方法，后面还需要进一步学习</p>\n</li>\n<li><p>很有限的学习了机器学习，矩阵论相关的内容</p>\n</li>\n<li><p>参加了华为的软件精英挑战赛，西北赛区第十名，进入复赛</p>\n</li>\n</ol>\n<h4 id=\"自己的不足\"><a href=\"#自己的不足\" class=\"headerlink\" title=\"自己的不足\"></a>自己的不足</h4><p>真正认识自己的不足也是在比赛期间，当你看到你辛辛苦苦半个月做出来的成果别人只需要几天，并且成绩还比你好的多的时候，你就越发的感觉到自己的渺小，我后悔的事情太多了，本科时候没有参加ACM是最大的错误，无论是数学建模或者是电赛，对于以后要进军互联网来说都没有ACM的奖牌作用大。不过我也意识到了这是教育之间的差异，有些人在中学的时候就开始接触比赛了，到了大学继续比赛那肯定更加熟练。我在高中的时候谈到计算机估计想的就是装个软件，换个内存条什么的，编程这个词都不知道啥意思，更不用说参加信息类的比赛了。。。为社么别人可以做到那些，我做不到，这并不全是自己的问题，种一棵树从现在开始也不迟，<strong>虽然已经知道和别人的差距很大，但是只要是能缩小差距，那就是自己的进步</strong>！还有一年的时间，一年是很快的，而且还有实验室的事情需要忙，所以时间很紧迫，千万不能再浪费了！</p>\n<h4 id=\"2020学习-工作计划\"><a href=\"#2020学习-工作计划\" class=\"headerlink\" title=\"2020学习/工作计划\"></a>2020学习/工作计划</h4><ol>\n<li>继续刷leetcode，学习了新算法，新思路或者新的函数之后在博客中进行总结，至少一周一篇，并且要做好题目的分类，算法和思路在tags中注明算法/思路，函数在tags中注明函数，在分类中注明C++。其中保证每周做7题以上，对于过于简单的题不计算在内，书籍<strong>《算法》</strong>。</li>\n<li>继续学习C++，把<strong>《C++ Prime》</strong>过一遍，每周在博客总结一次，标签：C++ Prime，分类：C++；辅助阅读<strong>《STL源码剖析》</strong>和<strong>《Effective C++》</strong>标签：书名，分类：C++</li>\n<li><strong>《计算机网络 自顶向下方法》</strong>前四章内容</li>\n<li><strong>《UNIX 网络编程》《UNIX 环境高级编程》</strong> 辅助书籍<strong>《Unix/Linux 编程实践教程》</strong></li>\n<li><strong>《深入理解计算机系统》</strong>三四章可以先不看</li>\n<li>机器学习的相关课程：吴恩达机器学习基础课程，CS231n计算机视觉课程，适应阅读英文论文，加强英语的学习</li>\n<li>积极参加有水平的比赛</li>\n<li>阅读一本非专业的书籍，陶冶陶冶情操？</li>\n</ol>\n","categories":["生活随笔"]},{"title":"C++11之lambda表达式","url":"/blog/2020/08/02/C-11%E4%B9%8Blambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/","content":"<p>学习C++11标准中的新特性——lambda表达式</p>\n<a id=\"more\"></a>\n\n<h3 id=\"向算法传递函数\"><a href=\"#向算法传递函数\" class=\"headerlink\" title=\"向算法传递函数\"></a>向算法传递函数</h3><hr>\n<p>如果需要sort按照自己定义的方式进行排序，需要使用其第二个版本，此版本是重载过的，它接受第三个参数，此参数是一个<strong>谓词</strong>。</p>\n<hr>\n<h4 id=\"谓词\"><a href=\"#谓词\" class=\"headerlink\" title=\"谓词\"></a>谓词</h4><ol>\n<li>定义：谓词是一个<strong>可以调用的表达式</strong>，返回的结果可以被调用</li>\n<li>分类：一元谓词和二元谓词<ol>\n<li>一元谓词：只接受单一的参数</li>\n<li>二元谓词：接受两个参数</li>\n</ol>\n</li>\n<li>接受谓词的算法对输入序列中的<strong>元素</strong>调用谓词，因此<strong>元素</strong>必须能转换为谓词的参数类型</li>\n</ol>\n<p><code>sort</code>函数接受一个<strong>二元谓词</strong>，假如我们要按字符串的长度升序排序，可以定义一个比较函数<code>isShorter</code>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 比较函数，用来按长度排序单词</span></span><br><span class=\"line\"><span class=\"comment\">// 必须是引用类型！！！</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isShorter</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s1, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s1.size() &lt; s2.size();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 按长度由短至长排序words</span></span><br><span class=\"line\">sort(words.begin(), words.end(), isShorter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># words = &#123;<span class=\"meta-string\">\"foxs\"</span>, <span class=\"meta-string\">\"jumps\"</span>, <span class=\"meta-string\">\"end\"</span>, <span class=\"meta-string\">\"kid\"</span>&#125;</span></span><br><span class=\"line\"># 输出结果为end kid foxs jumps</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>注：针对同一长度的单词，<code>sort</code>是不稳定的，如果要保持对应的字典序，可以调用<code>stable_sort</code></em></strong></p>\n<h3 id=\"lambda表达式\"><a href=\"#lambda表达式\" class=\"headerlink\" title=\"lambda表达式\"></a>lambda表达式</h3><p>对于一个对象或者表达式，如果对其可以使用调用运算符<code>()</code>，则称它为可调用的，可以将其传入算法。一个<code>lambda</code>表达式表示一个可调用的代码单元，我们可以将其理解为一个未命名的内联函数。</p>\n<hr>\n<p><strong>与任何函数相似，一个<code>lambda</code>具有一个返回类型，一个参数列表和一个函数体</strong></p>\n<p><strong>不同的是，<code>lambda</code>可以定义在函数内部</strong></p>\n<hr>\n<p>一个<code>lambda</code>表达式具有如下形式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">[capture <span class=\"built_in\">list</span>] (parameter <span class=\"built_in\">list</span>) -&gt; <span class=\"keyword\">return</span> type &#123; function body &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>[capture list]</code>（捕获列表）是一个<code>lambda</code><strong>所在函数中</strong>定义的局部变量的列表（通常为空）</li>\n<li><code>return type</code>、<code>parameter list</code>和<code>function body</code>与普通函数一样，分别为返回类型，参数列表和函数体，但是<code>lambda</code>必须使用尾置返回</li>\n</ul>\n<p>我们可以忽略参数列表和返回类型，但必须永远包括捕获列表和函数体：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我们定义了一个可调用对象f，它不接受参数，返回42</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> f = [] &#123; <span class=\"keyword\">return</span> <span class=\"number\">42</span>; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>lambda</code>的调用方式与普通函数相同，使用调用运算符：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输出42</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; f() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在此例中，当调用<code>f</code>时，参数列表为空并且忽略了返回类型，<code>lambda</code>根据函数体代码确定返回类型，如果函数体只有一个<code>return</code>语句，则返回类型从返回表达式的类型推断而来，否则返回<code>void</code>。</p>\n<p><strong><em>注：如果函数体中包含任何单一<code>return</code>语句之外的内容，且未指定返回类型，返回<code>void</code></em></strong></p>\n<h4 id=\"向lambda传递参数\"><a href=\"#向lambda传递参数\" class=\"headerlink\" title=\"向lambda传递参数\"></a>向lambda传递参数</h4><p>与一个普通函数调用类似，调用一个<code>lambda</code>给定实参被用来初始化<code>lambda</code>形参，类型需要匹配。但是<code>lambda</code>不能有默认参数（比如：<code>int fun(int a = 1, int b = 1) { return a + b; }</code>）。因此，一个<code>lambda</code>调用的实参数目永远和形参数目相等，一旦形参初始化完毕，就可以执行函数体了。</p>\n<p>我们可以写出来一个与<code>isShorter</code>功能完全一样的<code>lambda</code>函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">[] (<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s1, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s2)</span><br><span class=\"line\">\t&#123; <span class=\"keyword\">return</span> s1.size() &lt; s2.size(); &#125;</span><br></pre></td></tr></table></figure>\n\n<p>空捕获列表表示不使用函数中的局部变量，如下所示，之前的<code>sort</code>函数可以改写如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">sort(words.begin(), words.end(), </span><br><span class=\"line\">\t[] (<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s1, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s2)</span><br><span class=\"line\">\t&#123; <span class=\"keyword\">return</span> s1.size() &lt; s2.size(); &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用捕获列表\"><a href=\"#使用捕获列表\" class=\"headerlink\" title=\"使用捕获列表\"></a>使用捕获列表</h4><p>假如我们现在要找到<code>words</code>中第一个长度大于<code>sz</code>的单词的位置，可以编写一个可以传递给<code>find_if</code>的可调用表达式。一个<code>lambda</code>表达式<strong>只能使用明确指明的变量</strong>，在下面的例子中，<code>lambda</code>会捕获<code>sz</code>，，并只有单一的<code>string</code>参数（因为<code>find_if</code>只支持一元谓词），其函数体会将<code>string</code>的大小与捕获的<code>sz</code>进行比较：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">[sz] (<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span><br><span class=\"line\">&#123; <span class=\"keyword\">return</span> s.size() &gt;= sz; &#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"调用find-if函数\"><a href=\"#调用find-if函数\" class=\"headerlink\" title=\"调用find_if函数\"></a>调用<code>find_if</code>函数</h5><p>使用此<code>lambda</code>，查到第一个长度大于等于给定<code>sz</code>元素</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> wc = find_if(words.begin(), words.end(),</span><br><span class=\"line\">     [sz] (<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span><br><span class=\"line\">     &#123; <span class=\"keyword\">return</span> s.size() &gt;= sz; &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 输出满足size &gt;= sz第一个元素的值和位置</span></span><br><span class=\"line\"><span class=\"comment\">// 如果没有找到，返回words.end()的一个拷贝</span></span><br><span class=\"line\"><span class=\"comment\">// 取sz = 4</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"value:\"</span> &lt;&lt; *wc &lt;&lt; <span class=\"string\">\"position:\"</span> &lt;&lt; wc - words.begin();</span><br><span class=\"line\"><span class=\"meta\"># value:foxs    position:2</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"for-each算法\"><a href=\"#for-each算法\" class=\"headerlink\" title=\"for_each算法\"></a><code>for_each</code>算法</h5><p>打印出长度大于等于<code>sz</code>的所有单词：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">for_each(wc, words.end(), [] (<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s) &#123; <span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"string\">\" \"</span>;&#125;);</span><br><span class=\"line\"><span class=\"meta\"># foxs jumps</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lambda捕获和返回\"><a href=\"#lambda捕获和返回\" class=\"headerlink\" title=\"lambda捕获和返回\"></a>lambda捕获和返回</h3><p>我们可以认为，当向一个函数传递一个<code>lambda</code>时，同时定义了一个新类型和该类型的对象，传递的参数就是此编译器生成的<strong>类的类型</strong>的<strong>未命名对象</strong>。</p>\n<p><strong>默认情况下，由<code>lambda</code>生成的类，数据成员包含捕获列表中的变量，在<code>lambda</code>对象创建时被初始化。</strong></p>\n<h4 id=\"值捕获（后面更改不会影响值）\"><a href=\"#值捕获（后面更改不会影响值）\" class=\"headerlink\" title=\"值捕获（后面更改不会影响值）\"></a>值捕获（后面更改不会影响值）</h4><p>与参数传递不同之处在于，被捕获的变量的值在<code>lambda</code>创建时拷贝，而不是调用时拷贝</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">size_t</span> v1 = <span class=\"number\">42</span>; <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> f = [v1] &#123; <span class=\"keyword\">return</span> v1; &#125;;</span><br><span class=\"line\">v1 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> j = f();</span><br><span class=\"line\"><span class=\"meta\"># j为42；f保存我们创建它时的拷贝，因此修改v1不会影响lambda内对应的值</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引用捕获（后面更改会影响变量值）\"><a href=\"#引用捕获（后面更改会影响变量值）\" class=\"headerlink\" title=\"引用捕获（后面更改会影响变量值）\"></a>引用捕获（后面更改会影响变量值）</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">size_t</span> v2 = <span class=\"number\">42</span>; <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> f2 = [&amp;v2] &#123; <span class=\"keyword\">return</span> v2; &#125;;</span><br><span class=\"line\">v2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> jj = f2();</span><br><span class=\"line\"><span class=\"meta\"># jj为0；f2保存v1的引用</span></span><br><span class=\"line\"># 需要注意的是必须确保被引用的对象在lambda执行的时候是存在的</span><br><span class=\"line\"># 如果可能的话，避免捕获指针或引用（C++ Primer <span class=\"number\">351</span>页）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"隐式捕获\"><a href=\"#隐式捕获\" class=\"headerlink\" title=\"隐式捕获\"></a>隐式捕获</h4><p>我们可以让编译器根据<code>lambda</code>函数体中的代码来推断我们要使用哪些变量，在捕获列表中写一个<code>&amp;</code>表示捕获引用，<code>=</code>表示采用值捕获方式，我们可以重写<code>find_if</code>函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sz为隐式值捕获</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> wc = find_if(words.begin(), words.end(),</span><br><span class=\"line\">     [=] (<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span><br><span class=\"line\">     &#123; <span class=\"keyword\">return</span> s.size() &gt;= sz; &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果想对一部分变量使用值捕获，一部分使用引用捕获，可以混合使用隐式捕获和显示捕获：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">ostream &amp;os = <span class=\"built_in\">cout</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> c = <span class=\"string\">' '</span>;</span><br><span class=\"line\"><span class=\"comment\">// os隐式引用捕获，c显示值捕获</span></span><br><span class=\"line\">for_each(wc, words.end(), [&amp;, c] (<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s) &#123; os &lt;&lt; s &lt;&lt; c;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// os显示引用捕获，c隐式值捕获</span></span><br><span class=\"line\">for_each(wc, words.end(), [=, &amp;os] (<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s) &#123; os &lt;&lt; s &lt;&lt; c;&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>当我们使用混合捕获时，捕获列表第一个变量必须是一个&amp;或者=，定义了默认捕获方式为引用或值。</strong></li>\n<li><strong>混合捕获时，显示捕获的变量必须使用与隐式捕获不同的方式，即：显示引用捕获，隐式值捕获或者显示值捕获，隐式引用捕获。</strong></li>\n</ol>\n<h4 id=\"指定lambda返回类型\"><a href=\"#指定lambda返回类型\" class=\"headerlink\" title=\"指定lambda返回类型\"></a>指定lambda返回类型</h4><p>标准库函数<code>transform</code>：接受三个迭代器和一个可调用对象，前两个迭代器表示输入序列，第三个迭代器表示目的位置。算法对输入序列中的每个元素调用可调用对象，并将结果写到目的位置：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取绝对值</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vv1&#123;<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">-20</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">transform(vv1.begin(), vv1.end(), vv1.begin(),</span><br><span class=\"line\">          [] (<span class=\"keyword\">int</span> i) &#123; <span class=\"keyword\">return</span> i &lt; <span class=\"number\">0</span> ? -i : i; &#125;);</span><br><span class=\"line\"># <span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">20</span>,<span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>如果写成以下形式就会产生编译错误：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">transform(vv1.begin(), vv1.end(), vv1.begin(),</span><br><span class=\"line\">          [] (<span class=\"keyword\">int</span> i) &#123; <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> -i; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> i; &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这是因为函数体中不止一个<code>return</code>语句，<code>lambda</code>无法判断返回类型。如果我们需要为其定义返回类型，必须用尾置的方式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">transform(vv1.begin(), vv1.end(), vv1.begin(),</span><br><span class=\"line\">          [] (<span class=\"keyword\">int</span> i) -&gt; <span class=\"keyword\">int</span> &#123; <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> -i; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> i; &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数绑定\"><a href=\"#参数绑定\" class=\"headerlink\" title=\"参数绑定\"></a>参数绑定</h3><hr>\n<p>对于只在一两个地方使用的函数，使用<code>lambda</code>是很方便的，多次使用或者函数体比较长的话定义一个函数来实现更好。但是对于捕获局部变量的<code>lambda</code>表达式来说，用函数代替就不太容易了。</p>\n<hr>\n<p>在之前的<code>find_if</code>函数中，我们可以容易写出来一个相同功能的函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check_size</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s, <span class=\"built_in\">string</span>::size_type sz)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s.size() &gt;= sz;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是<code>find_if</code>函数只支持一元谓词，直接使用肯定是不可以的。</p>\n<h4 id=\"标准库bind函数\"><a href=\"#标准库bind函数\" class=\"headerlink\" title=\"标准库bind函数\"></a>标准库bind函数</h4><p>使用<code>bind</code>函数可以解决上述问题，此函数定义在头文件<code>functional</code>中，可以将<code>bind</code>函数看作一个通用的函数适配器，它接受一个可调用对象，生成一个新的可调用对象来适配原对象的参数列表。</p>\n<p>调用形式为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> newCallable = bind(callable, arg_list)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>newCallable</code>本身是一个可调用对象</li>\n<li><code>arg_list</code>是一个逗号分隔的参数列表，对应给定<code>callable</code>的参数</li>\n</ul>\n<p>当我们调用<code>newCallable</code>时，<code>newCallable</code>会调用<code>callable</code>，并传递给它<code>arg_list</code>中的参数。</p>\n<p><code>arg_list</code>中的参数可能包含形如<code>_n</code>的名字，其中<code>n</code>是一个整数，称为<strong>占位符</strong>，表示占据了传递给<code>newCallable</code>参数的位置。</p>\n<h5 id=\"绑定check-size的sz参数\"><a href=\"#绑定check-size的sz参数\" class=\"headerlink\" title=\"绑定check_size的sz参数\"></a>绑定<code>check_size</code>的<code>sz</code>参数</h5><p>一个简单的例子，使用<code>bind</code>生成一个调用<code>check_size</code>的对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// check4是一个可调用对象，接受一个string类型的参数</span></span><br><span class=\"line\"><span class=\"comment\">// 使用此string和值4调用check_size</span></span><br><span class=\"line\"><span class=\"comment\">// 注意要使用using std::placeholder::_1或using namespace std::placeholders</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> check4 = bind(check_size, _1, <span class=\"number\">4</span>);</span><br><span class=\"line\"># 此bind调用只有一个占位符，表示check4只接受单一参数</span><br><span class=\"line\"># 占位符在arg_list的第一个位置，表示check4的此参数对应check_size的第一个参数，是<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp;</span><br><span class=\"line\"># 因此调用check4必须传递给它一个<span class=\"built_in\">string</span>类型的参数，check4将其传给check_size</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> b1 = check4(s);</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; b1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"># <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>此时我们可以改写<code>find_if</code>函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> wcc = find_if(words.begin(), words.end(),</span><br><span class=\"line\">     \tbind(check_size, _1, sz));</span><br><span class=\"line\">for_each(wcc, words.end(), [] (<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s) &#123; <span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"string\">\" \"</span>;&#125;);</span><br><span class=\"line\"><span class=\"meta\"># foxs jumps</span></span><br><span class=\"line\"><span class=\"comment\">// 对比之前的find_if</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> wc = find_if(words.begin(), words.end(),</span><br><span class=\"line\">     [sz] (<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span><br><span class=\"line\">     &#123; <span class=\"keyword\">return</span> s.size() &gt;= sz; &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p>《C++ Primer》370-383</p>\n","categories":["C++"],"tags":["lambda"]},{"title":"C++动态内存与智能指针","url":"/blog/2021/01/20/C-%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E4%B8%8E%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li><code>shared_ptr</code> 类</li>\n<li>直接管理内存</li>\n<li><code>shared_ptr</code> 和 <code>new</code> 结合使用</li>\n<li>智能指针和异常</li>\n<li><code>unique_ptr</code></li>\n<li><code>weak_ptr</code></li>\n</ol>\n<a id=\"more\"></a>\n\n<p>静态内存：保存局部 <code>static</code> 对象、类 <code>static</code> 数据成员及定义在任何函数之外的变量。</p>\n<p>栈内存：保存和定义在函数内的非 <code>static</code> 对象。</p>\n<p>除了静态内存和栈内存，程序还拥有一个内存池，被称为<strong>自由空间</strong>或<strong>堆</strong>。程序用堆来存储<strong>动态分配</strong>的对象，当动态对象不再使用时，必须用代码显式的销毁它们。</p>\n<p><strong>动态内存与智能指针</strong></p>\n<ul>\n<li><code>new</code> ：在动态内存中为对象分配空间并返回一个指向该对象的指针。</li>\n<li><code>delete</code> ：接受一个动态对象的指针，销毁该对象，并释放相关内存。</li>\n</ul>\n<p>不合理时释放内存会出现内存泄漏（忘记释放）或产生引用非法内存的指针（有指针还在引用内存时就释放了它）。</p>\n<p>标准库提供两种<strong>智能指针</strong>管理动态对象，它们可以自动释放所指向的对象。</p>\n<ol>\n<li><code>shared_ptr</code> 允许多个指针指向同一个对象。</li>\n<li><code>unique_ptr</code> 则<strong>独占</strong>所指向的对象。</li>\n</ol>\n<p>标准库还定义了一个名为 <code>weak_ptr</code> 的伴随类，它是一种弱引用（**?**），指向 <code>shared_ptr</code> 所管理的对象。这三种类型都定义在 <code>memory</code> 头文件中。</p>\n<h4 id=\"shared-ptr类\"><a href=\"#shared-ptr类\" class=\"headerlink\" title=\"shared_ptr类\"></a>shared_ptr类</h4><p>智能指针也是模板，必须提供指针可以指向的类型：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">string</span>&gt; p1; <span class=\"comment\">// 指向string</span></span><br><span class=\"line\"><span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;  p2; <span class=\"comment\">// 指向int的list</span></span><br></pre></td></tr></table></figure>\n\n<p>如果在一个条件判断中使用智能指针，效果就是检测它是否为空：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果p1不为空，并且指向一个空的string</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(p1 &amp;&amp; p1-&gt;empty())</span><br><span class=\"line\">\t*p1 = <span class=\"string\">\"hi\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>shared_ptr </code>和 <code>unique_ptr</code> 都支持的操作：</p>\n<img src=\"/blog/2021/01/20/C-动态内存与智能指针/shared_ptr与unique_ptr都支持的操作.png\">\n\n<p><code>shared_ptr</code> 独有的操作：</p>\n<img src=\"/blog/2021/01/20/C-动态内存与智能指针/shared_ptr独有的操作.png\">\n\n<h5 id=\"make-shared函数\"><a href=\"#make-shared函数\" class=\"headerlink\" title=\"make_shared函数\"></a>make_shared函数</h5><p>此函数在动态内存中分配一个对象并初始化它，返回指向此对象的 <code>shared_ptr</code>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指向一个值为42的int的shared_ptr</span></span><br><span class=\"line\"><span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p3 = make_shared&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"comment\">// 指向一个值初始化的int，即，值为0</span></span><br><span class=\"line\"><span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p4 = make_shared&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 也可以用auto</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>调用make_shared<t>时必须与T的某个构造函数相匹配</t></strong>。</p>\n<h5 id=\"shared-ptr的拷贝和赋值\"><a href=\"#shared-ptr的拷贝和赋值\" class=\"headerlink\" title=\"shared_ptr的拷贝和赋值\"></a>shared_ptr的拷贝和赋值</h5><p>当进行拷贝或赋值操作时，每个 <code>shared_ptr</code> 都会记录又多少个其他 <code>shared_ptr</code> 指向相同的对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> p = make_shared&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">q</span><span class=\"params\">(p)</span></span>; <span class=\"comment\">// p和q指向相同对象，此对象有两个引用者</span></span><br></pre></td></tr></table></figure>\n\n<p>每个 <code>shared_ptr</code> 都有要给<strong>引用计数</strong>，只要我们拷贝一个 <code>shared_ptr</code> ，计数器就会增加，当我们给 <code>shared_ptr</code> 赋予一个新值或是 <code>shared_ptr</code> 被销毁，计数器递减。</p>\n<p>一旦计数器变为0，它就会自动释放自己所管理的对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> r = make_shared&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">42</span>);</span><br><span class=\"line\">r = q; <span class=\"comment\">// 给r赋值，令它指向另一个地址</span></span><br><span class=\"line\">\t   <span class=\"comment\">// 递增q指向的对象的引用计数</span></span><br><span class=\"line\">\t   <span class=\"comment\">// 递减r原来指向的对象的引用计数</span></span><br><span class=\"line\">\t   <span class=\"comment\">// r原来指向的对象已经没有引用者，会自动释放</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"shared-ptr自动销毁所管理的对象\"><a href=\"#shared-ptr自动销毁所管理的对象\" class=\"headerlink\" title=\"shared_ptr自动销毁所管理的对象\"></a>shared_ptr自动销毁所管理的对象</h5><p>当指向一个对象的最后一个 <code>shared_ptr</code> 被销毁时，<code>shared_ptr</code> 类会通过<strong>析构函数</strong>销毁此对象。<code>shared_ptr</code> 的析构函数会递减它所指向的对象的引用计数，如果引用计数变为0， <code>shared_ptr</code> 的析构函数就会销毁对象，并释放它占用的内存。</p>\n<h5 id=\"shared-ptr还会自动释放相关联的内存\"><a href=\"#shared-ptr还会自动释放相关联的内存\" class=\"headerlink\" title=\"shared_ptr还会自动释放相关联的内存\"></a>shared_ptr还会自动释放相关联的内存</h5><img src=\"/blog/2021/01/20/C-动态内存与智能指针/note_shared_ptr释放内存.png\">\n\n<h5 id=\"使用了动态生存期的资源的类\"><a href=\"#使用了动态生存期的资源的类\" class=\"headerlink\" title=\"使用了动态生存期的资源的类\"></a>使用了动态生存期的资源的类</h5><p>程序使用动态内存出于一下三种原因之一 ：</p>\n<ol>\n<li>程序不知道自己需要使用多少对象。</li>\n<li>程序不知道所需对象的准确类型。</li>\n<li>程序需要在多个对象间共享数据。</li>\n</ol>\n<p>一般而言，如果两个对象共享底层的数据，当某个对象被销毁时，我们不能单方面的销毁底层数据：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">Blob&lt;<span class=\"built_in\">string</span>&gt; b1; <span class=\"comment\">// 空Blob</span></span><br><span class=\"line\">&#123;\t新作用域</span><br><span class=\"line\">    Blob&lt;<span class=\"built_in\">string</span>&gt; b2 = &#123;<span class=\"string\">\"z\"</span>,<span class=\"string\">\"zx\"</span>,<span class=\"string\">\"zxy\"</span>&#125;;</span><br><span class=\"line\"> \tb1 = b2; <span class=\"comment\">// b1和b2共享相同的元素</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// b2被销毁了，但b2中的元素不能销毁</span></span><br><span class=\"line\">  <span class=\"comment\">// b1指向最初由b2创建的元素</span></span><br></pre></td></tr></table></figure>\n\n<p>此例中，<code>b1</code> 和 <code>b2</code> 共享相同的元素。当 <code>b2</code> 离开作用域时，这些元素必须保留，<code>b1</code> 仍然在使用它们。</p>\n<h4 id=\"直接管理内存\"><a href=\"#直接管理内存\" class=\"headerlink\" title=\"直接管理内存\"></a>直接管理内存</h4><h5 id=\"使用new动态分配和初始化对象\"><a href=\"#使用new动态分配和初始化对象\" class=\"headerlink\" title=\"使用new动态分配和初始化对象\"></a>使用new动态分配和初始化对象</h5><p>使用传统构造方式（使用圆括号），或列表初始化（使用花括号）初始化一个动态分配的对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *pi = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">1024</span>); <span class=\"comment\">// pi指向的对象的值为1024</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> *ps = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"number\">10</span>, <span class=\"string\">'9'</span>); <span class=\"comment\">// *ps为\"9999999999\"</span></span><br><span class=\"line\"><span class=\"comment\">// vector有10个元素，值以此从0到9</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; *pv = <span class=\"keyword\">new</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>对动态分配的对象进行值初始化：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> *ps = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(); <span class=\"comment\">// 值初始化为空string</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *pi = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(); <span class=\"comment\">// 值初始化为0；*pi为0</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"动态分配的const对象\"><a href=\"#动态分配的const对象\" class=\"headerlink\" title=\"动态分配的const对象\"></a>动态分配的const对象</h5><p>用 <code>new</code> 分配 <code>const</code> 是合法的，但必须进行初始化，返回一个指向 <code>cosnt</code> 的指针：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *pci = <span class=\"keyword\">new</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>(<span class=\"number\">1024</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> *pcs = <span class=\"keyword\">new</span> <span class=\"keyword\">const</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"comment\">// const对象是可以销毁的</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> pci;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内存耗尽\"><a href=\"#内存耗尽\" class=\"headerlink\" title=\"内存耗尽\"></a>内存耗尽</h5><p>如果 <code>new</code> 不能分配所要求的内存空间，它会抛出一个类型为 <code>bad_alloc</code> 的异常，但是可以使用 <code>new</code>  的方式阻止其抛出异常，称这种形式的 <code>new</code> 为<strong>定位new</strong>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果分配失败，new返回一个空指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>; <span class=\"comment\">// 如果分配失败，new抛出std:bad_alloc;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p2 = <span class=\"keyword\">new</span> (nothrow) <span class=\"keyword\">int</span>; <span class=\"comment\">// 如果分配失败，new返回要给空指针</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"释放动态内存\"><a href=\"#释放动态内存\" class=\"headerlink\" title=\"释放动态内存\"></a>释放动态内存</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> p; <span class=\"comment\">// p必须指向一个动态分配的对象或是一个空指针</span></span><br></pre></td></tr></table></figure>\n\n<p>释放一块非 <code>new</code> 分配的内存，或者将相同的指针值释放多次，其行为是未定义的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *pi1 = &amp;i;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> pi1; <span class=\"comment\">// 未定义：pi1指向一个局部变量</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *pi2 = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> pi2; <span class=\"comment\">// 正确：释放一个空指针总是没有错误的</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"动态对象的生存期直到被释放时为止\"><a href=\"#动态对象的生存期直到被释放时为止\" class=\"headerlink\" title=\"动态对象的生存期直到被释放时为止\"></a>动态对象的生存期直到被释放时为止</h5><img src=\"/blog/2021/01/20/C-动态内存与智能指针/warning_释放动态对象.png\">\n\n<h5 id=\"使用new和delete管理动态内存存在的三个常见问题\"><a href=\"#使用new和delete管理动态内存存在的三个常见问题\" class=\"headerlink\" title=\"使用new和delete管理动态内存存在的三个常见问题\"></a>使用new和delete管理动态内存存在的三个常见问题</h5><ol>\n<li>忘记 <code>delete</code> 内存，会导致<strong>内存泄漏</strong>，因为这种内存永远不可能被归还给自由空间了，只有真正耗尽内存时，才能检测到这种错误。</li>\n<li>使用已释放掉的内存。</li>\n<li>同一块内存释放两次。</li>\n</ol>\n<h5 id=\"delete之后重置指针值\"><a href=\"#delete之后重置指针值\" class=\"headerlink\" title=\"delete之后重置指针值\"></a>delete之后重置指针值</h5><p>在 <code>delete</code> 之后，指针就变成了<strong>空悬指针</strong>，即，指向一块曾经保存数据对象但现在已经无效的内存的指针。</p>\n<h4 id=\"shared-ptr和new结合使用\"><a href=\"#shared-ptr和new结合使用\" class=\"headerlink\" title=\"shared_ptr和new结合使用\"></a>shared_ptr和new结合使用</h4><p>我们可以使用 <code>new</code> 返回的指针来初始化智能指针：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">p2</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">42</span>))</span></span>; <span class=\"comment\">// p2指向一个值为42的int</span></span><br></pre></td></tr></table></figure>\n\n<p>接受指针参数的智能指针的构造函数是 <code>explicit</code> 的，因此必须使用直接初始化形式来初始化一个智能指针：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; p1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">1024</span>); <span class=\"comment\">// 错误</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">p2</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">1024</span>))</span></span>; <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2021/01/20/C-动态内存与智能指针/定义和改变shared_ptr的其他方法1.png\">\n\n<img src=\"/blog/2021/01/20/C-动态内存与智能指针/定义和改变shared_ptr的其他方法2.png\">\n\n<h5 id=\"get使用注意\"><a href=\"#get使用注意\" class=\"headerlink\" title=\"get使用注意\"></a>get使用注意</h5><img src=\"/blog/2021/01/20/C-动态内存与智能指针/warning_get_use.png\">\n\n<h5 id=\"其他shared-ptr操作\"><a href=\"#其他shared-ptr操作\" class=\"headerlink\" title=\"其他shared_ptr操作\"></a>其他shared_ptr操作</h5><p>我们可以同 <code>reset</code> 来将一个新的指针赋予一个 <code>shared_ptr</code> ：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">p = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">1024</span>); <span class=\"comment\">// 错误，不能将一个指针赋予shared_ptr</span></span><br><span class=\"line\">p.reset(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">1024</span>)); <span class=\"comment\">// 正确，p指向一个新对象</span></span><br></pre></td></tr></table></figure>\n\n<p><code>reset</code> 成员常与 <code>unique</code> 一起使用：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!p.unique())&#123;</span><br><span class=\"line\">\tp.reset(<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(*p)); <span class=\"comment\">// 不是唯一用户，分配新的拷贝</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*p += newVal; <span class=\"comment\">// 现在唯一，可以改变对象的值</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"智能指针和异常\"><a href=\"#智能指针和异常\" class=\"headerlink\" title=\"智能指针和异常\"></a>智能指针和异常</h4><p>如果使用智能指针，即使程序块过早结束，智能指针也能确保在内存不再需要时将其释放；而 <code>new</code> 和 <code>delete</code> 之间发生异常，且异常未被捕获，则内存就永远不会被释放了。</p>\n<h5 id=\"使用自己的释放操作\"><a href=\"#使用自己的释放操作\" class=\"headerlink\" title=\"使用自己的释放操作\"></a>使用自己的释放操作</h5><p>有些类未定义析构函数，需要用户显示地释放所使用的任何资源。假定我们正在使用一个C和C++都使用的网络库，使用这个库的代码可能如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">destination</span>;</span> <span class=\"comment\">// 表示我们正在连接什么</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">connection</span>;</span> <span class=\"comment\">// 使用连接所需的信息</span></span><br><span class=\"line\"><span class=\"function\">connection <span class=\"title\">connect</span><span class=\"params\">(destination *)</span></span>; <span class=\"comment\">// 打开连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">disconnect</span><span class=\"params\">(connect)</span></span>; <span class=\"comment\">// 关闭给定的连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(destination &amp;d <span class=\"comment\">/* 其他参数 */</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获得一个连接，记住使用完之后要关闭！</span></span><br><span class=\"line\">    connection c = connect(&amp;d);</span><br><span class=\"line\">    <span class=\"comment\">// 使用连接</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果我们在f推出前忘记调用disconnect，就无法关闭c了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>shared_ptr</code> 来保证 <code>connection</code> 被正确关闭：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个函数来代替delete</span></span><br><span class=\"line\"><span class=\"comment\">// 这个「删除器」函数必须能够完成对shared_ptr中保存的指针进行释放的操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">end_connection</span><span class=\"params\">(connection *p)</span> </span>&#123; disconnect (*p); &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 创建shared_ptr时，可以传递一个（可选的）指向删除器函数的参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(destination &amp;d <span class=\"comment\">/* 其他参数 */</span>)</span></span>&#123;</span><br><span class=\"line\">    connection c = connect(&amp;d);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">shared_ptr</span>&lt;connection&gt; <span class=\"title\">p</span><span class=\"params\">(&amp;c, end_connection)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用连接</span></span><br><span class=\"line\">    <span class=\"comment\">// 当f退出时（即使时因为异常而退出），connection会被正确关闭</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"unique-ptr\"><a href=\"#unique-ptr\" class=\"headerlink\" title=\"unique_ptr\"></a>unique_ptr</h4><p>当我们定义一个 <code>unique_ptr</code> 时，需要将其绑定到一个 <code>new</code> 返回的指针上。如果进行初始化，必须是直接初始化：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">double</span>&gt; p1; <span class=\"comment\">// 可以指向一个double的unique_ptr</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">p2</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">42</span>))</span></span>; <span class=\"comment\">// p2指向一个值为42的int</span></span><br></pre></td></tr></table></figure>\n\n<p><code>unique</code> 不支持普通的拷贝或赋值操作：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">unique_ptr</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">p1</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">\"zxy\"</span>))</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">unique_ptr</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">p2</span><span class=\"params\">(p1)</span></span>; <span class=\"comment\">// 错误，不能拷贝</span></span><br><span class=\"line\"><span class=\"built_in\">unique_ptr</span>&lt;<span class=\"built_in\">string</span>&gt; p3;</span><br><span class=\"line\">p3 = p2; <span class=\"comment\">// 错误，不能赋值</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2021/01/20/C-动态内存与智能指针/unique_str操作.png\">\n\n<p>可以通过 <code>release</code> 或 <code>reset</code> 将指针的所有权（非const）从一个 <code>unique_ptr</code> 转移给另一个 <code>unique_ptr</code>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将所有权从p1转移给p2，并将p1置空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">unique_ptr</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">p2</span><span class=\"params\">(p1.release())</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 将所有权从p3转移给p2，并将p3置空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">unique_ptr</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">p3</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">\"Zxy\"</span>))</span></span>;</span><br><span class=\"line\">p2.reset(p3.release()); <span class=\"comment\">// reset释放了p2原来指向的内存</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">p2.release(); <span class=\"comment\">// 错误，p2不会释放内存，而且我们丢失了指针</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> p = p2.release(); <span class=\"comment\">// 正确，但必须记得delete(p);</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"传递unique-ptr参数和返回unique-ptr\"><a href=\"#传递unique-ptr参数和返回unique-ptr\" class=\"headerlink\" title=\"传递unique_ptr参数和返回unique_ptr\"></a>传递unique_ptr参数和返回unique_ptr</h5><p>不能拷贝 <code>unique_ptr</code> 规则有一个例外：我们可以拷贝或赋值一个将要被销毁的 <code>unique_ptr</code> 。如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">clone</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(p));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 返回局部对象的拷贝</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">clone</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">ret</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(p))</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"向unique-ptr传递删除器\"><a href=\"#向unique-ptr传递删除器\" class=\"headerlink\" title=\"向unique_ptr传递删除器\"></a>向unique_ptr传递删除器</h5><p>用 <code>unique_ptr</code> 来代替 <code>shared_ptr</code> ，如下所示：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">end_connection</span><span class=\"params\">(connection *p)</span> </span>&#123; disconnect (*p); &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 创建shared_ptr时，可以传递一个（可选的）指向删除器函数的参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(destination &amp;d <span class=\"comment\">/* 其他参数 */</span>)</span></span>&#123;</span><br><span class=\"line\">    connection c = connect(&amp;d);</span><br><span class=\"line\">    <span class=\"built_in\">unique_ptr</span>&lt;connection, <span class=\"keyword\">decltype</span>(end_connection)*&gt; </span><br><span class=\"line\">        p(&amp;c, end_connection);</span><br><span class=\"line\">    <span class=\"comment\">// 使用连接</span></span><br><span class=\"line\">    <span class=\"comment\">// 当f退出时（即使时因为异常而退出），connection会被正确关闭</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于 <code>decltype(end_connection)</code> 返回一个函数类型，所以我们必须添加一个 <code>*</code> 来指出我们正在使用该类型的一个指针。</p>\n<h4 id=\"weak-ptr\"><a href=\"#weak-ptr\" class=\"headerlink\" title=\"weak_ptr\"></a>weak_ptr</h4><p><code>weak_ptr</code> 是一种不控制所指向对象生存期的智能指针，它指向一个由 <code>shared_ptr</code> 管理的对象。将一个 <code>weak_ptr</code> 绑定到一个 <code>shared_ptr</code> 不会改变 <code>shared_ptr</code> 的引用计数。一旦最后一个指向对象的 <code>shared_ptr</code> 被销毁，对象就会被释放。</p>\n<img src=\"/blog/2021/01/20/C-动态内存与智能指针/weak_ptr.png\">\n\n<p>创建一个 <code>weak_ptr</code> 时，要用一个 <code>shared_ptr</code> 来初始化它：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> p = make_shared&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"function\">weak_ptr&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">wp</span><span class=\"params\">(p)</span></span>; <span class=\"comment\">// wp弱共享p，p的引用计数未改变</span></span><br></pre></td></tr></table></figure>\n\n<p>由于对象可能不存在，不能使用 <code>weak_ptr</code> 直接访问对象，必须调用 <code>lock</code>。如果对象存在， <code>lock</code> 返回一个指向共享对象的 <code>shared_ptr</code>。例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; np = wp.lock())&#123; <span class=\"comment\">// 如果np不为空则条件成立</span></span><br><span class=\"line\">\t<span class=\"comment\">// 在if中，np与p共享对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["C++"],"tags":["智能指针"]},{"title":"C++关联容器","url":"/blog/2020/12/21/C-%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>使用关联容器</li>\n<li>关联容器概述</li>\n<li>关联容器操作</li>\n<li>无序容器</li>\n</ol>\n<a id=\"more\"></a>\n\n<p>关联容器支持高效的关键字查找和访问。两个主要的关联容器类型是<strong>map</strong>和<strong>set</strong>。</p>\n<ul>\n<li><code>map</code>中元素是一些关键字-值（key-value）对，关键字起到索引的作用，值则表示于索引相关联的数据。</li>\n<li><code>set</code>中每个元素只包含一个关键字，支持高效的关键字查询操作-检查一个给定的关键字是否在set中。</li>\n</ul>\n<img src=\"/blog/2020/12/21/C-关联容器/关联容器类型.png\">\n\n<p>类型<code>map</code>和<code>multimap</code>定义在头文件<code>map</code>中；<code>set</code>和<code>multiset</code>定义在头文件<code>set</code>中；无序容器定义在头文件<code>unordered_map</code>和<code>unordered_set</code>中。</p>\n<h4 id=\"使用关联容器\"><a href=\"#使用关联容器\" class=\"headerlink\" title=\"使用关联容器\"></a>使用关联容器</h4><h5 id=\"使用map\"><a href=\"#使用map\" class=\"headerlink\" title=\"使用map\"></a>使用map</h5><p>单词计数程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">size_t</span>&gt; word_count;</span><br><span class=\"line\"><span class=\"built_in\">string</span> count;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; word)</span><br><span class=\"line\">\t++word_count[word];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp;w : word_count)</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; w.first &lt;&lt; <span class=\"string\">\" occurs \"</span> &lt;&lt; w.second</span><br><span class=\"line\">    &lt;&lt; ((w.second &gt; <span class=\"number\">1</span>) ? <span class=\"string\">\" times\"</span> : <span class=\"string\">\" time\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n\n<p>此程序读取输入，报告每个单词出现多少次。<code>map</code>保存的每个元素中，关键字是<code>string</code>，值是<code>size_t</code>类型。如果<code>word</code>还未在<code>map</code>中。下标运算符会创建一个新元素。从<code>map</code>中提取一个元素时，会得到一个<code>pair</code>类型的对象，<code>pair</code>用<code>first</code>成员保存关键字，用<code>second</code>成员保存对应的值。</p>\n<h5 id=\"使用set\"><a href=\"#使用set\" class=\"headerlink\" title=\"使用set\"></a>使用set</h5><p>对上一个程序扩展，忽略常见单词，如“the”、“and”、“or”等。可以用<code>set</code>保存想忽略的单词，只对不在集合中的单词统计出现次数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">size_t</span>&gt; word_count;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; exclude = &#123;<span class=\"string\">\"The\"</span>, <span class=\"string\">\"But\"</span>, <span class=\"string\">\"And\"</span>, <span class=\"string\">\"Or\"</span>, <span class=\"string\">\"An\"</span>, <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">                       <span class=\"string\">\"the\"</span>, <span class=\"string\">\"but\"</span>, <span class=\"string\">\"and\"</span>, <span class=\"string\">\"or\"</span>, <span class=\"string\">\"an\"</span>, <span class=\"string\">\"a\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">string</span> count;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; word)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exclude.find(word) == exclude.end())</span><br><span class=\"line\">\t\t++word_count[word];</span><br></pre></td></tr></table></figure>\n\n<p>在<code>if</code>中，<code>find</code>返回一个迭代器。如果给定关键字在<code>set</code>中，迭代器指向该关键字。否则，<code>find</code>返回尾后迭代器。</p>\n<h4 id=\"关联容器概述\"><a href=\"#关联容器概述\" class=\"headerlink\" title=\"关联容器概述\"></a>关联容器概述</h4><h5 id=\"定义关联容器\"><a href=\"#定义关联容器\" class=\"headerlink\" title=\"定义关联容器\"></a>定义关联容器</h5><p>当定义一个<code>map</code>时，必须指明<strong>关键字类型</strong>和<strong>值类型</strong>；而定义一个<code>set</code>时，只需要指明<strong>关键字类型</strong>。每个关联容器都定义了一个默认构造函数，它创建一个指定类型的空容器。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">size_t</span>&gt; word_count; <span class=\"comment\">// 空容器</span></span><br><span class=\"line\"><span class=\"comment\">// 列表初始化</span></span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; exclude = &#123;<span class=\"string\">\"The\"</span>, <span class=\"string\">\"But\"</span>, <span class=\"string\">\"And\"</span>, <span class=\"string\">\"Or\"</span>, <span class=\"string\">\"An\"</span>, <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">                       <span class=\"string\">\"the\"</span>, <span class=\"string\">\"but\"</span>, <span class=\"string\">\"and\"</span>, <span class=\"string\">\"or\"</span>, <span class=\"string\">\"an\"</span>, <span class=\"string\">\"a\"</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 三个元素；authors将姓映射为名</span></span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; authors = &#123; &#123;<span class=\"string\">\"zhao\"</span>, <span class=\"string\">\"xingyu\"</span>&#125;,</span><br><span class=\"line\">                                &#123;<span class=\"string\">\"zhou\"</span>, <span class=\"string\">\"yanxuan\"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>初始化<code>map</code>时，每对映射用花括号包含：{<em>key</em>, <em>value</em>}。</p>\n<h5 id=\"初始化multimap或multiset\"><a href=\"#初始化multimap或multiset\" class=\"headerlink\" title=\"初始化multimap或multiset\"></a>初始化multimap或multiset</h5><p><code>map</code>和<code>set</code>的关键字都是唯一的。容器<code>multiset</code>和<code>multimap</code>没有此限制，它们都允许多个元素具有相同的关键字。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个有20哥元素的vector，保存0到9每个整数的两个拷贝</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ivec;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::size_type i = <span class=\"number\">0</span>; i != <span class=\"number\">10</span>; ++i)&#123;</span><br><span class=\"line\">    ivec.push_back(i);</span><br><span class=\"line\">    ivec.push_back(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// iset包含来自ivec的不重复的元素；miset包含所有20个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">iset</span><span class=\"params\">(ivec.begin(), ivec.end())</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">multiset</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">miset</span><span class=\"params\">(ivec.begin(), ivec.end())</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; ivec.size() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; iset.size() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; miset.size() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关键字类型的要求\"><a href=\"#关键字类型的要求\" class=\"headerlink\" title=\"关键字类型的要求\"></a>关键字类型的要求</h5><h6 id=\"有序容器的关键字类型\"><a href=\"#有序容器的关键字类型\" class=\"headerlink\" title=\"有序容器的关键字类型\"></a>有序容器的关键字类型</h6><p>所提供的操作必须在关键字类型上定义一个<strong>严格弱序</strong>。可以将严格弱序看作“小于”（<strong>书上是”小于等于”，网上查到为小于</strong>），它必须具备以下性质：</p>\n<ul>\n<li>两个关键字不能同时“小于”对方</li>\n<li>如果k1”小于”k2，k2“小于”k3，那么k1必须”小于“k3</li>\n<li>如果存在两个关键字，任何一个都不”小于“另一个，那么我们称这两个关键字是”等价“的。并且等价具有传递性。</li>\n</ul>\n<p>如果两个关键字等价，那么容器将它们视作相等来处理。</p>\n<h6 id=\"使用关键字类型的比较函数\"><a href=\"#使用关键字类型的比较函数\" class=\"headerlink\" title=\"使用关键字类型的比较函数\"></a>使用关键字类型的比较函数</h6><p>在尖括号中出现的每个类型，就仅仅是一个类型而已。当我们创建一个容器（对象）时，才会以构造函数的形式提供真正的比较操作（其类型必须与尖括号中指定的类型相吻合）。</p>\n<p>例如：我们不能直接定义一个<code>Sales_data</code>的<code>multiset</code>，因为<code>Sales_data</code>没有<code>&lt;</code>运算符。以下函数在<code>ISBN</code>成员上定义一个严格弱序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">compareIsbn</span><span class=\"params\">(<span class=\"keyword\">const</span> Sales_data &amp;lhs, <span class=\"keyword\">const</span> Sales_data &amp;rhs)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lhs.isbn() &lt; rhs.isbn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>要使用自己定义的操作</strong>，在定义<code>multiset</code>时必须提供两个类型：<strong>关键字类型</strong>Sales_data以及<strong>比较操作类型</strong>——应该是一种函数指针类型，可以指向<code>compareIsbn</code>：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bookstore中多条记录可以有相同的ISBN</span></span><br><span class=\"line\"><span class=\"comment\">// bookstore中的元素以ISBN的顺序进行排列</span></span><br><span class=\"line\">multiset&lt;Sales_data, decltype(compareIsbn)*&gt; bookstore(compareIsbn);</span><br></pre></td></tr></table></figure>\n\n<p>*<em>当用decltype来获得一个函数指针类型时，必须加上一个</em>来指出我们要使用一个给定函数的指针**。<code>bookstore</code>中的元素将按它们的<code>ISBN</code>成员的值升序排列。</p>\n<h5 id=\"pair类型\"><a href=\"#pair类型\" class=\"headerlink\" title=\"pair类型\"></a>pair类型</h5><p><code>pair</code>标注库类型定义在头文件<code>utility</code>中。<code>pair</code>保存两个数据成员，它是一个用来生成特定类型的模板。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">pair&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span> &gt; anon;</span><br><span class=\"line\">pair&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">size_t</span>&gt; word_count;</span><br><span class=\"line\">pair&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; line;</span><br></pre></td></tr></table></figure>\n\n<p><code>pair</code>的默认构造函数对数据成员进行值初始化。以下三种初始化都是可以的：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; p = &#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; q&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">pair&lt;int, int&gt; m(1,1);</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2020/12/21/C-关联容器/pair上的操作.png\">\n\n<h6 id=\"创建pair对象的函数\"><a href=\"#创建pair对象的函数\" class=\"headerlink\" title=\"创建pair对象的函数\"></a>创建pair对象的函数</h6><p>新标准下，可以对返回值进行列表初始化：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">pair&lt;string, int&gt; process(vector&lt;string&gt; &amp;v)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理v</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!v.empty())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;v.back(), v.back().size()&#125;; <span class=\"comment\">// 列表初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> pair&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;(); <span class=\"comment\">// 隐式构造返回值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>早期版本必须显式的构造返回值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!v.empty())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pair&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;(v.back(), v.back().size());</span><br></pre></td></tr></table></figure>\n\n<p>还可以使用<code>make_pair</code>来生成<code>pair</code>对象，<code>pair</code>的两个类型来自于<code>make_pair</code>的参数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!v.empty())</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> make_pair(v.back(), v.back().size());</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关联容器操作\"><a href=\"#关联容器操作\" class=\"headerlink\" title=\"关联容器操作\"></a>关联容器操作</h4><img src=\"/blog/2020/12/21/C-关联容器/关联容器额外的类型别名.png\">\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt;::value_type v1; <span class=\"comment\">// v1是一个string</span></span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt;::key_value v2; <span class=\"comment\">// v2是一个string</span></span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;::value_type v3; <span class=\"comment\">// v3是一个pair&lt;const string, int&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;::key_type v4; <span class=\"comment\">// v4是一个string</span></span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;::mapped_type v5; <span class=\"comment\">// v5是一个int</span></span><br></pre></td></tr></table></figure>\n\n<p>只有<code>map</code>类型（<code>unordered_map、unordered_multimap、multimap、map</code>）才定义了<code>mapped_type</code>;</p>\n<h5 id=\"关联容器迭代器\"><a href=\"#关联容器迭代器\" class=\"headerlink\" title=\"关联容器迭代器\"></a>关联容器迭代器</h5><p>解引用一个关联容器的迭代器时，得到一个类型为容器的<code>value_type</code>的值的<strong>引用</strong>。对<code>map</code>而言，<code>value_type</code>是一个<code>pair</code>类型，其<code>first</code>成员保存<code>cosnt</code>的关键字，<code>second</code>成员保存值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获得指向word_count中一个元素的迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> map_it = word_count.begin();</span><br><span class=\"line\"><span class=\"comment\">// *map_it是指向一个pair&lt;const string, size_t&gt;对象的引用</span></span><br><span class=\"line\"><span class=\"comment\">// 或者使用(*map_it).first，(*map_it).second</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; map_it-&gt;first; <span class=\"comment\">// 打印此元素的关键字</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; map_it-&gt;second; <span class=\"comment\">// 打印此元素的值</span></span><br><span class=\"line\">map_it-&gt;first = <span class=\"string\">\"new key\"</span>; <span class=\"comment\">// 错误：关键字是const的</span></span><br><span class=\"line\">++map_it-&gt;second; <span class=\"comment\">// 正确：可以通过迭代器改变元素</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"set的迭代器是const的\"><a href=\"#set的迭代器是const的\" class=\"headerlink\" title=\"set的迭代器是const的\"></a>set的迭代器是const的</h6><p>虽然<code>set</code>类型同时定义了<code>iterator</code>和<code>const_iterator</code>类型， 但两种类型都只允许读<code>set</code>中的元素。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; iset = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator set_it = iset.begin();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(set_it != iset.end())&#123;</span><br><span class=\"line\">    *set_it = <span class=\"number\">42</span>; <span class=\"comment\">// 错误：set中的关键字是只读的</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; *set_it &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 正确：可以读关键字</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"遍历关联容器\"><a href=\"#遍历关联容器\" class=\"headerlink\" title=\"遍历关联容器\"></a>遍历关联容器</h6><p><code>map</code>和<code>set</code>都支持之前所说的<code>begin</code>和<code>end</code>操作。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> map_it = word_count.cbegin();</span><br><span class=\"line\"><span class=\"keyword\">while</span>(map_it != word_count.cbegin())&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; map_it-&gt;first &lt;&lt; <span class=\"string\">\" occurs\"</span></span><br><span class=\"line\">         &lt;&lt; map_it-&gt;second &lt;&lt; <span class=\"string\">\" times\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    ++map_it;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"关联容器和算法\"><a href=\"#关联容器和算法\" class=\"headerlink\" title=\"关联容器和算法\"></a>关联容器和算法</h6><p>通常不对关联容器使用泛型算法，有其专用算法。如果真要对一个关联容器使用算法，要么是将它当作一个源序列，要么当作一个目的位置。</p>\n<h5 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h5><p>使用关联容器的<code>insert</code>成员向容器中添加一个元素或一个元素范围：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ivec = &#123;<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>&#125;; <span class=\"comment\">// ivec有8个元素</span></span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; set2;</span><br><span class=\"line\">set2.insert(ivec.cbegin(), ivec.cend()); <span class=\"comment\">// set2有4个元素</span></span><br><span class=\"line\">set2.insert(&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>&#125;); <span class=\"comment\">// set2现在有8个元素</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"向map添加元素\"><a href=\"#向map添加元素\" class=\"headerlink\" title=\"向map添加元素\"></a>向map添加元素</h6><p>对一个<code>map</code>进行<code>insert</code>操作时，必须记住元素类型是<code>pair</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向word_count插入word的4种方法</span></span><br><span class=\"line\">word_count.insert(&#123;word, <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">word_count.insert(make_pair(word, <span class=\"number\">1</span>));</span><br><span class=\"line\">word_count.insert(pair&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">size_t</span>&gt;(word, <span class=\"number\">1</span>));</span><br><span class=\"line\">word_count.insert(<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">size_t</span>&gt;::value_type(word, <span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2020/12/21/C-关联容器/关联容器insert操作.png\">\n\n<h6 id=\"检测insert返回值\"><a href=\"#检测insert返回值\" class=\"headerlink\" title=\"检测insert返回值\"></a>检测insert返回值</h6><p><code>insert</code>(或<code>emplace</code>)返回的值依赖于容器类型和参数。对于<strong>不包含重复关键字</strong>的容器，添加单一元素的<code>insert</code>和<code>emplace</code>版本返回一个<code>pair</code>，告诉我们插入操作是否成功。<code>pair</code>的<code>first</code>成员是一个<strong>迭代器</strong>，指向<strong>具有给定关键字的元素</strong>；<code>second</code>成员是一个<code>bool</code>值，指出元素是插入成功还是已经存在于容器中。如果关键字已在容器中，则<code>insert</code>什么事情也不做，且返回值中的<code>bool</code>部分为<code>false</code>。如果关键字不存在，元素被插入容器中，且<code>bool</code>值为<code>true</code>。</p>\n<p>例子，重写单词计数程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">size_t</span>&gt; word_count;</span><br><span class=\"line\"><span class=\"built_in\">string</span> word;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; word)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> ret = word_count.insert(&#123;word, <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!ret.second)</span><br><span class=\"line\">        ++ret.first-&gt;second;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"展开递增语句\"><a href=\"#展开递增语句\" class=\"headerlink\" title=\"展开递增语句\"></a>展开递增语句</h6><ul>\n<li><strong>ret</strong>：保存<code>insert</code>返回的值，是一个<strong>pair</strong></li>\n<li><strong>ret.first</strong>：是一个<code>map</code>迭代器，指向具有给定关键字的元素</li>\n<li>**ret.first-&gt;**：解引用此迭代器，提取<code>map</code>种元素，元素也是一个<code>pair</code></li>\n<li><strong>ret.first-&gt;second</strong>：<code>map</code>中元素的值部分</li>\n<li><strong>++ret.first-&gt;second</strong>：递增此值</li>\n</ul>\n<h6 id=\"向multiset或multimap添加元素\"><a href=\"#向multiset或multimap添加元素\" class=\"headerlink\" title=\"向multiset或multimap添加元素\"></a>向multiset或multimap添加元素</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">multimap</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; authors;</span><br><span class=\"line\"><span class=\"comment\">// 插入第一个元素，关键字为zxy</span></span><br><span class=\"line\">authors.insert(&#123;<span class=\"string\">\"zxy\"</span>, <span class=\"string\">\"c++泛型算法\"</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 正确：添加第二个元素，关键字也是zxy\"</span></span><br><span class=\"line\">authors.insert(&#123;<span class=\"string\">\"zxy\"</span>, <span class=\"string\">\"c++关联容器\"</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里<code>insert</code>操作返回一个指向新元素的迭代器。无需返回一个<code>bool</code>值，因为<code>insert</code>总是向这类容器中加入一个新元素。</p>\n<h5 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h5><p>关联容器定义了三个版本的<code>erase</code>，如下：</p>\n<img src=\"/blog/2020/12/21/C-关联容器/关联容器erase操作.png\">\n\n<p>后两个与顺序容器一样，第一个是关联容器额外提供的，它接受一个<code>key_type</code>类型。此版本删除所有匹配给定关键字的元素（如果存在的话），返回实际删除元素的数量。</p>\n<ul>\n<li>对于保存不重复关键字的容器，<code>erase</code>的返回值总是0或1。0表示要删除的元素不在容器中</li>\n<li>对于允许重复关键字的容器，删除元素的数量可能大于1</li>\n</ul>\n<h5 id=\"map的下标操作\"><a href=\"#map的下标操作\" class=\"headerlink\" title=\"map的下标操作\"></a>map的下标操作</h5><p><code>map</code>和<code>unordered_map</code>容器提供了下标运算符和一个对应的<code>at</code>函数：</p>\n<img src=\"/blog/2020/12/21/C-关联容器/map和unordered_map的下标操作.png\">\n\n<p><strong><code>set</code>类型不支持下标，因为<code>set</code>中元素本身就是关键字，同时也不能对<code>multimap</code>或者<code>unordered_multimap</code>进行下标操作，因为这些容器中可能有多个值与一个关键字相关联</strong>。</p>\n<img src=\"/blog/2020/12/21/C-关联容器/map_note.png\">\n\n<h6 id=\"使用下标操作的返回值\"><a href=\"#使用下标操作的返回值\" class=\"headerlink\" title=\"使用下标操作的返回值\"></a>使用下标操作的返回值</h6><p>当对一个<code>map</code>进行下标操作时，会获得一个<code>mapped_type</code>对象；但当解引用一个<code>map</code>迭代器时，会得到一个<code>value_type</code>对象。与其他下标运算符相同的是，<code>map</code>的下标运算符返回一个左值，所以既可以读也可以写元素。</p>\n<img src=\"/blog/2020/12/21/C-关联容器/map下标_note.png\">\n\n<h5 id=\"访问元素\"><a href=\"#访问元素\" class=\"headerlink\" title=\"访问元素\"></a>访问元素</h5><p>关联容器提供多种查找一个指定元素的方法，应该使用哪个取决我们要解决什么问题。</p>\n<img src=\"/blog/2020/12/21/C-关联容器/在一个关联容器种查找元素的操作.png\">\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; iset&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">iset.find(<span class=\"number\">1</span>); <span class=\"comment\">// 返回一个迭代器，指向key = 1的元素</span></span><br><span class=\"line\">iset.find(<span class=\"number\">11</span>); <span class=\"comment\">// 返回一个迭代器，其值等于iset.end()</span></span><br><span class=\"line\">iset.count(<span class=\"number\">1</span>); <span class=\"comment\">// 返回1</span></span><br><span class=\"line\">iset.count(<span class=\"number\">11</span>); <span class=\"comment\">// 返回0</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"对map和find代替下标操作\"><a href=\"#对map和find代替下标操作\" class=\"headerlink\" title=\"对map和find代替下标操作\"></a>对map和find代替下标操作</h6><p>如果我们只是想知道一个给定的关键字是否在<code>map</code>中，而不想改变<code>map</code>（下标操作会插入一个未在<code>map</code>的元素）。这种情况下应该使用<code>find</code>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(word_count.find(<span class=\"string\">\"foobar\"</span>) == word_count.end())</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"foobar is not in the map\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"在multimap或multiset中查找元素\"><a href=\"#在multimap或multiset中查找元素\" class=\"headerlink\" title=\"在multimap或multiset中查找元素\"></a>在multimap或multiset中查找元素</h6><p>如果一个<code>multimap</code>或<code>multiset</code>中有多个元素具有给定关键字，则这些元素在容器中会相邻存储。</p>\n<p>例如，给定一个从作者到著作题目的映射，我们可能想打印一个特定作者的所有著作。可以用三种不同方法来解决这个问题。最直观的方法是使用<code>find</code>和<code>count</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">search_item</span><span class=\"params\">(<span class=\"string\">\"zxy\"</span>)</span></span>; <span class=\"comment\">// 作者</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> entries = authors.count(search_item); <span class=\"comment\">// 元素的数量</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> iter = authors.find(search_item); <span class=\"comment\">// 作者的第一本书</span></span><br><span class=\"line\"><span class=\"comment\">// 查找此作者所有著作</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(entries)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 打印书名</span></span><br><span class=\"line\">    ++iter; <span class=\"comment\">// 下一本</span></span><br><span class=\"line\">    --entries; <span class=\"comment\">// 打印一次，计数减一</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2020/12/21/C-关联容器/multimap或multiset中查找元素_note.png\">\n\n<h6 id=\"一种不同的，面向迭代器的解决办法\"><a href=\"#一种不同的，面向迭代器的解决办法\" class=\"headerlink\" title=\"一种不同的，面向迭代器的解决办法\"></a>一种不同的，面向迭代器的解决办法</h6><p>可以使用<code>lower_bound</code>和<code>upper_bound</code>来解决。</p>\n<ul>\n<li>关键字在容器中，<code>lower_bound</code>返回迭代器将指向第一个具有给定关键字的元素，<code>upper_bound</code>返回迭代器指向最后一个匹配关键字元素之后的位置</li>\n<li>关键字不在容器中，两者返回一个不影响排序的关键字插入位置</li>\n</ul>\n<p>因此，使用相同关键字调用<code>lower_bound</code>和<code>upper_bound</code>会得到关键字元素的范围。我们可以重写程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> beg = authors.lower_bound(search_item),</span><br><span class=\"line\">    end = authors.upper_bound(search_item);</span><br><span class=\"line\">    beg != end; ++ beg)</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; beg-&gt;second &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2020/12/21/C-关联容器/lower_bound和upper_bound_note.png\">\n\n<h6 id=\"equal-range函数\"><a href=\"#equal-range函数\" class=\"headerlink\" title=\"equal_range函数\"></a>equal_range函数</h6><p>此函数接受一个关键字，返回一个**迭代器<code>pair</code>**（不是<code>pair</code>对象）。若关键字存在，则第一个迭代器指向第一个与关键字匹配的元素，第二个迭代器指向最后一个匹配元素之后的位置。若未找到匹配元素，则两个迭代器都指向关键字可以插入的位置。再次修改程序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> pos = authors.equal_range(search_item);</span><br><span class=\"line\">\tpos.first != pos.second; ++pos.first)</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; pos.first-&gt;second &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"一个单词转换的map\"><a href=\"#一个单词转换的map\" class=\"headerlink\" title=\"一个单词转换的map\"></a>一个单词转换的map</h5><p>程序功能：给定一个<code>string</code>，将它转换为另一个<code>string</code>。我们需要根据单词转换文件将待转换的文本转换为我们想要的样子：</p>\n<p>单词转换文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">k okay?</span><br><span class=\"line\">y why</span><br><span class=\"line\">r are</span><br><span class=\"line\">u you</span><br><span class=\"line\">pic picture</span><br><span class=\"line\">thk thank!</span><br><span class=\"line\">l8r later</span><br></pre></td></tr></table></figure>\n\n<p>待转换文本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">where r u</span><br><span class=\"line\">y dont u send me a pic</span><br><span class=\"line\">k thk l8r</span><br></pre></td></tr></table></figure>\n\n<p>转换结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">where are you</span><br><span class=\"line\">why dont you send me a picture</span><br><span class=\"line\">okay? thanks! later</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"单词转换程序\"><a href=\"#单词转换程序\" class=\"headerlink\" title=\"单词转换程序\"></a>单词转换程序</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// map_file 转换规则</span></span><br><span class=\"line\"><span class=\"comment\">// input 待转换文本</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">word_transform</span><span class=\"params\">(ifstream &amp;map_file, ifstream &amp;input, ofstream &amp;output)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> trans_map = buildMap(map_file);</span><br><span class=\"line\">    <span class=\"built_in\">string</span> text; <span class=\"comment\">// 保存输入中的每一行</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(getline(input, text))&#123; <span class=\"comment\">// 读取每一行输入</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">istringstream</span> <span class=\"title\">stream</span><span class=\"params\">(text)</span></span>; <span class=\"comment\">// 读取每个单词</span></span><br><span class=\"line\">        <span class=\"built_in\">string</span> word;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> firstword = <span class=\"literal\">true</span>; <span class=\"comment\">// 控制是否打印空格</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(stream &gt;&gt; word)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(firstword)</span><br><span class=\"line\">                firstword = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                output &lt;&lt; <span class=\"string\">\" \"</span>; <span class=\"comment\">// 单词间打印一个空格</span></span><br><span class=\"line\">            output &lt;&lt; transform(word, trans_map); <span class=\"comment\">// 打印输出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        output &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 完成一行的转换</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"建立转换映射\"><a href=\"#建立转换映射\" class=\"headerlink\" title=\"建立转换映射\"></a>建立转换映射</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">map&lt;string, string&gt; buildMap(ifstream &amp; map_file)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; trans_map; <span class=\"comment\">// 保存转换规则</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> key; <span class=\"comment\">// 要转换的单词</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> value; <span class=\"comment\">// 替换后的内容</span></span><br><span class=\"line\">    <span class=\"comment\">// 读取第一个单词存入key，剩余存入value（包括标点）</span></span><br><span class=\"line\">    <span class=\"comment\">// map_file&gt;&gt;key流只读取第一个空格前string，剩下的流由getline读取到value中</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(map_file &gt;&gt; key &amp;&amp; getline(map_file, value))</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value.size() &gt; <span class=\"number\">1</span>) <span class=\"comment\">// 检查是否有转换规则</span></span><br><span class=\"line\">            trans_map[key] = value.substr(<span class=\"number\">1</span>); <span class=\"comment\">// 跳过前导空格，getline不会跳过前导空格</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> runtime_error(<span class=\"string\">\"no rule for \"</span> + key);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> trans_map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"生成转换文本\"><a href=\"#生成转换文本\" class=\"headerlink\" title=\"生成转换文本\"></a>生成转换文本</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; <span class=\"title\">transform</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s, <span class=\"keyword\">const</span> <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; &amp;m)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> map_it = m.find(s);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map_it != m.cend())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map_it-&gt;second; <span class=\"comment\">// 使用替换短语</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> s; <span class=\"comment\">// 否则返回原string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"无序容器\"><a href=\"#无序容器\" class=\"headerlink\" title=\"无序容器\"></a>无序容器</h4><p>新标准定义了<strong>4</strong>个<strong>无序关联容器</strong>，这些容器使用一个哈希函数和关键字类型的<code>==</code>运算符。</p>\n<h6 id=\"使用无序容器\"><a href=\"#使用无序容器\" class=\"headerlink\" title=\"使用无序容器\"></a>使用无序容器</h6><p>用于<code>map</code>和<code>set</code>的操作也能用于<code>unordered_map</code>和<code>unordered_set</code>，如<code>find、insert</code>等。无序容器也有允许重复关键字的版本。</p>\n<h6 id=\"管理桶\"><a href=\"#管理桶\" class=\"headerlink\" title=\"管理桶\"></a>管理桶</h6><p>无序容器在存储上组织为<strong>一组桶</strong>，每个桶保存零个或多个元素。<strong>无序容器使用一个哈希函数将元素映射到桶</strong>。</p>\n<ul>\n<li><p>为了访问一个元素，容器首先计算元素的哈希值，它指出应该搜索哪个桶。</p>\n</li>\n<li><p>容器将具有一个特定哈希值的所有元素都保存在相同的桶中。</p>\n</li>\n<li><p>如果容器允许重复关键字，所有具有相同关键字的元素也都会在同一个桶中。</p>\n</li>\n</ul>\n<p>因此，无序容器的性能依赖于<strong>哈希函数的质量</strong>和<strong>桶的数量和大小</strong>。</p>\n<p>对于相同的参数，哈希函数必须总是产生相同的结果。<strong>理想情况下，哈希函数将每个特定的值映射到唯一的桶</strong>。但是，<strong>将不同关键字的元素映射到相同的桶也是允许的</strong>。</p>\n<ul>\n<li>当一个桶保存多个元素时，需要顺序搜索这些元素来查找我们想要的那个。</li>\n<li>计算一个元素的哈希值和在桶中搜索通常都是很快的操作。</li>\n<li>如果一个桶中保存了很多元素，那么查找一个特定元素就需要大量比较操作。</li>\n</ul>\n<p>以下这些成员函数允许我们查询容器的状态以及在必要时强制容器进行重组。</p>\n<img src=\"/blog/2020/12/21/C-关联容器/无序容器管理操作.png\">\n\n<h6 id=\"无序容器对关键字类型的要求\"><a href=\"#无序容器对关键字类型的要求\" class=\"headerlink\" title=\"无序容器对关键字类型的要求\"></a>无序容器对关键字类型的要求</h6><p>默认情况下，无序容器使用关键字类型<code>==</code>运算符来比较元素，它们还使用一个<code>hash&lt;key_type&gt;</code>类型的对象来<strong>生成每个元素的哈希值</strong>。</p>\n<ul>\n<li>无序容器支持关键字是<strong>内置类型(包括指针类型)**、</strong><code>string</code><strong>或者</strong>智能指针**类型的无序容器。</li>\n<li>无序容器<strong>不能</strong>直接定义<strong>关键字类型为自定义类类型的无序容器</strong>。与容器不同，不能直接使用哈希模板，而必须提供我们自己的<code>hash</code>模板版本。</li>\n<li>不使用默认的<code>hash</code>，而是使用一种类似于<strong>为有序容器重载关键字类型</strong>的默认比较操作。</li>\n</ul>\n<p>为了能将<code>Sale_data</code>用作关键字，我们需要提供函数来替代<code>==</code>运算符和哈希值计算函数。我们从定义这些重载函数开始：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">hasher</span><span class=\"params\">(<span class=\"keyword\">const</span> Sales_data &amp;sd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hash&lt;<span class=\"built_in\">string</span>&gt;()(sd.isbn());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">eqOp</span><span class=\"params\">(<span class=\"keyword\">const</span> Sales_data &amp;lhs, <span class=\"keyword\">const</span> Sales_data &amp;rhs)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lhs.isbn() == rhs.isbn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>hasher</code>函数使用标准库<code>hash</code>类型对象计算<code>ISBN</code>成员的哈希值，该哈希值建立在<code>string</code>之上。</p>\n<p><code>eqOp</code>函数通过比较<code>ISBN</code>号来比较两个<code>Salas_data</code>。</p>\n<p>使用以上函数来定义一个<code>unordered_multiset</code>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> SD_multiset = <span class=\"built_in\">unordered_multiset</span>&lt;Sales_data, <span class=\"keyword\">decltype</span>(hasher)*, <span class=\"keyword\">decltype</span>(eqOp)*&gt;;</span><br><span class=\"line\"><span class=\"comment\">// 参数是桶大小、哈希函数指针和相等性判断运算符指针</span></span><br><span class=\"line\"><span class=\"function\">SD_miltiset <span class=\"title\">bookstore</span><span class=\"params\">(<span class=\"number\">42</span>, hasher, eqOp)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>此集合的哈希和相等性判断操作与<code>hasher</code>和<code>eqOp</code>函数有着相同的类型。在定义<code>bookstore</code>时可以将我们希望它使用的函数的指针传递给它。</p>\n<p>如果类定义了<code>==</code>运算符，则可以只重载哈希函数：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用FooHash生成哈希值；Foo必须有==运算符</span></span><br><span class=\"line\">unordered_set&lt;Foo, decltype(FooHash)*&gt; fooSet(10, FoolHash);</span><br></pre></td></tr></table></figure>\n\n","categories":["C++"]},{"title":"C++标准库-I/O库","url":"/blog/2020/11/21/C-%E6%A0%87%E5%87%86%E5%BA%93-I-O%E5%BA%93/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>I/O类</li>\n<li>文件输入输出</li>\n<li>string流</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"I-O类\"><a href=\"#I-O类\" class=\"headerlink\" title=\"I/O类\"></a>I/O类</h4><p><code>iostream</code>定义了用于读写流的基本类型。</p>\n<p><code>fstream</code>定义了用于读写命名文件的类型。</p>\n<p><code>sstream</code>定义了用于读写内存<code>string</code>对象的类型。</p>\n<img src=\"/blog/2020/11/21/C-标准库-I-O库/io类.png\" style=\"zoom:120%;\">\n\n<p><code>I/O</code>对象无拷贝或赋值，传递和引用不能是<code>const</code>的。</p>\n<h5 id=\"条件状态\"><a href=\"#条件状态\" class=\"headerlink\" title=\"条件状态\"></a>条件状态</h5><img src=\"/blog/2020/11/21/C-标准库-I-O库/条件状态.png\" style=\"zoom:120%;\">\n\n<p>上表是<code>I/O</code>类所定义的一些函数和标志，可以访问和操作流的<strong>条件状态</strong>。</p>\n<p>由于流可能处于错误状态，因此代码通常应该在使用一个流之前检查它是否处于良好状态。确定一个流对象的状态最简单的方法是将它当作一个条件使用：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; word)</span><br><span class=\"line\">\t<span class=\"comment\">// ok：读操作成功</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"刷新输出缓冲区\"><a href=\"#刷新输出缓冲区\" class=\"headerlink\" title=\"刷新输出缓冲区\"></a>刷新输出缓冲区</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"hi!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">// 输出hi和换行，然后刷新缓冲区</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"hi!\"</span> &lt;&lt; flush; <span class=\"comment\">// 输出hi后直接刷新缓冲区</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"hi!\"</span> &lt;&lt; ends;  <span class=\"comment\">// 输出hi和一个空字符再刷新缓冲区</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件输入输出\"><a href=\"#文件输入输出\" class=\"headerlink\" title=\"文件输入输出\"></a>文件输入输出</h4><p>头文件<code>fstream</code>定义了三个类型来支持文件IO：</p>\n<ol>\n<li><strong>ifstream</strong>从一个给定文件读取数据。</li>\n<li><strong>ofstream</strong>向一个给定文件写入数据。</li>\n<li><strong>fstream</strong>可以读写给定文件。</li>\n</ol>\n<img src=\"/blog/2020/11/21/C-标准库-I-O库/fstream.png\" style=\"zoom:120%;\">\n\n<h5 id=\"使用文件流对象\"><a href=\"#使用文件流对象\" class=\"headerlink\" title=\"使用文件流对象\"></a>使用文件流对象</h5><p>创建文件流对象时，可以提供文件名（可选）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(ifile)</span></span>; <span class=\"comment\">// 构造一个ifstream并打开给定文件</span></span><br><span class=\"line\">ofstream out; <span class=\"comment\">// 输出文件流未关联到任何文件</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"成员函数open和close\"><a href=\"#成员函数open和close\" class=\"headerlink\" title=\"成员函数open和close\"></a>成员函数open和close</h5><p>open用来判断文件是否打开成功，一旦打开成功，它就保持与对应文件的关联，对于一个已经打开的文件流调用open会失败，直到使用close关闭文件，成功关闭后可以打开新的文件。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(ifile)</span></span>;</span><br><span class=\"line\">in.close();</span><br><span class=\"line\">in.open(ifile + <span class=\"string\">\"2\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>当一个<code>fstream</code>对象离开其作用域时，与之关联的文件会自动关闭。</p>\n<h5 id=\"文件模式\"><a href=\"#文件模式\" class=\"headerlink\" title=\"文件模式\"></a>文件模式</h5><img src=\"/blog/2020/11/21/C-标准库-I-O库/文件模式.png\" style=\"zoom:120%;\">\n\n<p>指定文件模式有如下限制（部分）：</p>\n<ul>\n<li>只可以对<code>ofstream/fstream</code>对象设定out模式。</li>\n<li>只可以对<code>ifstream/fstream</code>对象设定in模式。</li>\n</ul>\n<p>在未指定文件模式时，与<code>ifstream</code>关联的文件默认以in模式打开；与<code>ofstream</code>关联的文件默认以out模式打开；与<code>fstream</code>关联的文件默认以in和out模式打开。</p>\n<p>默认情况下，<strong>以out模式打开文件会丢去已有数据</strong>。阻止一个<code>ofstream</code>清空给定文件内容的方法是同时指定app模式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在这几条语句中，file1都被截断</span></span><br><span class=\"line\"><span class=\"comment\">// 隐含以输出模式打开文件并截断文件</span></span><br><span class=\"line\"><span class=\"function\">ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">\"file1\"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 隐含地截断文件</span></span><br><span class=\"line\"><span class=\"function\">ofstream <span class=\"title\">out1</span><span class=\"params\">(<span class=\"string\">\"file1\"</span>, ofstream::out)</span></span>;</span><br><span class=\"line\"><span class=\"function\">ofstream <span class=\"title\">out2</span><span class=\"params\">(<span class=\"string\">\"flie2\"</span>, ofstream::out | ofstream::trunc)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 为了保留文本内容，必须显示指定app模式</span></span><br><span class=\"line\"><span class=\"comment\">// 隐含为输出模式</span></span><br><span class=\"line\"><span class=\"function\">ofstream <span class=\"title\">app</span><span class=\"params\">(<span class=\"string\">\"file1\"</span>, ofstream::app)</span></span>;</span><br><span class=\"line\"><span class=\"function\">ofstream <span class=\"title\">app1</span><span class=\"params\">(<span class=\"string\">\"file2\"</span>, ofstream::out | ofstream::app)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p><em>保留被<code>ofstream</code>打开地文件中已有数据地唯一方法是显示指定app或in模式（17.5.3节，676页）</em>。每次调用<code>open</code>时都会确定文件模式。</p>\n<h4 id=\"string流\"><a href=\"#string流\" class=\"headerlink\" title=\"string流\"></a>string流</h4><p><code>istringstream</code>从<code>string</code>中读取数据。</p>\n<p><code>ostringstream</code>向<code>string</code>中写入数据。</p>\n<p><code>stringstream</code>既可从<code>string</code>中读数据也可以向<code>string</code>中写数据。</p>\n<img src=\"/blog/2020/11/21/C-标准库-I-O库/stringstream.png\" style=\"zoom:120%;\">\n\n<h5 id=\"使用istringstream\"><a href=\"#使用istringstream\" class=\"headerlink\" title=\"使用istringstream\"></a>使用istringstream</h5><p>当我们的工作是对整行文本进行处理，而其他一些工作是处理行内的单个单词，通常可以用<code>istringstream</code>。</p>\n<p>假如一个文件，列出了一些人和他们所拥有的电话号码（一个或多个），输入文件可能如下：</p>\n<img src=\"/blog/2020/11/21/C-标准库-I-O库/输入文件.png\">\n\n<p>定义一个类描述输入数据：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PersonInfo</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; phones;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用程序读取数据文件如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> line, word; <span class=\"comment\">// 分别保存来自输入的一行和单词</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;PersonInfo&gt; people;</span><br><span class=\"line\"><span class=\"comment\">// 逐行从输入读取数据，直到cin遇到文件尾（或其他错误）</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(getline(<span class=\"built_in\">cin</span>, line))&#123;</span><br><span class=\"line\">\tPersonInfo info;</span><br><span class=\"line\">    <span class=\"comment\">// 将记录绑定到刚输入的行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">istringstream</span> <span class=\"title\">record</span><span class=\"params\">(line)</span></span>;</span><br><span class=\"line\">    record &gt;&gt; info.name;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(record &gt;&gt; word)</span><br><span class=\"line\">        info.phones.push_back(word);</span><br><span class=\"line\">    people.push_back(info);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用ostringstream\"><a href=\"#使用ostringstream\" class=\"headerlink\" title=\"使用ostringstream\"></a>使用ostringstream</h5><p>当我们逐步构造输出，最后一起进行打印时，可以使用ostringstream。对上一节的例子，逐个验证电话号码并将其格式化。将有效的号码输出到一个新文件中；对于无效的号码不输出到文件中，并打印一条包含人名和无效号码的错误信息。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp;entry : people)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">ostringstream</span> formatted, badNums;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp;nums : entry.phones)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果号码无效，将数的字符串写入badNums</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!valid(nums))&#123;</span><br><span class=\"line\">            badnums &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; nums;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 号码有效，将格式化的字符串写入formatted</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            formatted &lt;&lt; <span class=\"string\">\" \"</span> format(nums);</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 没有错误的数，打印名字和格式化的数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(badNums.str().empty())</span><br><span class=\"line\">        os &lt;&lt; entry.name &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; formatted.str() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 否则，打印名字和错误的数</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"input error:\"</span> &lt;&lt; entry.name  </span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">\"invalid number(s)\"</span> &lt;&lt; badNums.str() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设两个函数<code>valid</code>和<code>format</code>已知，分别完成电话号码的验证和格式化功能。</p>\n","categories":["C++"]},{"title":"C++动态数组","url":"/blog/2021/01/20/C-%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li><code>new</code> 和数组</li>\n<li><code>allocator</code> 类</li>\n<li>使用标准库：文本查询程序</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"new和数组\"><a href=\"#new和数组\" class=\"headerlink\" title=\"new和数组\"></a>new和数组</h4><p>使用 <code>new</code> 分配一个对象数组，在类型名后跟一对方括号，在其中指明要分配的对象的数目：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *pia = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[get_size()]; <span class=\"comment\">// pia指向第一个int</span></span><br><span class=\"line\"><span class=\"comment\">// 类型别名</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> arrT[<span class=\"number\">42</span>]; <span class=\"comment\">// arrT表示42个int的数组类型</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = <span class=\"keyword\">new</span> arrT; <span class=\"comment\">// 分配一个42个int的数组；p指向第一个int</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"分配一个数组会得到一个元素类型的指针\"><a href=\"#分配一个数组会得到一个元素类型的指针\" class=\"headerlink\" title=\"分配一个数组会得到一个元素类型的指针\"></a>分配一个数组会得到一个元素类型的指针</h5><p>分配的内存不是一个数组类型，因此不能对动态数组调用 <code>begin</code> 和 <code>end</code> ，也不能用范围 <code>for</code>。</p>\n<h5 id=\"初始化动态分配对象的数组\"><a href=\"#初始化动态分配对象的数组\" class=\"headerlink\" title=\"初始化动态分配对象的数组\"></a>初始化动态分配对象的数组</h5><p>动态数组中的元素可以进行值初始化：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *pi = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>]; <span class=\"comment\">// 未初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *pia = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>](); <span class=\"comment\">// 值初始化（0）</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> *ps = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[<span class=\"number\">10</span>]; <span class=\"comment\">// 10个空string</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> *psa = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[<span class=\"number\">10</span>](); <span class=\"comment\">// 同上</span></span><br></pre></td></tr></table></figure>\n\n<p>新标准下还可以用花括号列表进行初始化：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *pia = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>]&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 前四个用给定的初始化器初始化，剩余的进行值初始化</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> *pia = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[<span class=\"number\">10</span>]&#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"an\"</span>,<span class=\"string\">\"the\"</span>,<span class=\"built_in\">string</span>(<span class=\"number\">3</span>, <span class=\"string\">'x'</span>)&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>同时，动态分配一个空数组是合法的。</p>\n<h5 id=\"释放动态数组\"><a href=\"#释放动态数组\" class=\"headerlink\" title=\"释放动态数组\"></a>释放动态数组</h5><p>在指针前加上一个空方括号对：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> []pa; <span class=\"comment\">// pa必须指向一个动态分配的数组或为空</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"智能指针和动态数组\"><a href=\"#智能指针和动态数组\" class=\"headerlink\" title=\"智能指针和动态数组\"></a>智能指针和动态数组</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// up指向一个包含10个未初始化int的数组</span></span><br><span class=\"line\">unique_ptr&lt;int[]&gt; uo(new int[10]);</span><br><span class=\"line\">up.release(); <span class=\"comment\">// 自动用delete[]销毁其指针</span></span><br></pre></td></tr></table></figure>\n\n<p>当一个 <code>unique_ptr</code> 指向一个数组时，可以使用下标运算符来访问数组中的元素：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i != <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">\tup[i] = i; <span class=\"comment\">// 为每个元素赋予一个新值</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2021/01/20/C-动态数组/指向数组的unique_ptr.png\">\n\n<p><em>如果希望使用 <code>shared_ptr</code> 管理一个动态数组，必须提供自己定义的删除器。</em></p>\n<h4 id=\"allocator类\"><a href=\"#allocator类\" class=\"headerlink\" title=\"allocator类\"></a>allocator类</h4><p>标准库 <code>allocator</code> 类定义在 <code>memory</code> 中，它将内存分配和对象构造分离开来。当一个 <code>allocator</code> 对象分配内存时，它会根据给定的<strong>对象类型</strong>来确定恰当的内存大小和对齐位置：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">allocator&lt;<span class=\"built_in\">string</span>&gt; alloc; <span class=\"comment\">// 可以分配string的allocator对象</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> <span class=\"keyword\">const</span> p = alloc.allocate(n); <span class=\"comment\">// 分配n个未初始化的string</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2021/01/20/C-动态数组/标准库allocator类及其算法.png\">\n\n<h5 id=\"allocator-分配未构造的内存\"><a href=\"#allocator-分配未构造的内存\" class=\"headerlink\" title=\"allocator 分配未构造的内存\"></a>allocator 分配未构造的内存</h5><p><code>allocator</code> 分配的内存是未构造的，我们按需要在此内存中使用 <code>construct</code> 构造对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> q = p; <span class=\"comment\">// q指向最后构造的元素之后的位置</span></span><br><span class=\"line\">alloc.construct(q++); <span class=\"comment\">// *q为空字符串</span></span><br><span class=\"line\">alloc.construct(q++, <span class=\"number\">10</span>, <span class=\"string\">'c'</span>); <span class=\"comment\">// *q为cccccccccc</span></span><br><span class=\"line\">alloc.construct(q++, <span class=\"string\">\"hi\"</span>); <span class=\"comment\">// *q为hi</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2021/01/20/C-动态数组/alloc_warning.png\">\n\n<p>使用完对象后，必须对<strong>每个构造</strong>的元素调用 <code>destory</code> 来销毁它们。其接受一个指针，对指向的对象执行析构函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(q != p)</span><br><span class=\"line\">\talloc.destory(--q); <span class=\"comment\">// 第一次调用时，q指向最后一个构造的元素</span></span><br></pre></td></tr></table></figure>\n\n<p>元素被销毁后，可以将这部分内存来保存其他 <code>string</code>，也可将其归还给系统，使用 <code>deallocate</code> 完成：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">alloc.deallocate(p, n);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"拷贝和填充未初始化内存的算法\"><a href=\"#拷贝和填充未初始化内存的算法\" class=\"headerlink\" title=\"拷贝和填充未初始化内存的算法\"></a>拷贝和填充未初始化内存的算法</h5><p>标准库还定义了两个伴随算法，可以在未初始化内存中创建对象：</p>\n<img src=\"/blog/2021/01/20/C-动态数组/allocator算法.png\">\n\n<h4 id=\"使用标准库：文本查询程序\"><a href=\"#使用标准库：文本查询程序\" class=\"headerlink\" title=\"使用标准库：文本查询程序\"></a>使用标准库：文本查询程序</h4><p>在一个给定的文件中查询单词，结果是单词在文件中出现的次数及其所在行。如果一个单词一行中出现多次，只列出一次。行会按照升序输出。</p>\n<p>读入一个英文文本，在其中查询单词 <code>element</code> ，输出结果的前几行如下图：</p>\n<img src=\"/blog/2021/01/20/C-动态数组/example.png\">\n\n<h5 id=\"查询类TextQuery\"><a href=\"#查询类TextQuery\" class=\"headerlink\" title=\"查询类TextQuery\"></a>查询类TextQuery</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextQuery</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> line_no = <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;::size_type;</span><br><span class=\"line\">    TextQuery(ifstream&amp;);</span><br><span class=\"line\">    <span class=\"function\">QueryResult <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp;)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; file; <span class=\"comment\">// 输入文件，需要两个类共享</span></span><br><span class=\"line\">    <span class=\"comment\">// 每个单词到它所在的行号的集合的映射</span></span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">set</span>&lt;line_no&gt;&gt;&gt; wm;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">TextQuery::TextQuery(ifstream &amp;is): file(<span class=\"keyword\">new</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> text;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(getline(is, text))&#123; <span class=\"comment\">// 对文件中每一行</span></span><br><span class=\"line\">        file-&gt;push_back(text); <span class=\"comment\">// 保存此行文本</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = file-&gt;size() - <span class=\"number\">1</span>; <span class=\"comment\">// 当前行号</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">istringstream</span> <span class=\"title\">line</span><span class=\"params\">(text)</span></span>; <span class=\"comment\">// 将文本分解为单词</span></span><br><span class=\"line\">        <span class=\"built_in\">string</span> word;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(line &gt;&gt; word)&#123; <span class=\"comment\">// 对行中的每个单词</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果单词不在wm中，以之为下标在wm中添加一项</span></span><br><span class=\"line\">            <span class=\"comment\">// lines是一个引用，改变lines也会改变wm中的元素</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> &amp;lines = wm[word];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!lines) <span class=\"comment\">// 在我们第一次遇到这个单词时，此指针为空</span></span><br><span class=\"line\">                lines.reset(<span class=\"keyword\">new</span> <span class=\"built_in\">set</span>&lt;line_no&gt;); <span class=\"comment\">// 分配一个新的set</span></span><br><span class=\"line\">            lines-&gt;insert(n); <span class=\"comment\">// 将此行号插入set中</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">QueryResult <span class=\"title\">TextQuery::query</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;sought)</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果未找到sought，返回一个指向此set的指针</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">set</span>&lt;line_no&gt;&gt; <span class=\"title\">nodata</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"built_in\">set</span>&lt;line_no&gt;)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用find而不是下标运算符来查找单词，避免将单词添加到wm中</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> loc = wm.find(sought);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(loc == wm.end())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> QueryResult(sought, nodata, file); <span class=\"comment\">// 未找到</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> QueryResult(sought, loc-&gt;second, file);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查询结果类QueryResult\"><a href=\"#查询结果类QueryResult\" class=\"headerlink\" title=\"查询结果类QueryResult\"></a>查询结果类QueryResult</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">make_plural</span><span class=\"params\">(<span class=\"keyword\">size_t</span> ctr,<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;word, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;ending)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueryResult</span> &#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> ostream&amp; <span class=\"title\">print</span><span class=\"params\">(ostream&amp;, <span class=\"keyword\">const</span> QueryResult&amp;)</span></span>; <span class=\"comment\">// 友元函数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> line_no = <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;::size_type;</span><br><span class=\"line\">    QueryResult(<span class=\"built_in\">string</span> s, <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">set</span>&lt;line_no&gt;&gt; p, <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; f):</span><br><span class=\"line\">                sought(s), lines(p), file(f)&#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">string</span> sought; <span class=\"comment\">// 查询单词</span></span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">set</span>&lt;line_no&gt;&gt; lines; <span class=\"comment\">// 出现的行号</span></span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; file; <span class=\"comment\">// 输入文件</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">ostream &amp;<span class=\"title\">print</span><span class=\"params\">(ostream &amp;os, <span class=\"keyword\">const</span> QueryResult &amp;qr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果找到了单词，打印出现次数和所有出现的位置</span></span><br><span class=\"line\">    os &lt;&lt; qr.sought &lt;&lt; <span class=\"string\">\" occurs \"</span> &lt;&lt; qr.lines-&gt;size() &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">       &lt;&lt; make_plural(qr.lines-&gt;size(), <span class=\"string\">\"time\"</span>, <span class=\"string\">\"s\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 打印单词出现的每一行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> num : *qr.lines)</span><br><span class=\"line\">        <span class=\"comment\">// 行号从1开始</span></span><br><span class=\"line\">        os &lt;&lt; <span class=\"string\">\"\\t(lines \"</span> &lt;&lt; num + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">\") \"</span></span><br><span class=\"line\">           &lt;&lt; *(qr.file-&gt;begin() + num) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">make_plural</span><span class=\"params\">(<span class=\"keyword\">size_t</span> ctr, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;word, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;ending)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ctr == <span class=\"number\">1</span>) ? word : word + ending;<span class=\"comment\">//make_plural(wc, \"word \", \"s \")当输入中文本中</span></span><br><span class=\"line\">    <span class=\"comment\">//word数大于一是在word后加s，为words为word的复数！</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"主函数\"><a href=\"#主函数\" class=\"headerlink\" title=\"主函数\"></a>主函数</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">runQueries</span><span class=\"params\">(ifstream &amp;infile)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">ifstream <span class=\"title\">infile</span><span class=\"params\">(<span class=\"string\">\"test.txt\"</span>)</span></span>;</span><br><span class=\"line\">    runQueries(infile);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">runQueries</span><span class=\"params\">(ifstream &amp;infile)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">TextQuery <span class=\"title\">tq</span><span class=\"params\">(infile)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"输入要查询的单词，或按q退出：\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(<span class=\"built_in\">cin</span> &gt;&gt; s) || s == <span class=\"string\">\"q\"</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        print(<span class=\"built_in\">cout</span>, tq.query(s)) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"完整工程\"><a href=\"#完整工程\" class=\"headerlink\" title=\"完整工程\"></a>完整工程</h5><p><a href=\"https://gitee.com/settlezxy/learning-cpp.git\" target=\"_blank\" rel=\"noopener\">https://gitee.com/settlezxy/learning-cpp.git</a></p>\n","categories":["C++"],"tags":["动态数组"]},{"title":"C++泛型算法（一）","url":"/blog/2020/12/19/C-%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>概述</li>\n<li>初识泛型算法</li>\n<li>定制操作</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>大多数算法都定义在头文件<code>algorithm</code>中。标准库还在头文件<code>numeric</code>中定义了一组数值泛型算法。</p>\n<h5 id=\"算法永远不会执行容器的操作\"><a href=\"#算法永远不会执行容器的操作\" class=\"headerlink\" title=\"算法永远不会执行容器的操作\"></a>算法永远不会执行容器的操作</h5><p>泛型算法本身不会执行容器的操作，它们只会运行于迭代器之上，执行迭代器的操作。算法永远<strong>不会改变</strong>底层容器的大小。算法可能<strong>改变</strong>容器中保存的元素的值，也可能在容器内移动元素，但永远不会直接添加或删除元素。</p>\n<p>标准库定义了一类特殊的迭代器，称为插入器（inserter）。它们会在底层的容器上执行插入操作。当一个算法操作这样的一个迭代器时，迭代器可以完成向容器添加元素的效果，但算法自身<strong>不会</strong>做这样的操作。</p>\n<h4 id=\"初识泛型算法\"><a href=\"#初识泛型算法\" class=\"headerlink\" title=\"初识泛型算法\"></a>初识泛型算法</h4><p>标准库算法都对一个范围内的元素进行操作。此范围称为“输入范围”。输入范围使用两个参数：要处理的第一个元素和尾元素之后的位置的迭代器。</p>\n<h5 id=\"只读算法\"><a href=\"#只读算法\" class=\"headerlink\" title=\"只读算法\"></a>只读算法</h5><p>此类算法只会读取其输入范围内的元素，而从不改变元素。如<code>find</code>，<code>count</code>。定义在<code>numeric</code>中有只读算法<code>accumulate</code>，前两个指出需要求和的元素的范围，第三个参数是和的初值。最好用<code>cbegin()</code>和<code>cend()</code>，除非打算用返回的迭代器来改变元素的值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对vec中的元素求和，和的初值为0</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sum = accumulate(v.cbegin(), v.cend(), <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"算法和元素类型\"><a href=\"#算法和元素类型\" class=\"headerlink\" title=\"算法和元素类型\"></a>算法和元素类型</h6><p><code>accumulate</code>第三个参数为求和起点，包含了一个编程假定：将元素类型加到和的类型上的操作必须是可行的。即，序列中元素的类型必须和第三个参数匹配。由于<code>string</code>定义了<code>+</code>操作，所以可以将<code>vector</code>中的所有<code>string</code>连接起来：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> sum = accumulate(v.cbegin(), v.cend(), <span class=\"built_in\">string</span>(<span class=\"string\">\"\"</span>));</span><br></pre></td></tr></table></figure>\n\n<p>将空串当作一个字符串字面值传递给第三个参数是不可以的，会导致编译错误：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误：const char*上没有定义+运算符</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> sum = accumulate(v.cbegin(), v.cend(), <span class=\"string\">\"\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"操作两个序列的算法\"><a href=\"#操作两个序列的算法\" class=\"headerlink\" title=\"操作两个序列的算法\"></a>操作两个序列的算法</h6><p>只读算法<code>equal</code>用于确定两个序列是否保存相同的值。它将第一个序列中的每个元素和第二个序列中的对应元素逐个比较，如果都相等返回<code>true</code>，否则返回<code>false</code>。此算法接受三个迭代器：前两个表示第一个序列范围，第三个表示第二个序列的首元素：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// roster2中的元素数目应该至少于roster1一样多</span></span><br><span class=\"line\">equal(roster1.cbegin(), roster1.cend(), roster2.cbegin());</span><br></pre></td></tr></table></figure>\n\n<p><code>equal</code>基于假设：第二个序列至少与第一个序列一样长。</p>\n<p>*<strong>注意！！！**</strong>那些只接受一个单一迭代器来表示第二个序列的算法，都假定第二个序列至少与第一个序列一样长。*</p>\n<h5 id=\"写容器元素的算法\"><a href=\"#写容器元素的算法\" class=\"headerlink\" title=\"写容器元素的算法\"></a>写容器元素的算法</h5><p>一些算法将新值赋予序列中的元素，需要确保序列原大小至少不小于要求算法写入的元素数目。例如<code>fill</code>接受一对迭代器表示一个范围，还接受一个值作为第三个参数，将范围内的值置为第三个参数的值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">fill(vec.begin(), vec.end(), <span class=\"number\">0</span>); <span class=\"comment\">// 将每个元素重置为0</span></span><br><span class=\"line\"><span class=\"comment\">// 将容器的一个子序列设置为10</span></span><br><span class=\"line\">fill(vec.begin(), vec.begin() + vec.size() / <span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"算法不检查写操作\"><a href=\"#算法不检查写操作\" class=\"headerlink\" title=\"算法不检查写操作\"></a>算法不检查写操作</h6><p>一些算法接受一个迭代器来指出一个单独的目的位置，从目的位置开始，将新值赋予一个序列中的元素。例如<code>fill_n</code>接受一个单迭代器、一个计数值和一个值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">fill_n(dest, n, val);</span><br></pre></td></tr></table></figure>\n\n<p><code>fill_n</code>假定<code>dest</code>指向一个元素，从<code>dest</code>开始的序列至少包含n个元素。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec; <span class=\"comment\">// 空vector</span></span><br><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\">fill_n(vec.begin(), vec.size(); <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 错误,vec并没有10个元素</span></span><br><span class=\"line\">fill_n(vec.begin(), <span class=\"number\">10</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"介绍back-inserter\"><a href=\"#介绍back-inserter\" class=\"headerlink\" title=\"介绍back_inserter\"></a>介绍back_inserter</h6><p><code>back_inserter</code>定义在头文件<code>iterator</code>中，其接受一个指向容器的引用，返回一个与该容器绑定的插入迭代器。通过此迭代器赋值时，赋值运算符会调用<code>push_back</code>将一个具有给定值的元素添加到容器中：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> it = back_inserter(vec);</span><br><span class=\"line\">*it = <span class=\"number\">42</span>;</span><br></pre></td></tr></table></figure>\n\n<p>常常使用<code>back_inserter</code>创建一个迭代器，作为算法的目的位置来使用。例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">fill_n(back_inserter(vec), <span class=\"number\">10</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"拷贝算法\"><a href=\"#拷贝算法\" class=\"headerlink\" title=\"拷贝算法\"></a>拷贝算法</h6><p>此算法接受三个迭代器，前两个表示一个输入范围，第三个表示目的序列的起始位置。算法将输入范围中的元素拷贝到目的序列中。<strong>传递给<code>copy</code>的目的序列至少要包含与输入序列一样多的元素</strong>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a1[] = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a2[<span class=\"keyword\">sizeof</span>(a1) / <span class=\"keyword\">sizeof</span>(*a1)];</span><br><span class=\"line\"><span class=\"keyword\">auto</span> ret = copy(begin(a1), end(a1), a2);</span><br></pre></td></tr></table></figure>\n\n<p><code>copy</code>返回其目的位置迭代器（递增后）的值，即<code>ret</code>恰好指向拷贝到<code>a2</code>的尾元素之后的位置。</p>\n<p>多个算法都提供所谓的“拷贝”版本。这些算法计算新元素的值，但不会将它们放在输入序列的末尾，而是创建一个新序列保存这些结果。</p>\n<p>如<code>replace</code>，其读入一个序列，并将其中所有等于给定值元素都改为另一个值，此算法接受4个参数：前两个是迭代器，表示输入序列，后两个一个是要搜索的值，另一个是新值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将所有值为0的元素改为42</span></span><br><span class=\"line\">replace(ilist.begin(), ilist.end(), <span class=\"number\">0</span>, <span class=\"number\">42</span>);</span><br></pre></td></tr></table></figure>\n\n<p>对于它的“拷贝”版本<code>replace_copy</code>，此算法接受额外第三个迭代器参数，指出点整后序列的保存位置：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用back_inserter按需要增长目标序列</span></span><br><span class=\"line\">replace_copy(ilist.cbegin(), ilist.cend(),</span><br><span class=\"line\">             back_inserter(ivec), <span class=\"number\">0</span>, <span class=\"number\">42</span>);</span><br></pre></td></tr></table></figure>\n\n<p>经过此调用，<code>ilist</code>并未改变，<code>ivec</code>包含<code>ilist</code>的一份拷贝，不过原来在<code>ilist</code>中值为0的元素在<code>ivec</code>中都变为42。</p>\n<h5 id=\"重排容器元素的算法\"><a href=\"#重排容器元素的算法\" class=\"headerlink\" title=\"重排容器元素的算法\"></a>重排容器元素的算法</h5><p>假定已经有一个<code>vector</code>，保存了多个故事的文本，简化这个<code>vector</code>，使得每个单词只出现一次。输入如下：</p>\n<img src=\"/blog/2020/12/19/C-泛型算法（一）/重排_输入.png\" style=\"zoom:80%;\">\n\n<p>要求得到的结果如下：</p>\n<img src=\"/blog/2020/12/19/C-泛型算法（一）/重排_输出.png\">\n\n<p>为了消除重复单词，先对<code>vector</code>排序，使得重复的单词相邻出现，之后可以使用另一个称为<code>unique</code>的标准库算法来重排<code>vector</code>，使得不重复的元素出现在<code>vector</code>的开始部分。由于算法不能执行容器的操作，可以使用<code>vector</code>的成员<code>erase</code>来完成真正的删除操作：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">elimDups</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;words)</span></span>&#123;</span><br><span class=\"line\">\tsort(words.begin(), words.end());</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">end_unique</span><span class=\"params\">(words.begin(), words.end())</span></span>;</span><br><span class=\"line\">    words.erase(end_unique, words.end());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>words</code>排序完毕后，使用<code>unique</code>算法重排输入序列，将相邻的重复项”消除“，并<strong>返回一个指向最后一个不重复元素之后的位置的迭代器</strong>。调用<code>unique</code>后，<code>vector</code>将变为：</p>\n<img src=\"/blog/2020/12/19/C-泛型算法（一）/after_unique.png\">\n\n<p>如上图所示，<code>unique</code>并不真的删除任何元素，它只是覆盖相邻的重复元素，使得不重复元素出现在序列的开始部分。<code>unique</code>返回的迭代器位置之后的元素依旧存在，但不知道是什么。</p>\n<p><strong>标准库算法对迭代器而不是容器进行操作。因此，算法不能（直接）添加或删除元。素</strong></p>\n<p>最后，使用<code>erase</code>删除从<code>end_unique</code>开始至<code>words</code>末尾的范围内的所有元素。即使<code>words</code>中没有重复单词，调用<code>erase</code>也是安全的，删除空的范围没什么不良后果。</p>\n<h4 id=\"定制操作\"><a href=\"#定制操作\" class=\"headerlink\" title=\"定制操作\"></a>定制操作</h4><p>详见<a href=\"http://www.xingyuzhao.ltd/blog/2020/08/02/C-11%E4%B9%8Blambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/\">C++11之lambda表达式</a>。</p>\n","categories":["C++"]},{"title":"C++类的一些知识点","url":"/blog/2020/10/18/C-%E7%B1%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/","content":"<p>《C++ Primer》第七章内容——类</p>\n<p><strong>部分总结</strong></p>\n<a id=\"more\"></a>\n\n<h4 id=\"第七章：类\"><a href=\"#第七章：类\" class=\"headerlink\" title=\"第七章：类\"></a>第七章：类</h4><ol>\n<li><h5 id=\"友元\"><a href=\"#友元\" class=\"headerlink\" title=\"友元\"></a>友元</h5></li>\n</ol>\n<ul>\n<li><p>类可以允许其他类或者函数访问它的非共有成员，方法是令其他类或者函数（可以是成员函数也可以是非成员函数）成为它的友元。一般来说，在类的开始或者结束前位置集中声明友元。如果希望类的用户能够调用某个友元函数，那么就需要在类中友元声明之外再进行一次声明。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sales_data</span>&#123;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">friend</span> Sales_data <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">const</span> Sale_data&amp;, <span class=\"keyword\">const</span> Sale_data&amp;)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    /.../</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    /.../</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 非成员函数声明</span></span><br><span class=\"line\"><span class=\"function\">Sales_data <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">const</span> Sale_data&amp;, <span class=\"keyword\">const</span> Sale_data&amp;)</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果一个类指定了友元类，则友元类的成员函数可以访问此类包括非公有成员在内的所有成员。友元的关系不具有传递性。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Screen</span>&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// Window_mgr的成员可以访问Screen类的私有部分</span></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Window_mgr</span>;</span></span><br><span class=\"line\">    /.../</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 也可以只为某个成员函数提供访问权限</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Screen</span>&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// Window_mgr::clear必须再Screen类之前声明</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">void</span> <span class=\"title\">Window_mgr::clear</span><span class=\"params\">(ScreenIndex)</span></span>;</span><br><span class=\"line\">    /.../</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>构造函数</strong></li>\n</ol>\n<ul>\n<li><p>使用构造函数初始值列表来初始化成员。</p>\n</li>\n<li><p>如果成员是引用或者const时，必须通过函数初始值列标将其初始化：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConstRef</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tConstRef(<span class=\"keyword\">int</span> ii);</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> ci;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> &amp;ri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ConstRef::ConstRef(<span class=\"keyword\">int</span> ii): i(ii), ci(ii), ri(ii);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>类的静态成员</strong></li>\n</ol>\n<ul>\n<li><p>适用于类的成员直接与类相关，而不是与类的各个对象关联，比如说：银行的利率</p>\n</li>\n<li><p>静态成员可以是public或者private，使用关键字static，成员函数不用通过作用域运算符就能直接使用静态成员。静态成员不是由类的构造函数初始化的，一般在类的外部定义和初始化每个静态成员，只能定义一次：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calculate</span><span class=\"params\">()</span> </span>&#123; amount += amount * interestRate; &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">rate</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> interestRate; &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">rate</span><span class=\"params\">(<span class=\"keyword\">double</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">string</span> owner;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> amount;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> interestRate;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">initRate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1.0</span>;</span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Account::rate</span><span class=\"params\">(<span class=\"keyword\">double</span> newRate)</span></span>&#123;</span><br><span class=\"line\">    interestRate = newRate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义并初始化一个静态成员</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> Account::interestRate = initRate();</span><br><span class=\"line\"><span class=\"comment\">// test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Account c1;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> r;</span><br><span class=\"line\">    r = c1.rate();</span><br><span class=\"line\">    <span class=\"comment\">// 输出1</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; r &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Account::rate(<span class=\"number\">0.8</span>);</span><br><span class=\"line\">    r = c1.rate();</span><br><span class=\"line\">    <span class=\"comment\">// 输出0.8</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; r &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","categories":["C++"],"tags":["Class"]},{"title":"C++泛型算法（二）","url":"/blog/2020/12/19/C-%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>再探迭代器</li>\n<li>泛型算法结构</li>\n<li>特定容器算法</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"再探迭代器\"><a href=\"#再探迭代器\" class=\"headerlink\" title=\"再探迭代器\"></a>再探迭代器</h4><p>标准库在头文件<code>iterator</code>中还定义了额外集中迭代器。包括：</p>\n<ul>\n<li><strong>插入迭代器（insert iterator）</strong>：这些迭代器被绑定在一个容器上，可用来向容器插入元素。</li>\n<li><strong>流迭代器（stream iterator）</strong>：这些迭代器被绑定到输入或输出流上，可用来遍历所关联的IO流。</li>\n<li><strong>反向迭代器（reverse iterator）</strong>：这些迭代器向前而不是向后移动（<strong>书上写的是向后而不是向前，疑问？</strong>），除了<code>forward_list</code>之外的标准库容器都有反向迭代器。</li>\n<li><strong>移动迭代器（move iterator）</strong>：这些专用的迭代器不是拷贝其中的元素，而是移动它们。后面会提到。</li>\n</ul>\n<h5 id=\"插入迭代器\"><a href=\"#插入迭代器\" class=\"headerlink\" title=\"插入迭代器\"></a>插入迭代器</h5><p>插入迭代器是一种迭代器适配器，它接受一个容器，生成一个迭代器，能实现向给定容器添加元素。</p>\n<p>插入器有三种类型，差异在于元素插入的位置：</p>\n<ul>\n<li><strong>back_inserter</strong>：创建一个使用<code>push_back</code>的迭代器。</li>\n<li><strong>front_inserter</strong>：创建一个使用<code>push_front</code>的迭代器。</li>\n<li><strong>inserter</strong>创建一个使用<code>insert</code>的迭代器。此函数接受第二个参数，这个参数必须是一个指向给定容器的迭代器。<strong>元素将被插入到给定得到所表示的元素之前</strong>。</li>\n</ul>\n<img src=\"/blog/2020/12/19/C-泛型算法（二）/插入迭代器_note.png\">\n\n<p>当调用<code>inserter(c, iter)</code>时，会得到一个迭代器，接下来使用它时，会将元素插入到<code>iter</code>原来所指向的元素之前的位置。即，如果<code>it</code>是由<code>iterator</code>生成的迭代器，则下面两段代码效果一样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">*it = val;</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\">it = c.insert(it, val); <span class=\"comment\">// it指向新加入的元素</span></span><br><span class=\"line\">++it; <span class=\"comment\">// 递增it使它指向原来的元素</span></span><br></pre></td></tr></table></figure>\n\n<p><code>front_inserter</code>生成的迭代器的行为于<code>inserter</code>生成的迭代器完全不一样。当我们使用<code>front_inserter</code>时，元素总是插入到容器第一个元素之前。即使我们传递给<code>inserter</code>的位置原来是指向第一个元素的，只要我们在此元素之前插入一个新元素，此元素就不再是容器的首元素了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; lst&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; lst2, lst3; <span class=\"comment\">// 空list</span></span><br><span class=\"line\"><span class=\"comment\">// 拷贝完成后，lst2包含4 3 2 1</span></span><br><span class=\"line\">copy(lst.begin(), lst.end(), front_inserter(lst2));</span><br><span class=\"line\"><span class=\"comment\">// 拷贝完成后，lst3包含1 2 3 4</span></span><br><span class=\"line\">copy(lst.begin(), lst.end(), inserter(lst3, lsr3.begin());</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"iostream迭代器\"><a href=\"#iostream迭代器\" class=\"headerlink\" title=\"iostream迭代器\"></a>iostream迭代器</h5><p>虽然<code>iostream</code>不是迭代器，但标准库定义了一个可以用于这些IO类型对象的迭代器。<strong>iostream_iterator</strong>读入输入流，<strong>ostream_iterator</strong>向一个输出流写数据。这些迭代器将它们对应的流当作一个特定的元素序列来处理。通过使用流迭代器，我们可以用泛型算法从流对象读取数据以及向其写入数据。</p>\n<h6 id=\"istream-iterator操作\"><a href=\"#istream-iterator操作\" class=\"headerlink\" title=\"istream_iterator操作\"></a>istream_iterator操作</h6><p>当创建一个流迭代器时，必须指定将要读写的对象类型。一个<code>istream_iterator</code>使用<code>&gt;&gt;</code>来读取流。因此，<code>istream_iterator</code>要读取的类型必须定义了输入运算符。当创建一个<code>istream_iterator</code>时，我们可以将它绑定到一个流。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">istream_iterator&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">int_it</span><span class=\"params\">(<span class=\"built_in\">cin</span>)</span></span>; <span class=\"comment\">// 从cin读取int</span></span><br><span class=\"line\">istream_iterator&lt;<span class=\"keyword\">int</span>&gt; int_eof; <span class=\"comment\">// 尾后迭代器</span></span><br><span class=\"line\"><span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"afile\"</span>)</span></span>;</span><br><span class=\"line\">istream_iterator&lt;<span class=\"built_in\">string</span>&gt; str_it; <span class=\"comment\">// 从\"afile\"读取字符串</span></span><br></pre></td></tr></table></figure>\n\n<p>下面是一个用<code>istream_iterator</code>从标准输入读取数据，存入一个<code>vector</code>的例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">istream_iterator&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">in_iter</span><span class=\"params\">(<span class=\"built_in\">cin</span>)</span></span>; <span class=\"comment\">// 从cin读取int</span></span><br><span class=\"line\">istream_iterator&lt;<span class=\"keyword\">int</span>&gt; eof; <span class=\"comment\">// istream尾后迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(in_iter != eof)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 后置递增运算读取流，返回迭代器的旧值</span></span><br><span class=\"line\">    <span class=\"comment\">// 解引用迭代器，获得从流读取的前一个值</span></span><br><span class=\"line\">    vec.push_back(*in_iter++);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>eof</code>被定义为空的<code>istream_iterator</code>，从而可以当作尾后迭代器来使用。对于一个绑定到流的迭代器，一旦其关联的流遇到文件尾或IO错误，迭代器的值就与尾后迭代器相等。</p>\n<p>上述程序可以改写如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">istream_iterator&lt;int&gt; in_iter(cin), eof; // 从cin读取int</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">vec</span><span class=\"params\">(in_iter, eof)</span></span>; <span class=\"comment\">// 从迭代器范围构造vec</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2020/12/19/C-泛型算法（二）/istream_iterator操作.png\" style=\"zoom: 80%;\">\n\n<h6 id=\"使用算法操作流迭代器\"><a href=\"#使用算法操作流迭代器\" class=\"headerlink\" title=\"使用算法操作流迭代器\"></a>使用算法操作流迭代器</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">istream_iterator&lt;int&gt; in(cin), eof;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; accumulate(in, eof, <span class=\"number\">0</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n\n<p>此调用会计算出从标准输入读取的值的和。</p>\n<h6 id=\"istream-iterator允许使用懒惰求值\"><a href=\"#istream-iterator允许使用懒惰求值\" class=\"headerlink\" title=\"istream_iterator允许使用懒惰求值\"></a>istream_iterator允许使用懒惰求值</h6><p>当我们将一个<code>istream_iterator</code>绑定到一个流时，标准库并不保证迭代器立即从流读取数据。可以推迟从流中读取数据，直到我们使用迭代器时才真正读取。</p>\n<h6 id=\"ostream-iterator操作\"><a href=\"#ostream-iterator操作\" class=\"headerlink\" title=\"ostream_iterator操作\"></a>ostream_iterator操作</h6><p>我们可以对具有输出运算符<code>&lt;&lt;</code>的类型定义<code>ostream_iterator</code>。创建一个<code>ostream_iterator</code>时，可选第二个参数，它是一个<strong>C</strong>风格字符串（<strong>即，一个字符串字面常量或者一个指向以空字符结尾的字符数组的指针）</strong>。在输出的每个元素之后都会打印此字符串。并且必须将<code>ostream_iterator</code>绑定到一个指定的流，不允许空的或表示尾后位置的<code>ostream_iterator</code>。</p>\n<img src=\"/blog/2020/12/19/C-泛型算法（二）/ostream_iterator操作.png\" style=\"zoom:80%;\">\n\n<p>我们可以用<code>ostream_iterator</code>来输出值的序列：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ostream_iterator&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">out_iter</span><span class=\"params\">(<span class=\"built_in\">cout</span>, <span class=\"string\">\" \"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> e : vec)</span><br><span class=\"line\">\t*out_iter++ = e; <span class=\"comment\">// 赋值语句实际上将元素写到cout</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"comment\">// 下面的也行，但不推荐</span></span><br><span class=\"line\"><span class=\"function\">ostream_iterator&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">out_iter</span><span class=\"params\">(<span class=\"built_in\">cout</span>, <span class=\"string\">\" \"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> e : vec)</span><br><span class=\"line\">\tout_iter = e; <span class=\"comment\">// 赋值语句将元素写到cout</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n\n<p>运算符<code>*</code>和<code>++</code>不对<code>ostream_iterator</code>对象做任何操作。第一种写法流迭代器的使用与其他迭代器的使用保持一致。</p>\n<p>可以通过<code>copy</code>来打印<code>vec</code>中的元素，更简单：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">copy(vec.begin(), vec.end(), out_iter);</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"使用流迭代器处理类类型\"><a href=\"#使用流迭代器处理类类型\" class=\"headerlink\" title=\"使用流迭代器处理类类型\"></a>使用流迭代器处理类类型</h6><p>对于之前的<code>Sales_item</code>既有输入运算符也有输出运算符，可以使用IO迭代器重写书店程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原始程序</span></span><br><span class=\"line\">Sales_item total; <span class=\"comment\">// 保存下一条交易记录的变量</span></span><br><span class=\"line\"><span class=\"comment\">// 读入第一条交易记录，并确保有数据可以处理</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">cin</span> &gt;&gt; total)&#123;</span><br><span class=\"line\">    Sales_item trans; <span class=\"comment\">// 保存和的变量</span></span><br><span class=\"line\">    <span class=\"comment\">// 读入并处理剩余交易记录</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; trans)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果我们仍在处理相同的书</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(total.isbn() == trans.isbn())</span><br><span class=\"line\">            totao += trans; <span class=\"comment\">// 更新销售总额</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 打印前一本书的结果</span></span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; total &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            total = trans; <span class=\"comment\">// total现在表示下一本书的销售额</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; total &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用IO迭代器重写</span></span><br><span class=\"line\">istream_iterator&lt;Sales_item&gt; item_iter(cin), eof;</span><br><span class=\"line\"><span class=\"function\">ostream_iterator&lt;Sales_item&gt; <span class=\"title\">out_iter</span><span class=\"params\">(<span class=\"built_in\">cout</span>, <span class=\"string\">\"\\n\"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 将第一笔交易记录存在sum中，并读取下一条记录</span></span><br><span class=\"line\">Sales_item sum = *item_iter++;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(item_iter != eof)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前交易记录（存在item_iter中）有相同的ISBN号</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(item_iter-&gt;isbn() == sum.isbn())</span><br><span class=\"line\">        sum += *item_iter++;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        out_iter = sum;</span><br><span class=\"line\">        sum = *item_iter++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">out_iter = sum;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"反向迭代器\"><a href=\"#反向迭代器\" class=\"headerlink\" title=\"反向迭代器\"></a>反向迭代器</h5><p>顾名思义，反向迭代器就是在容器中从尾元素向首元素反向移动的迭代器。对于反向迭代器，递增和递减含义会颠倒过来。递增一个反向迭代器（<code>++it</code>）会移动到前一个元素；递减一个反向迭代器（<code>--it</code>）会移动到后一个元素。反向迭代器也有<code>const</code>和非<code>const</code>版本。</p>\n<img src=\"/blog/2020/12/19/C-泛型算法（二）/反向迭代器.png\" style=\"zoom:80%;\">\n\n<p>下面是一个例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> r_iter = vec.crbegin(); r_iter != vec.crend(); ++r_iter)</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; *r_iter &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"comment\">// 打印6，5，4，3，2，1</span></span><br></pre></td></tr></table></figure>\n\n<p>可以通过向<code>sort</code>传递一对反向迭代器来将<code>vector</code>整理为递减：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">sort(vec.begin(), vec.end()); <span class=\"comment\">// 递增</span></span><br><span class=\"line\">sort(vec.rbegin(), vec.rend()); <span class=\"comment\">// 递减</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"反向迭代器和其他迭代器间的关系\"><a href=\"#反向迭代器和其他迭代器间的关系\" class=\"headerlink\" title=\"反向迭代器和其他迭代器间的关系\"></a>反向迭代器和其他迭代器间的关系</h6><p>假定有一个名为<code>line</code>的<code>string</code>，保存着以逗号分隔的单词列表，我们希望打印<code>line</code>中的第一个单词，可以使用<code>find</code>完成：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> comma = find(line.cbegin(), line.cend(), <span class=\"string\">','</span>);</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">string</span>(line.cbegin(), comma) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果<code>line</code>中有逗号，那么<code>comma</code>将指向这个逗号，否则它指向<code>line.cend()</code>。如果希望打印最后一个单词：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> rcomma = find(line.crbegin(), line.crend(), <span class=\"string\">','</span>);</span><br></pre></td></tr></table></figure>\n\n<p>当我们试图打印找到的单词时，不能用以下代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误，对于FIRST,MIDDLE,LAST会打印出TSAL</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">string</span>(line.crbegin(), rcomma) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n\n<p>需要做的是，将<code>rcomma</code>转换为一个普通迭代器，能在<code>line</code>中正向移动。可以调用<code>reverse_iterator</code>中的<code>base</code>成员来完成这一转换，此成员函数会返回其对应的普通迭代器：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">string</span>(rcomma.base(), line.cend()) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2020/12/19/C-泛型算法（二）/反向迭代器_使用base.png\" style=\"zoom:80%;\">\n\n<p>需要注意的是：</p>\n<img src=\"/blog/2020/12/19/C-泛型算法（二）/反向迭代器_note.png\" style=\"zoom: 80%;\">\n\n<h4 id=\"泛型算法结构\"><a href=\"#泛型算法结构\" class=\"headerlink\" title=\"泛型算法结构\"></a>泛型算法结构</h4><p>算法所要求的迭代器操作可以分为5个迭代器类别：</p>\n<img src=\"/blog/2020/12/19/C-泛型算法（二）/迭代器类别.png\" style=\"zoom:80%;\">\n\n<h5 id=\"5类迭代器\"><a href=\"#5类迭代器\" class=\"headerlink\" title=\"5类迭代器\"></a>5类迭代器</h5><p>对每个迭代器参数来说，其能力必须与规定的最小类别至少相当。向算法传递一个能力更差的迭代器会产生错误。<strong>而这种错误很多编译器不会给出任何警告和提示</strong>。</p>\n<h6 id=\"输入迭代器（input-iterator）\"><a href=\"#输入迭代器（input-iterator）\" class=\"headerlink\" title=\"输入迭代器（input iterator）\"></a>输入迭代器（input iterator）</h6><p>可以读取序列中的元素。一个输入迭代器必须支持：</p>\n<ul>\n<li>用于比较两个迭代器的相等和不相等运算符（<code>==、!=</code>）</li>\n<li>用于推进迭代器的前置和后置递增运算（<code>++</code>）</li>\n<li>用于读取元素的解引用运算符（<code>*</code>）；解引用只会出现在赋值运算符的右侧</li>\n<li>箭头运算符（<code>-&gt;</code>），等价于<code>(*it).member</code>，即，解引用迭代器，并提取对象的成员</li>\n</ul>\n<p>输入迭代器只用于顺序访问，只能用于单边扫描算法。算法<code>find</code>和<code>accumulate</code>要求输入迭代器；而<code>istream_iterator</code>是一种输入迭代器。</p>\n<h6 id=\"输出迭代器（output-iterator）\"><a href=\"#输出迭代器（output-iterator）\" class=\"headerlink\" title=\"输出迭代器（output iterator）\"></a>输出迭代器（output iterator）</h6><p>可以看作输入迭代器功能上的补集——只写而不读元素。输出迭代器必须支持：</p>\n<ul>\n<li>用于推进迭代器的前置和后置递增运算（<code>++</code>）</li>\n<li>解引用运算符（<code>*</code>），只出现在赋值运算符的左侧</li>\n</ul>\n<p>例如，<code>copy</code>函数的第三个参数就是输出迭代器；<code>ostream_iterator</code>是一种输出迭代器。</p>\n<h6 id=\"前向迭代器（forward-iterator）\"><a href=\"#前向迭代器（forward-iterator）\" class=\"headerlink\" title=\"前向迭代器（forward iterator）\"></a>前向迭代器（forward iterator）</h6><p>可以读写元素。这类迭代器只能在序列中沿一个方向移动。前向迭代器支持所有输入和输出迭代器的操作，而且可以多次读写同一个元素。因此，我们可以保存前向迭代器的状态，使用前向迭代器的算法可以对序列进行多遍扫描。算法<code>replace</code>要求前向迭代器， <code>forward_list</code>上的迭代器是前向迭代器。</p>\n<h6 id=\"双向迭代器（bidirectional-iterator）\"><a href=\"#双向迭代器（bidirectional-iterator）\" class=\"headerlink\" title=\"双向迭代器（bidirectional iterator）\"></a>双向迭代器（bidirectional iterator）</h6><p>可以正向/反向读写序列中的元素。除了支持所有前向迭代器的操作之外，双向迭代器还支持前置和后置递减运算符（<code>--</code>）。算法<code>reverse</code>要求双向迭代器，除了<code>forward_list</code>之外，其他标准库都提供符合双向迭代器要求的迭代器.</p>\n<h6 id=\"随机访问迭代器（random-access-iterator）\"><a href=\"#随机访问迭代器（random-access-iterator）\" class=\"headerlink\" title=\"随机访问迭代器（random-access iterator）\"></a>随机访问迭代器（random-access iterator）</h6><p>提供在常量时间内访问序列中任意元素的能力。此类迭代器支持双向迭代器的所有功能，还支持以下操作：</p>\n<ul>\n<li>用于比较两个迭代器相对位置的关系运算符（<code>&lt;、&lt;=、&gt;</code>和<code>&gt;=</code>) </li>\n<li>迭代器和一个整数值的加减运算（<code>+、+=、-</code>和<code>-=</code>），计算结果是迭代器在序列中前进（或后退）给定整数个元素后的位置</li>\n<li>用于两个迭代器上的减法运算符（<code>-</code>），得到两个迭代器的距离</li>\n<li>下标运算符<code>iter[n]</code>，与<code>*(iter[n])</code>等价</li>\n</ul>\n<p>算法<code>sort</code>要求随机访问迭代器。<code>array、deque、string、vector</code>的迭代器都是随机访问迭代器，用于访问内置数组元素的指针也是。</p>\n<h5 id=\"算法形参模式\"><a href=\"#算法形参模式\" class=\"headerlink\" title=\"算法形参模式\"></a>算法形参模式</h5><p>大多数算法具有如下4种形式之一：</p>\n<ul>\n<li><strong><em>alg</em></strong> ( beg, end, <strong><em>other args</em></strong>)</li>\n<li><strong><em>alg</em></strong> ( beg, end, dest, <strong><em>other args</em></strong>)</li>\n<li><strong><em>alg</em></strong> ( beg, end, beg2, <strong><em>other args</em></strong>)</li>\n<li><strong><em>alg</em></strong> ( beg, end, be2, end2, <strong><em>other args</em></strong>)</li>\n</ul>\n<h5 id=\"算法命名规范\"><a href=\"#算法命名规范\" class=\"headerlink\" title=\"算法命名规范\"></a>算法命名规范</h5><p>如何提供一个操作代替默认的<code>&lt;</code>或<code>==</code>运算符，以及算法是将输出数据写入输入序列，还是写入分离的目的位置等问题。</p>\n<h6 id=\"一些算法使用重载形式传递一个谓词\"><a href=\"#一些算法使用重载形式传递一个谓词\" class=\"headerlink\" title=\"一些算法使用重载形式传递一个谓词\"></a>一些算法使用重载形式传递一个谓词</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">unique(beg, end); <span class=\"comment\">// 使用 == 运算符比较元素</span></span><br><span class=\"line\">unique(beg, end, comp); <span class=\"comment\">// 使用comp比较元素</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"if版本的算法\"><a href=\"#if版本的算法\" class=\"headerlink\" title=\"_if版本的算法\"></a>_if版本的算法</h6><p>接受一个元素值得算法通常有另一个不同名的版本（非重载），该版本接受一个谓词代替元素值。接受谓词参数的算法都有附加的<code>_if</code>前缀：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">find(beg, end, val); <span class=\"comment\">// 查找输入范围种val第一次出现的位置</span></span><br><span class=\"line\">find_if(beg, end, pred);<span class=\"comment\">// 查找第一个令pred为真的元素</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"区分拷贝元素的版本和不拷贝的版本\"><a href=\"#区分拷贝元素的版本和不拷贝的版本\" class=\"headerlink\" title=\"区分拷贝元素的版本和不拷贝的版本\"></a>区分拷贝元素的版本和不拷贝的版本</h6><p>默认情况下，重排元素的算法将重排后的元素写回给定的输入序列。这些算法还提供另一个版本，将元素写到一个指定的输出目的位置。如我们所见，写到额外目的空间的算法都在名字后面附加一个<code>_copy</code>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">reverse(beg, end); <span class=\"comment\">// 反转输入范围中元素的顺序</span></span><br><span class=\"line\">reverse_copy(beg, end ,dest); <span class=\"comment\">// 将元素按逆序拷贝到dest</span></span><br></pre></td></tr></table></figure>\n\n<p>一些算法同时提供<code>_if</code>和<code>_copy</code>版本。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从v1中删除奇数元素</span></span><br><span class=\"line\">remove_if(v1.begin(), v1.end(), </span><br><span class=\"line\">          [](<span class=\"keyword\">int</span> i) &#123; <span class=\"keyword\">return</span> i % <span class=\"number\">2</span>; &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 将偶数元素从v1拷贝到v2，v1不变</span></span><br><span class=\"line\">remove_copy_if(v1.begin(), v1.end(), back_inserter(v2),</span><br><span class=\"line\">              [](<span class=\"keyword\">int</span> i)&#123; <span class=\"keyword\">return</span> i % <span class=\"number\">2</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"特定容器算法\"><a href=\"#特定容器算法\" class=\"headerlink\" title=\"特定容器算法\"></a>特定容器算法</h4><p>与其他容器不同，链表类型<code>list</code>和<code>forward_list</code>定义了几个成员函数形式的算法，它们定义了独有的<code>sort、merge、remove、reverse、unique</code>，这些独有的版本比通用版本好得多。</p>\n<img src=\"/blog/2020/12/19/C-泛型算法（二）/特定容器算法.png\" style=\"zoom:80%;\">\n\n<p>算法如下：</p>\n<img src=\"/blog/2020/12/19/C-泛型算法（二）/list.png\" style=\"zoom:80%;\">\n\n<h5 id=\"splice成员\"><a href=\"#splice成员\" class=\"headerlink\" title=\"splice成员\"></a>splice成员</h5><img src=\"/blog/2020/12/19/C-泛型算法（二）/splice.png\" style=\"zoom:80%;\">\n\n<h5 id=\"链表特有的操作会改变容器\"><a href=\"#链表特有的操作会改变容器\" class=\"headerlink\" title=\"链表特有的操作会改变容器\"></a>链表特有的操作会改变容器</h5><p>链表特有版本会改变底层的容器，例如<code>remove</code>会删除指定的元素。<code>unique</code>会删除第二个和后继的重复元素。</p>\n<p>类似的，通用版本<code>merge</code>将合并的序列写到一个给定的目的迭代器，两个输入序列是不变的。而链表版本的<code>merge</code>会销毁给定的链表——元素从参数指定的链表中删除，被合并到调用<code>merge</code>的链表对象中。在<code>merge</code>之后，来自两个链表中的元素依然存在，但它们都已在同一个链表中。</p>\n","categories":["C++"]},{"title":"Git的基本使用(一)","url":"/blog/2019/09/26/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<h3 id=\"本次学习要点：\"><a href=\"#本次学习要点：\" class=\"headerlink\" title=\"本次学习要点：\"></a>本次学习要点：</h3><ol>\n<li><p>如何建立一个本地仓库</p>\n</li>\n<li><p>设置你的个性化信息</p>\n</li>\n<li><p>工作区与缓存区</p>\n</li>\n<li><p>提交与历史</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n\n<h3 id=\"如何建立一个本地仓库\"><a href=\"#如何建立一个本地仓库\" class=\"headerlink\" title=\"如何建立一个本地仓库\"></a>如何建立一个本地仓库</h3><p>有两种方法，一种是Git GUI，一种是Git Bush，第一步都是先建立一个空文件夹。</p>\n<ol>\n<li>在文件夹空白处右键，选择Git GUI Here，点击Create New Repository，OK。</li>\n<li>在文件夹空白处右键，选择Git Bush Here，输入<code>git init</code>，OK。</li>\n</ol>\n<h3 id=\"设置你的个性化信息\"><a href=\"#设置你的个性化信息\" class=\"headerlink\" title=\"设置你的个性化信息\"></a>设置你的个性化信息</h3><p>Git是一个团队开发工作，你对团队的每次贡献都会有相应的记录。所以此时你应该告诉这个仓库你的个人信息，主要包括两个：</p>\n<ul>\n<li><strong>邮箱</strong> 邮箱是别人联系你的途径，当然你应当留意你的个人隐私问题，这个内容我们会放到之后的几章中讲，此处你可以随便填写一个邮箱。</li>\n<li><strong>姓名</strong> 你可以填真名或是化名，取决于你的实际开发和协作环境。</li>\n</ul>\n<ol>\n<li>打开Git Bash界面，我们输入指令<code>git config --help</code>来查看<code>git config</code>的帮助文档。【–help】是一个很有用的指令参数，当你忘了某个指令的使用方法，你都可以如此进行搜寻。</li>\n<li>我们可以看到如此一行：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">user.email</span><br><span class=\"line\">\tYour email address to be recorded in any newly created commits. </span><br><span class=\"line\">\tCan be overridden by the GIT_AUTHOR_EMAIL, GIT_COMMITTER_EMAIL, </span><br><span class=\"line\">\tand EMAIL environment variables. See git-commit-tree(1).</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>使用<code>git config user.email &lt;你的Email&gt;</code>进行邮箱的设置。同样的，<code>git config user.name &lt;你的名字或化名&gt;</code>可以设置该本地仓库的所有者姓名。</p>\n</li>\n<li><p>当你设置完这些值之后，可以打开<code>.gti/config</code>，查看到你刚刚所设置邮箱和姓名。</p>\n</li>\n</ul>\n<h3 id=\"工作区与缓存区\"><a href=\"#工作区与缓存区\" class=\"headerlink\" title=\"工作区与缓存区\"></a>工作区与缓存区</h3><img src=\"/blog/2019/09/26/Git的基本使用（一）/GitFlow.jpg\" style=\"zoom:50%;\">\n\n<p>​                                                            上图来源于西电腾讯TIC-Git的培训资料</p>\n<p>Git的基本工作流程，目前阶段我们需要知道三个区域：<strong>工作区域</strong>、<strong>缓存区</strong>和<strong>仓库记录</strong>。其中，仓库记录是由<strong>历史记录</strong>构成的，因为历史纪录是一棵树状结构，也被叫做(History Tree)。</p>\n<ul>\n<li>用户在工作区域(或工作目录)中进行的修改会被Git检测到，通过<code>add</code>指令被提交到缓存区。</li>\n<li>缓存区中的文件是工作区域中的文件的一次快照备份，你之后在工作区域中做任何修改都不会影响到缓存区中同一个文件的内容，除非再次使用<code>add</code>指令更新缓存区。</li>\n<li>当你觉得工作做得差不多了，你可以使用<code>commit</code>指令，把缓存区中的文件提交到仓库记录，仓库记录会自动生成一次历史记录。你可以简单认为仓库记录就是个数据库，一次<code>commit</code>指令就是一次数据库写入请求。从此之后该记录将一直留在仓库中，你也可以把工作区中的数据文件随时回滚到当时提交的这个版本。</li>\n<li>缓存区中的文件在并未被<code>commit</code>之前，并不会被写入记录，也就意味着有些操作会导致你丢失缓存区的文件快照备份(如<code>checkout</code>等)。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add &lt;filename&gt;</span><br><span class=\"line\">#添加文件至缓存区</span><br><span class=\"line\">git status</span><br><span class=\"line\">#查看当前缓存区的状态</span><br><span class=\"line\">git commit</span><br><span class=\"line\">#将缓存区的文件提交到仓库</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提交与历史\"><a href=\"#提交与历史\" class=\"headerlink\" title=\"提交与历史\"></a>提交与历史</h3><ul>\n<li><p>打开Git Bash，键入<code>git log</code>，即可查看提交的历史纪录。如果对当前提交不满意，找到上一次提交的版本ID值(SHA ID)，键入命令<code>git checkout &lt;SHA ID&gt;</code>，此时版本便已回滚到了之前那个版本，当前的提交会直接删除掉。</p>\n</li>\n<li><p>在Vim界面中，按字母a来进入编辑模式，编辑完毕后按ESC键退出编辑，再按大写锁定，按ZZ来退出Vim。</p>\n</li>\n</ul>\n<p>编辑模板</p>\n<p>提交了xxxx</p>\n<p>来自：Zxy&lt;<a href=\"mailto:&#53;&#x34;&#x33;&#48;&#x34;&#48;&#54;&#53;&#57;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#53;&#x34;&#x33;&#48;&#x34;&#48;&#54;&#53;&#57;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;</a>&gt;</p>\n","categories":["Git"],"tags":["Git"]},{"title":"Git的基本使用(二) --撤销提交","url":"/blog/2019/09/29/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%92%A4%E9%94%80%E6%8F%90%E4%BA%A4/","content":"<h3 id=\"本次学习要点：\"><a href=\"#本次学习要点：\" class=\"headerlink\" title=\"本次学习要点：\"></a>本次学习要点：</h3><p>Git的撤销提交操作</p>\n<p>与回滚不同，如果认为某次的提交是有问题的，需要撤回这次的提交，应该怎么做呢？</p>\n<a id=\"more\"></a>\n\n<h3 id=\"主要指令\"><a href=\"#主要指令\" class=\"headerlink\" title=\"主要指令\"></a>主要指令</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git revert &lt;SHA ID&gt;</span><br></pre></td></tr></table></figure>\n\n<p>该指令可以直接把某一次的提交取消，所有在本次提交中发生变更的文件都会还原回上一次提交的内容。因为针对同一分支master操作，所以会产生冲突（解决方法见一），解决冲突后，再将文件放入缓存区，进行提交.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git reset &lt;之前某个版本ID&gt;</span><br><span class=\"line\">$ git reset --hard &lt;之前某个版本ID&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上述指令是不安全的撤销方式。当年使用<code>git reset</code>来重置记录时，所有<strong>在此之后</strong>的记录都将永久消失，<strong>但是还会保留当前的提交</strong>。如果带上参数<code>--hard</code>，还会直接清空工作区里的所有变更（<strong>如果此时做了修改但是还没有提交，那么直接就会被撤销到未改动的时刻</strong>），直接使工作区内容撤销到指定提交的时刻，是一种比较暴力的撤销方式。</p>\n<h3 id=\"实现1\"><a href=\"#实现1\" class=\"headerlink\" title=\"实现1\"></a>实现1</h3><ol>\n<li>新建一个库，新建一个文件<code>text.txt</code> ，输入内容“1”，保存后提交。并以此类推，一共得到三次提交，内容分别是“1”，“2”，“3”，使用<code>git log</code>查看提交历史。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git log</span><br><span class=\"line\">commit 51df17687ea6bb6a53ed24d614ddcfe9e455e9f9</span><br><span class=\"line\">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Sep 26 21:47:24 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    3.第三次提交</span><br><span class=\"line\">    sign off:&lt;543040659@qq.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">commit 9e71ea1c78ff7aa910959e02acb44e8e3373a805</span><br><span class=\"line\">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Sep 26 21:46:38 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    2.第二次提交</span><br><span class=\"line\">    sign off:&lt;543040659@qq.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">commit 3d4d2f3a3f44c0fcb5d4357d85abf5cb33304e97</span><br><span class=\"line\">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Sep 26 21:45:09 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    1.第一次提交</span><br><span class=\"line\">    sign off:&lt;543040659@qq.com&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用<code>git revert</code>进行撤销操作，撤销到第二次提交，那么结果应该是显示第一次提交的内容，即“1”。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git revert 9e71ea</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>此时产生了冲突，打开<code>test.txt</code>，将第三次的提交内容删除，留下内容“1”，不解决冲突无法提交。然后再加入缓存区，进行提交（当时没有记录，这里只有进行操作的指令，没有结果，失策失策）。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git add test.txt</span><br><span class=\"line\">$ git status\t#可以看到test.txt加入了缓存，可以不写</span><br><span class=\"line\">$ git commit</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>最后使用<code>git log</code>查看提交记录，会产生一个新的提交记录，并且之前记录都会存在，所以是一种安全的撤销操作。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git log</span><br><span class=\"line\">commit 57124efed6dd52b7224c3e3b5ee0be7042cee27b (HEAD -&gt; master)</span><br><span class=\"line\">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Sep 26 21:50:18 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Revert &quot;2.第二次提交&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    This reverts commit 9e71ea1c78ff7aa910959e02acb44e8e3373a805.</span><br><span class=\"line\"></span><br><span class=\"line\">commit 51df17687ea6bb6a53ed24d614ddcfe9e455e9f9</span><br><span class=\"line\">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Sep 26 21:47:24 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    3.第三次提交</span><br><span class=\"line\">    sign off:&lt;543040659@qq.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">commit 9e71ea1c78ff7aa910959e02acb44e8e3373a805</span><br><span class=\"line\">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Sep 26 21:46:38 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    2.第二次提交</span><br><span class=\"line\">    sign off:&lt;543040659@qq.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">commit 3d4d2f3a3f44c0fcb5d4357d85abf5cb33304e97</span><br><span class=\"line\">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Sep 26 21:45:09 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    1.第一次提交</span><br><span class=\"line\">    sign off:&lt;543040659@qq.com&gt;</span><br></pre></td></tr></table></figure>\n\n<p>总结：revert指令可以使版本撤销到之前的某一次提交，并且在那次提交中改变的部分都会还原为上一次提交的内容（比如撤销到第二次，那么内容就会还原为第一次提交的内容），并且在这个过程中会产生冲突，按照我的理解，产生冲突之后修改的txt文档，决定了还原的最终结果。如果我在解决冲突的过程中，留下了“3”，而不是“1”，那么还原的内容应该是“3”。</p>\n<h3 id=\"实现2\"><a href=\"#实现2\" class=\"headerlink\" title=\"实现2\"></a>实现2</h3><ol>\n<li>新建一个库，新建一个文件<code>text.txt</code> ，输入内容“1”，保存后提交。并以此类推，一共得到三次提交，内容分别是“1”，“2”，“3”，使用<code>git log</code>查看提交历史。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git log</span><br><span class=\"line\">commit 9e541291495cfe4c57b62f699ff17deed99bd853 (HEAD -&gt; master)</span><br><span class=\"line\">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Sep 26 21:56:32 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    3.第三次提交</span><br><span class=\"line\">    sign off:&lt;543040659@qq.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1d0feb4e586995b4d1bd6e3d78af5350b2726b68</span><br><span class=\"line\">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Sep 26 21:55:37 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    2.第二次提交</span><br><span class=\"line\">    sign off:&lt;543040659@qq.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">commit 47bbd152043e6f2de771413739b2fccadad6893d</span><br><span class=\"line\">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Sep 26 21:54:36 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    1.第一次提交</span><br><span class=\"line\">    sign off:&lt;543040659@qq.com&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用<code>git reset</code>进行撤销操作1。先改变<code>test.txt</code>中的内容，开始应为“3”，现在可以任意改变，假如改为“5”，然后执行指令（撤销到第三次），并得到以下结果：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git reset 9e5412</span><br><span class=\"line\">Unstaged changes after reset:</span><br><span class=\"line\">M       test.txt</span><br></pre></td></tr></table></figure>\n\n<p>执行的结果就是<code>test.txt</code>文档中的”5”又变成了“3”，成功！</p>\n<ol start=\"3\">\n<li>使用<code>git reset</code>进行撤销操作2。直接执行指令撤销到第二次，得到以下结果：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git reset 1d0fe</span><br><span class=\"line\">Unstaged changes after reset:</span><br><span class=\"line\">M       test.txt</span><br><span class=\"line\">#再执行git log指令</span><br><span class=\"line\">$ git log</span><br><span class=\"line\">commit 1d0feb4e586995b4d1bd6e3d78af5350b2726b68 (HEAD -&gt; master)</span><br><span class=\"line\">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Sep 26 21:55:37 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    2.第二次提交</span><br><span class=\"line\">    sign off:&lt;543040659@qq.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">commit 47bbd152043e6f2de771413739b2fccadad6893d</span><br><span class=\"line\">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Sep 26 21:54:36 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    1.第一次提交</span><br><span class=\"line\">    sign off:&lt;543040659@qq.com&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以发现第三次的提交已经没有了，所以是一种不安全的撤销，此时<code>test.txt</code>中应为“2”，如果你此时修改了文档中的内容，再执行以上步骤，文档中的内容修改会被继续保留下来，与下面的有所不同。</p>\n<ol start=\"4\">\n<li>使用<code>git reset --hard</code>进行撤销操作。如前所述，此指令会直接撤销到<strong>当前提交时刻的原始版本</strong>（以撤销到第二次为例）。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git reset --hard 1d0feb</span><br><span class=\"line\">HEAD is now at 1d0feb4 2.第二次提交</span><br></pre></td></tr></table></figure>\n\n<p>我们一开始在第二次提交时，里面的内容就是“2”，现在执行上述指令后，<code>test.txt</code>中就是“2”。如果把<code>test.txt</code>中的内容修改为“5”，甚至你已经进行add指令加入到了缓存，但是没有提交，那么再次执行上述hard指令后，文档中的内容又变成了“2”，你之前的所有修改都白费了，所以要特别小心，慎用！</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>这次的练习收获很多，不过只是很浅显的一些理解，不免有些理解不到位或者容易产生歧义的地方。如果有哪里有疑问，可以和我联系进行讨论。</p>\n","categories":["Git"],"tags":["Git"]},{"title":"I/O控制（一）","url":"/blog/2021/02/02/I-O%E6%8E%A7%E5%88%B6%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>I/O设备的基本概念和分类</li>\n<li>I/O控制器</li>\n<li>I/O控制方式</li>\n<li>I/O软件层次结构</li>\n<li>I/O核心子系统</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"I-O设备的基本概念和分类\"><a href=\"#I-O设备的基本概念和分类\" class=\"headerlink\" title=\"I/O设备的基本概念和分类\"></a>I/O设备的基本概念和分类</h4><h5 id=\"什么是I-O设备？\"><a href=\"#什么是I-O设备？\" class=\"headerlink\" title=\"什么是I/O设备？\"></a>什么是I/O设备？</h5><p>I/O设备就是可以将数据输入到计算机，或从计算机接收数据的外部设备，属于计算机中的硬件部件。</p>\n<ul>\n<li><code>write</code> 操作：向外部设备写出数据。</li>\n<li><code>read</code> 操作：从外部设备读入数据。</li>\n</ul>\n<h5 id=\"I-O设备分类\"><a href=\"#I-O设备分类\" class=\"headerlink\" title=\"I/O设备分类\"></a>I/O设备分类</h5><p><strong>按使用特性分类</strong>：</p>\n<ol>\n<li>人机交互类设备</li>\n<li>存储设备</li>\n<li>网络通信设备</li>\n</ol>\n<p><strong>按传输速率分类</strong>：</p>\n<ol>\n<li>低速设备</li>\n<li>中速设备</li>\n<li>高速设备</li>\n</ol>\n<p><strong>按信息交换的单位分类</strong>：</p>\n<ol>\n<li>块设备（传输快，可寻址）</li>\n<li>字符设备（传输慢，不可寻址，常采用中断驱动方式）</li>\n</ol>\n<h4 id=\"I-O控制器\"><a href=\"#I-O控制器\" class=\"headerlink\" title=\"I/O控制器\"></a>I/O控制器</h4><p>I/O设备由<strong>机械设备</strong>和<strong>电子设备</strong>构成。</p>\n<p><strong>机械部件</strong>：执行具体的 I/O 操作，如鼠标键盘等。</p>\n<p><strong>电子部件</strong>：插入主板扩充槽的印刷电路板。</p>\n<hr>\n<p>电子部件（I/O控制器）</p>\n<p>I/O 控制器是 CPU 和 I/O 设备机械部件之间的<strong>桥梁</strong>。CPU 可控制 I/O 控制器，再由 I/O 控制器来控制设备的机械部件。</p>\n<hr>\n<h5 id=\"I-O控制器的功能\"><a href=\"#I-O控制器的功能\" class=\"headerlink\" title=\"I/O控制器的功能\"></a>I/O控制器的功能</h5><ol>\n<li>接受和识别 CPU 发出的命令（I/O 控制器中的<strong>控制寄存器</strong>存放命令和参数）。</li>\n<li>向 CPU 报告设备的状态（I/O 控制器中的<strong>状态寄存器</strong>记录 I/O 设备的当前状态）。</li>\n<li>数据交换（I/O 控制器中的 <strong>数据寄存器</strong>，作为 CPU 与设备数据交换的桥梁）。</li>\n<li>地址识别（I/O 控制器通过 CPU 提供的地址来判断 CPU 读写哪个寄存器）。</li>\n</ol>\n<h5 id=\"I-O控制器的组成\"><a href=\"#I-O控制器的组成\" class=\"headerlink\" title=\"I/O控制器的组成\"></a>I/O控制器的组成</h5><img src=\"/blog/2021/02/02/I-O控制（一）/I-O控制器的组成.png\" style=\"zoom: 67%;\">\n\n<p>上述寄存器如果地址占用内存地址的一部分，称为<strong>内存映像 I/O</strong> ；如果采用 I/O 专用地址，称为<strong>寄存器独立编址</strong>。</p>\n<p>两者区别如下：</p>\n<img src=\"/blog/2021/02/02/I-O控制（一）/内存映像与寄存器独立编址.png\" style=\"zoom: 67%;\">\n\n<h5 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/02/02/I-O控制（一）/I-O控制器小结.png\">\n\n<h4 id=\"I-O控制方式\"><a href=\"#I-O控制方式\" class=\"headerlink\" title=\"I/O控制方式\"></a>I/O控制方式</h4><h5 id=\"程序直接控制方式\"><a href=\"#程序直接控制方式\" class=\"headerlink\" title=\"程序直接控制方式\"></a>程序直接控制方式</h5><img src=\"/blog/2021/02/02/I-O控制（一）/程序直接控制方式.png\" style=\"zoom: 67%;\">\n\n<ol>\n<li>CPU 干预的频率高，等待 I/O 的过程中一直轮询检查。</li>\n<li>每次读写一个<strong>字</strong>。</li>\n<li>数据流向：<ol>\n<li>数据输入： I/O 设备 -&gt; CPU -&gt; 内存</li>\n<li>数据输出： 内存 -&gt; CPU -&gt;  I/O 设备</li>\n</ol>\n</li>\n<li>优点：实现简单。</li>\n<li>缺点：CPU 和 I/O设备只能串行工作，CPU 长期处于<strong>忙等</strong>状态，利用率低。</li>\n</ol>\n<h5 id=\"中断驱动方式\"><a href=\"#中断驱动方式\" class=\"headerlink\" title=\"中断驱动方式\"></a>中断驱动方式</h5><img src=\"/blog/2021/02/02/I-O控制（一）/中断驱动方式.png\">\n\n<ol>\n<li><p>I/O 操作开始前、完成后需要 CPU 介入。</p>\n</li>\n<li><p>每次读写一个<strong>字</strong>。</p>\n</li>\n<li><p>数据流向：</p>\n<ol>\n<li>数据输入： I/O 设备 -&gt; CPU -&gt; 内存</li>\n<li>数据输出： 内存 -&gt; CPU -&gt;  I/O 设备</li>\n</ol>\n</li>\n<li><p>优点：CPU 和 I/O 设备可并行工作。</p>\n</li>\n<li><p>缺点：每个字传输时，都需要中断，频繁中断消耗较多的 CPU 时间。</p>\n</li>\n</ol>\n<h5 id=\"DMA方式\"><a href=\"#DMA方式\" class=\"headerlink\" title=\"DMA方式\"></a>DMA方式</h5><p>DMA（Direct Memory Access，直接存储器存取），主要用于<strong>块设备</strong> I/O 控制，<strong>不需要经过 CPU</strong>。</p>\n<img src=\"/blog/2021/02/02/I-O控制（一）/DMA方式.png\" style=\"zoom:80%;\">\n\n<p><strong>DMA控制器</strong></p>\n<img src=\"/blog/2021/02/02/I-O控制（一）/DMA控制器.PNG\" style=\"zoom:80%;\">\n\n<p>DR（Data Register，数据寄存器）：暂存从设备到内存，或从内存到设备的数据，<strong>也是一个字一个字的存入</strong>。<br>MAR（Memory Address Register，内存地址寄存器）：在输入时，MAR 表示数据应放到内存中的什么位置；输出时 MAR 表示要输出的数据放在内存中的什么位置。<br>DC（Data Counter，数据计数器）：表示剩余要读/写的字节数。<br>CR（Command Register，命令/状态寄存器）：用于存放 CPU 发来的 I/O 命令，或设备的状态信息。</p>\n<ol>\n<li><p>仅在传送开始或结束时，才需要 CPU 干预。</p>\n</li>\n<li><p>每次读写<strong>一个或多个块（必须连续）</strong>。</p>\n</li>\n<li><p>数据流向：</p>\n<ol>\n<li>数据输入： I/O 设备  -&gt; 内存</li>\n<li>数据输出： 内存 -&gt;  I/O 设备</li>\n</ol>\n</li>\n<li><p>优点：数据传输以<strong>块</strong>为单位，且 CPU 接入频率进一步降低，进一步提高了 CPU 和 I/O 设备的并行性。</p>\n</li>\n<li><p>缺点：只能读写一个或多个连续的数据块。如果数据块离散，CPU 需发出多次 I/O 指令。</p>\n</li>\n</ol>\n<h5 id=\"通道控制方式\"><a href=\"#通道控制方式\" class=\"headerlink\" title=\"通道控制方式\"></a>通道控制方式</h5><p>通道：一种硬件，可以理解为<strong>弱化版的 CPU</strong>，可以识别并执行一系列的通道指令，通道执行的指令很单一，与 CPU 共享内存。</p>\n<img src=\"/blog/2021/02/02/I-O控制（一）/通道.PNG\" style=\"zoom:80%;\">\n\n<ol>\n<li><p>CPU 干预频率极低，通道完成一组数据块的读写后才发出中断信号。</p>\n</li>\n<li><p>每次读写<strong>一组数据块</strong>。</p>\n</li>\n<li><p>数据流向：</p>\n<ol>\n<li>数据输入： I/O 设备  -&gt; 内存</li>\n<li>数据输出： 内存 -&gt;  I/O 设备</li>\n</ol>\n</li>\n<li><p>优点：CPU、通道、I/O 设备并行工作，资源利用率高。</p>\n</li>\n<li><p>缺点：实现复杂，，需要专门的通道硬件支持。</p>\n</li>\n</ol>\n<h5 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/02/02/I-O控制（一）/I-O控制方式.PNG\" style=\"zoom: 67%;\">\n\n<h4 id=\"I-O软件层次结构\"><a href=\"#I-O软件层次结构\" class=\"headerlink\" title=\"I/O软件层次结构\"></a>I/O软件层次结构</h4><img src=\"/blog/2021/02/02/I-O控制（一）/I-O软件层次结构.PNG\" style=\"zoom: 80%;\">\n\n<h5 id=\"用户层软件\"><a href=\"#用户层软件\" class=\"headerlink\" title=\"用户层软件\"></a>用户层软件</h5><p>实现与用户交互的接口，用户可直接使用该层提供的，与 I/O 操作相关的库函数对设备进行操作。用户层软件将用户请求翻译为格式化的 I/O 请求，通过<strong>系统调用</strong>请求操作系统内核的服务。</p>\n<h5 id=\"设备独立性软件\"><a href=\"#设备独立性软件\" class=\"headerlink\" title=\"设备独立性软件\"></a>设备独立性软件</h5><p>又称设备无关性软件，与设备的硬件特性无关的功能几乎都在这一层实现。</p>\n<p>主要实现的功能：</p>\n<ol>\n<li>向上层提供统一的调用接口。</li>\n<li>设备的保护。设备被看作是一种特殊的文件，不同用户的访问权限不同。</li>\n<li>差错处理。</li>\n<li>设备的分配与回收。</li>\n<li>数据缓冲区管理。</li>\n<li>建立逻辑设备名到物理设备名的映射关系，根据设备类型选择调用相应的驱动程序。</li>\n</ol>\n<p>设备独立性软件需要通过<strong>逻辑设备表（LUT， Logical Unit Table）</strong>来确定逻辑设备对应的物理设备，并找到该设备对应的设备驱动程序。有两种方式：①整个系统只设置一张 LUT，只适合单用户操作系统；②为每个用户设置一张 LUT。</p>\n<p><strong>不同设备需要不同设备驱动程序的原因</strong>？</p>\n<p>答：不同设备有不同的硬件特性，具体细节只有厂家知道。驱动程序一般会以一个独立进程的方式存在。</p>\n<h5 id=\"中断处理程序\"><a href=\"#中断处理程序\" class=\"headerlink\" title=\"中断处理程序\"></a>中断处理程序</h5><img src=\"/blog/2021/02/02/I-O控制（一）/中断处理程序.png\" style=\"zoom:80%;\">\n\n<h5 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h5><p>中断处理程序和设备驱动程序会和硬件打交道。</p>\n<h4 id=\"I-O核心子系统\"><a href=\"#I-O核心子系统\" class=\"headerlink\" title=\"I/O核心子系统\"></a>I/O核心子系统</h4><p> I/O 核心子系统要实现的功能就是中间三层要实现的功能，主要有： I/O 调度、设备保护、设备分配与回收、缓冲区管理，还有假脱机技术（SPOOLing技术），<strong>其中假脱机技术是在用户层软件实现的</strong>。</p>\n<h5 id=\"I-O调度\"><a href=\"#I-O调度\" class=\"headerlink\" title=\"I/O调度\"></a>I/O调度</h5><p>用某种算法确定一个好的顺序来处理各个 I/O 请求。</p>\n<p>如磁盘调度：先来先服务算法、最短寻道优先算法等确定 I/O 请求的顺序。</p>\n<p>同理，打印机等设备也可以用先来先服务、优先级算法等确定 I/O 请求的顺序。</p>\n<h5 id=\"设备保护\"><a href=\"#设备保护\" class=\"headerlink\" title=\"设备保护\"></a>设备保护</h5><p>不同用户对各个文件拥有不同的访问权限。可参考<strong>文件保护</strong>小节。</p>\n","categories":["操作系统"]},{"title":"Git的基本使用(三)-Stash、Checkout和Reset（未完待续）","url":"/blog/2019/10/08/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-Stash%E3%80%81Checkout%E5%92%8Creset/","content":"<h3 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h3><p><code>Stash、Checkout</code>和<code>Reset</code>指令</p>\n<p>经常有这样的事情发生，当你正在进行项目中某一部分的工作，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点，所以你储藏这些变更。为了往堆栈推送一个新的储藏，只要运行 <code>git stash</code>。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"基本指令-stash\"><a href=\"#基本指令-stash\" class=\"headerlink\" title=\"基本指令-stash\"></a>基本指令-stash</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git stash </span><br><span class=\"line\">#保存当前工作区所有内容到当前分支的储藏栈的栈顶(工作区会变为最后一次commit时的内容)。</span><br><span class=\"line\">git stash apply </span><br><span class=\"line\">#应用当前分支的储藏栈栈顶的储藏到工作区。</span><br><span class=\"line\">git stash apply &lt;stash id&gt; </span><br><span class=\"line\">#应用当前分支的储藏栈指定位置的储藏到工作区，例如git stash apply stash@&#123;0&#125;。</span><br><span class=\"line\">git stash list </span><br><span class=\"line\">#列出当前分支的储藏栈详细信息。</span><br><span class=\"line\">git stash drop &lt;stash id&gt; </span><br><span class=\"line\">#移除当前分支的储藏栈指定位置的储藏。</span><br><span class=\"line\">git stash pop</span><br><span class=\"line\">#从git栈中获取到最近一次stash进去的内容，恢复工作区的内容，获取之后，会删除栈中对应的stash。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>唯一需要注意的是，<code>git stash apply</code>并不会改变储藏栈的内容，所以如果你觉得之前的那个储藏没用了，请手动调用<code>git stash drop &lt;stash id&gt;</code>清理储藏栈。特别的，<code>git stash pop</code>会自动应用当前分支的储藏栈栈顶的储藏到工作区，并将其从栈顶移除。</li>\n</ul>\n<h4 id=\"练习一\"><a href=\"#练习一\" class=\"headerlink\" title=\"练习一\"></a>练习一</h4><ol>\n<li>新建一个仓库，建立文件<code>test.txt</code>，随意键入一段内容（123），提交。</li>\n<li>创建分支<code>feature</code>，修改<code>test.txt</code>文件内容（321）然后运行<code>git status</code>可以看到以下中间过程的内容：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>现在你想切换分支，但是你还不想提交你正在进行中的工作；所以你储藏这些变更。为了往堆栈推送一个新的储藏，只要运行 <code>git stash</code>。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git stash</span><br><span class=\"line\">Saved working directory and index state WIP on master: 7ac5b3d master注释</span><br><span class=\"line\">#test.txt中的内容变成了“123”，工作区内容变为最后一次提交的内容</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>这时，你可以方便地切换到其他分支工作；你的变更都保存在栈上。要查看现有的储藏，你可以使用 <code>git stash list</code>：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git stash list</span><br><span class=\"line\">stash@&#123;0&#125;: WIP on master: 7ac5b3d master注释</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>切换到分支<code>feature</code>并且使用指令<code>git stash pop</code>，观察<code>test.txt</code>中的内容变化。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git stash pop</span><br><span class=\"line\">On branch feature</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class=\"line\">Dropped refs/stash@&#123;0&#125; (81b72af21b8037e4b185820e3a86b78d95b9f8d8)</span><br><span class=\"line\">#文档内容变成了“321”，也就是master修改后的工作区，但现在pop命令把储藏的栈顶弹出，是在feature分支进行工作的，此时feature的工作区是修改后的文档。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>再次使用指令<code>git stash</code>，然后<code>git checkout master</code>，再次使用<code>git stash pop</code>，那么修改后的文档就是在<code>master</code>工作区了，最后直接查看工作区状态。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"练习二\"><a href=\"#练习二\" class=\"headerlink\" title=\"练习二\"></a>练习二</h4><p>在练习一基础上使用<code>apply</code>指令：</p>\n<ol>\n<li>当前工作区为<code>master</code>，<code>test.txt</code>中的内容是修改后的321，使用<code>stash</code>指令存储当前的工作区。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git stash</span><br><span class=\"line\">Saved working directory and index state WIP on master: 7ac5b3d master注释</span><br><span class=\"line\"></span><br><span class=\"line\">$ git stash list</span><br><span class=\"line\">stash@&#123;0&#125;: WIP on master: 7ac5b3d master注释</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>此时<code>test.txt</code>内容为（123），修改其内容（1234），然后进行<code>add</code>（不进行此操作也可以），再进行一次存储。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git stash list</span><br><span class=\"line\">stash@&#123;0&#125;: WIP on master: 7ac5b3d master注释</span><br><span class=\"line\">stash@&#123;1&#125;: WIP on master: 7ac5b3d master注释</span><br><span class=\"line\">#现在堆栈里存储了两个工作区，工作区空</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working tree clean</span><br><span class=\"line\">#test.txt中内容变为“123”</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用<code>apply</code>指令将堆栈中的栈顶应用到当前工作区，当前的栈顶应该是<code>stash@{0}</code>，所以内容应该恢复为“1234”。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git stash apply</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class=\"line\">#打开test.txt发现内容已经变回“1234”</span><br><span class=\"line\">$ git stash list</span><br><span class=\"line\">stash@&#123;0&#125;: WIP on master: 7ac5b3d master注释</span><br><span class=\"line\">stash@&#123;1&#125;: WIP on master: 7ac5b3d master注释</span><br><span class=\"line\">#堆栈中的内容不会主动删除，继续保存下来</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>修改<code>test.txt</code>中的“1234”为“123”（初始工作区），然后使用<code>git stash apply</code>指令将栈中的<code>stash@{1}</code>（修改后的工作区，内容是“321”）返回到工作区，此时文档内容是“321”。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git stash apply stash@&#123;1&#125;</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class=\"line\">#test.txt中的内容是“321”</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一些标注\"><a href=\"#一些标注\" class=\"headerlink\" title=\"一些标注\"></a>一些标注</h4><h5 id=\"练习一-1\"><a href=\"#练习一-1\" class=\"headerlink\" title=\"练习一\"></a>练习一</h5><p>初始工作区的<code>test.txt</code>内容为：123</p>\n<p>第一次修改后的<code>test.txt</code>内容为：321</p>\n<p>最后<code>master</code>中的<code>stash@{0}</code>内容为：321</p>\n<h5 id=\"练习二-1\"><a href=\"#练习二-1\" class=\"headerlink\" title=\"练习二\"></a>练习二</h5><p>初始<code>master</code>中的<code>stash@{0}</code>内容为：321</p>\n<p>修改初始的工作区中的<code>test.txt</code>内容为：1234</p>\n<p>进行存储，<code>stash@{0}-&gt;stash@{1}</code>，内容为：321</p>\n<p>此时<code>stash@{0}</code>中的内容为：1234</p>\n<p>本次练习最后结果改回了“1234”。</p>\n","categories":["Git"],"tags":["Git"]},{"title":"C++顺序容器","url":"/blog/2020/11/25/C-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>顺序容器概述</li>\n<li>容器库概览</li>\n<li>顺序容器操作</li>\n<li><code>vector</code>对象是如何增长的</li>\n<li>额外的<code>string</code>操作</li>\n<li>容器适配器</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"顺序容器概述\"><a href=\"#顺序容器概述\" class=\"headerlink\" title=\"顺序容器概述\"></a>顺序容器概述</h4><img src=\"/blog/2020/11/25/C-顺序容器/概述.png\" style=\"zoom:120%;\">\n\n<p>选择容器的基本原则：</p>\n<ul>\n<li>尽量使用<code>vector</code>。</li>\n<li>要求随机访问元素，使用<code>vector</code>或者<code>deque</code>。</li>\n<li>要求在中间插入或删除元素，使用<code>list</code>或者<code>forward_list</code>。</li>\n<li>要求在首尾插入或删除元素且不会在中间插入或者删除，使用<code>deque</code>。</li>\n<li>如果程序要读取输入，且必须在中间插入，使用<code>list</code>，随后拷贝到<code>vector</code>。</li>\n</ul>\n<h4 id=\"容器库概览\"><a href=\"#容器库概览\" class=\"headerlink\" title=\"容器库概览\"></a>容器库概览</h4><img src=\"/blog/2020/11/25/C-顺序容器/容器操作.png\" style=\"zoom:120%;\">\n\n<img src=\"/blog/2020/11/25/C-顺序容器/容器操作1.png\" style=\"zoom:120%;\">\n\n<h5 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h5><p><code>forward_list</code>迭代器不支持递减运算符。</p>\n<h6 id=\"迭代器范围\"><a href=\"#迭代器范围\" class=\"headerlink\" title=\"迭代器范围\"></a>迭代器范围</h6><p><strong>左闭合区间</strong>：<code>[begin, end)</code>，表示范围自<code>begin</code>开始，于<code>end</code>之前结束。</p>\n<ul>\n<li>如果<code>begin</code>与<code>end</code>相等，则范围为空。</li>\n<li>如果<code>begin</code>与<code>end</code>不等，则范围至少包含一个元素，且<code>begin</code>指向该范围中的第一个元素。</li>\n<li>可以对<code>begin</code>递增若干次，使得<code>begin==end</code>。</li>\n</ul>\n<h5 id=\"容器类型成员\"><a href=\"#容器类型成员\" class=\"headerlink\" title=\"容器类型成员\"></a>容器类型成员</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">list</span>&lt;<span class=\"built_in\">string</span>&gt;::iterator iter;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::difference_type count</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"begin与end成员\"><a href=\"#begin与end成员\" class=\"headerlink\" title=\"begin与end成员\"></a>begin与end成员</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">list</span>&lt;<span class=\"built_in\">string</span>&gt; a = &#123;<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"bcd\"</span>, <span class=\"string\">\"cde\"</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> it1 = a.begin(); <span class=\"comment\">// list&lt;string&gt;::iterator</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> it2 = a.rbegin(); <span class=\"comment\">// list&lt;string&gt;::reverse_iterator</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> it3 = a.cbegin(); <span class=\"comment\">// list&lt;string&gt;::const_iterator</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> it4 = a.crbegin(); <span class=\"comment\">// list&lt;string&gt;::const_reverse_iterator</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"容器定义及初始化\"><a href=\"#容器定义及初始化\" class=\"headerlink\" title=\"容器定义及初始化\"></a>容器定义及初始化</h5><img src=\"/blog/2020/11/25/C-顺序容器/初始化.png\" style=\"zoom:120%;\">\n\n<p><strong>array的使用</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 10&gt; ia1; <span class=\"comment\">// 10个默认初始化的int</span></span><br><span class=\"line\"><span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 10&gt; ia2 = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 10&gt; ia3 = &#123;<span class=\"number\">42</span>&#125;; <span class=\"comment\">// ia3[0]为42， 其余为0</span></span><br><span class=\"line\"><span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 10&gt; ia4 = &#123;&#125;; <span class=\"comment\">// 初始化为0</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"赋值和swap\"><a href=\"#赋值和swap\" class=\"headerlink\" title=\"赋值和swap\"></a>赋值和swap</h5><img src=\"/blog/2020/11/25/C-顺序容器/assign.png\" style=\"zoom:120%;\">\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// assign第一种用法</span></span><br><span class=\"line\"><span class=\"built_in\">list</span>&lt;<span class=\"built_in\">string</span>&gt; names;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*&gt; oldstyle;</span><br><span class=\"line\">names = oldstyle; <span class=\"comment\">// 错误，容器类型不匹配</span></span><br><span class=\"line\"><span class=\"comment\">// 正确，可以将const char*转为string</span></span><br><span class=\"line\">names.assign(oldstyle.cbegin(), oldstyle.cend()); </span><br><span class=\"line\"><span class=\"comment\">// assign的第二种用法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">slist1</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>; <span class=\"comment\">// 1个元素，为空string</span></span><br><span class=\"line\">slist1.assign(<span class=\"number\">10</span>, <span class=\"string\">\"Hiya!\"</span>); <span class=\"comment\">// 10个元素，每个都是\"Hiya\"</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"使用swap\"><a href=\"#使用swap\" class=\"headerlink\" title=\"使用swap\"></a>使用swap</h6><p>swap操作交换两个相同类型容器的内容</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">svec1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">svec2</span><span class=\"params\">(<span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\">swap(svec1, svec2);</span><br><span class=\"line\"><span class=\"comment\">// 元素本身并未交换，swap只是交换了两个容器的内部数据结构</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>除array外，swap不对任何元素进行拷贝、删除或插入操作，因此可以保证在常数时间完成</strong>。<strong>对array会真正交换它们的元素</strong>。</p>\n<h5 id=\"容器大小操作\"><a href=\"#容器大小操作\" class=\"headerlink\" title=\"容器大小操作\"></a>容器大小操作</h5><p><code>size</code>：返回容器中元素数目。</p>\n<p><code>empty</code>：容器是否为空。</p>\n<p><code>max_size</code>：返回一个大于或等于该类型容器所能容纳的最大元素数的值。</p>\n<p>注：<code>forward_list</code>不支持<code>size</code>。</p>\n<h5 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v2 = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">9</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v3 = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v4 = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// v1 &lt; v2 true，在v1[2] &lt; v2[2]</span></span><br><span class=\"line\"><span class=\"comment\">// v1 &lt; v3 false，所有元素相等，但是v3元素更少</span></span><br><span class=\"line\"><span class=\"comment\">// v1 == v4 true，元素对应相等且长度相同</span></span><br><span class=\"line\"><span class=\"comment\">// v1 == v2 false，v2元素比v1少</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"顺序容器操作\"><a href=\"#顺序容器操作\" class=\"headerlink\" title=\"顺序容器操作\"></a>顺序容器操作</h4><img src=\"/blog/2020/11/25/C-顺序容器/添加元素.png\" style=\"zoom:120%;\">\n\n<h5 id=\"使用emplace操作\"><a href=\"#使用emplace操作\" class=\"headerlink\" title=\"使用emplace操作\"></a>使用emplace操作</h5><p>当调用一个<code>emplace</code>成员函数时，将参数传递给元素类型的构造函数。<code>emplace</code>成员使用这些参数在容器管理的内存空间中直接构造元素。例如，假定c保存Sales_data元素：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">c.emplace_back(<span class=\"string\">\"978-0590353403\"</span>, <span class=\"number\">24</span>, <span class=\"number\">15.99</span>);</span><br><span class=\"line\">c.push_back(Sales_data(<span class=\"string\">\"978-0590353403\"</span>, <span class=\"number\">24</span>, <span class=\"number\">15.99</span>));</span><br><span class=\"line\"><span class=\"comment\">// 错误</span></span><br><span class=\"line\">c.push_back(<span class=\"string\">\"978-0590353403\"</span>, <span class=\"number\">24</span>, <span class=\"number\">15.99</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"访问元素\"><a href=\"#访问元素\" class=\"headerlink\" title=\"访问元素\"></a>访问元素</h5><img src=\"/blog/2020/11/25/C-顺序容器/访问元素.png\" style=\"zoom:120%;\">\n\n<h5 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h5><img src=\"/blog/2020/11/25/C-顺序容器/删除元素.png\" style=\"zoom:120%;\">\n\n<h5 id=\"改变容器大小\"><a href=\"#改变容器大小\" class=\"headerlink\" title=\"改变容器大小\"></a>改变容器大小</h5><img src=\"/blog/2020/11/25/C-顺序容器/改变容器大小.png\" style=\"zoom:120%;\">\n\n<h5 id=\"容器操作可能使迭代器失效\"><a href=\"#容器操作可能使迭代器失效\" class=\"headerlink\" title=\"容器操作可能使迭代器失效\"></a>容器操作可能使迭代器失效</h5><p>向容器中添加/删除元素可能会使指向容器元素的指针、引用或迭代器失效。一个失效的指针、引用或迭代器将不再表示任何元素。</p>\n<p>在向容器添加元素后：</p>\n<ul>\n<li>容器是<code>vector</code>或<code>string</code>，且存储空间被重新分配，则指向容器的迭代器、指针和引用都会失效。如果存储空间未重新分配，指向插入位置之前的元素的迭代器、指针和引用仍有效，但插入位置之后的迭代器、指针和引用将会失效。</li>\n<li>对于<code>deque</code>，插入到除首尾位置之外的任何位置都会导致迭代器、指针和引用失效。如果在首尾位置添加元素，迭代器会失效，指向存在元素的引用和指针不会失效。</li>\n<li>对于<code>list</code>和<code>forward_list</code>，指向容器的迭代器、指针和引用仍有效。</li>\n</ul>\n<p>删除元素时，指向被删除元素的迭代器、指针和引用都会失效。</p>\n<ul>\n<li>对于<code>list</code>和<code>forward_list</code>，指向容器其他位置的迭代器（包括尾后迭代器和首前迭代器）、引用和指针都有效。</li>\n<li>对于<code>deque</code>，在首尾之外的任何位置删除元素，指向被删除元素外其他元素的迭代器、指针或引用也会失效。删除尾，尾后迭代器会失效，但其他迭代器、引用和指针不受影响；删除首，也不受影响。</li>\n<li>对于<code>vector</code>和<code>string</code>，指向被删元素之前元素的迭代器、引用和指针仍有效。</li>\n</ul>\n<p><em>注意：当我们删除元素时，尾后迭代器总会失效</em>。</p>\n<h4 id=\"vector对象是如何增长的\"><a href=\"#vector对象是如何增长的\" class=\"headerlink\" title=\"vector对象是如何增长的\"></a>vector对象是如何增长的</h4><p><code>vector</code>会分配比新的空间需求更大的内存空间，作为备用。</p>\n<h5 id=\"管理容量的成员函数\"><a href=\"#管理容量的成员函数\" class=\"headerlink\" title=\"管理容量的成员函数\"></a>管理容量的成员函数</h5><img src=\"/blog/2020/11/25/C-顺序容器/管理vector.png\" style=\"zoom:120%;\">\n\n<p><em><code>reserve</code>不改变容器中元素的数量，只影响<code>vector</code>预先分配多大的内存空间。</em></p>\n<h4 id=\"额外的string操作\"><a href=\"#额外的string操作\" class=\"headerlink\" title=\"额外的string操作\"></a>额外的string操作</h4><img src=\"/blog/2020/11/25/C-顺序容器/额外string.png\" style=\"zoom:120%;\">\n\n<p>这些构造函数接受一个<code>string</code>或一个<code>const char*</code>参数，还接受（可选的）指定拷贝多少个字符的参数。</p>\n<p>从<code>const char*</code>创建<code>string</code>时，指针指向的数组必须以空字符结尾，拷贝操作遇到空字符时停止。且：</p>\n<ul>\n<li>如果同时传一个计数值，就不必以空字符结尾。</li>\n<li>如果未传递计数值且数组未以空字符结尾，或者计数值大于数组大小，则构造函数未定义。</li>\n</ul>\n<p>从<code>string</code>拷贝时，可选开始位置和计数值。位置大于<code>size</code>，构造函数抛出一个<em>out of range</em>异常。计数值代表从当前位置拷贝这么多个字符，最多拷贝到<code>string</code>结尾。</p>\n<h5 id=\"sbustr\"><a href=\"#sbustr\" class=\"headerlink\" title=\"sbustr\"></a>sbustr</h5><img src=\"/blog/2020/11/25/C-顺序容器/substr.png\" style=\"zoom:120%;\">\n\n<h5 id=\"aapend和replace\"><a href=\"#aapend和replace\" class=\"headerlink\" title=\"aapend和replace\"></a>aapend和replace</h5><ol>\n<li><code>append</code>操作是在<code>string</code>末尾进行插入操作的一种简写形式。</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">s.append(<span class=\"string\">\"123abc\"</span>); <span class=\"comment\">// 将\"123abc\"追加在s之后</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>replace</code>操作是调用<code>erase</code>和<code>insert</code>的一种简写形式。</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">s.erase(<span class=\"number\">11</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">s.insert(<span class=\"number\">11</span>, <span class=\"string\">\"5th\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\">s.replace(<span class=\"number\">11</span>, <span class=\"number\">3</span>, <span class=\"string\">\"5th\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>还有<code>assign</code>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">s.assign(arg); <span class=\"comment\">// 将s中字符替换未arg，返回指向s的引用</span></span><br></pre></td></tr></table></figure>\n\n<p><code>assign</code>总是替换<code>string</code>中所有内容。</p>\n<h5 id=\"string的搜索操作\"><a href=\"#string的搜索操作\" class=\"headerlink\" title=\"string的搜索操作\"></a>string的搜索操作</h5><img src=\"/blog/2020/11/25/C-顺序容器/string_find.png\" style=\"zoom:120%;\">\n\n<img src=\"/blog/2020/11/25/C-顺序容器/string_find_form.png\" style=\"zoom:120%;\">\n\n<p><em><code>string</code>搜索返回<code>string::size_type</code>类型，是无符号的，因此用<code>int</code>表示不是很好的选择。</em></p>\n<h5 id=\"compare函数\"><a href=\"#compare函数\" class=\"headerlink\" title=\"compare函数\"></a>compare函数</h5><img src=\"/blog/2020/11/25/C-顺序容器/compare.png\" style=\"zoom:120%;\">\n\n<h5 id=\"数值转换\"><a href=\"#数值转换\" class=\"headerlink\" title=\"数值转换\"></a>数值转换</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"pi = 3.14\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 转换s中以数字开始的第一个字串，d=3.14</span></span><br><span class=\"line\">d = stod(s.substr(s.find_first_of(<span class=\"string\">\"+-.0123456789\"</span>)));</span><br></pre></td></tr></table></figure>\n\n<p><em>如果<code>string</code>不能转换为数值，抛出<code>invalid_argument</code>异常。如果转换的数值无法用任何类型表示，则抛出一个<code>out_of_range</code>异常</em>。</p>\n<h4 id=\"容器适配器\"><a href=\"#容器适配器\" class=\"headerlink\" title=\"容器适配器\"></a>容器适配器</h4><p><strong>适配器</strong>是标准库中的一个通用概念。容器、迭代器和函数都有适配器。本质上，一个适配器是一种机制，能使某种事物的行为看起来像另外一种事物一样。比如：<code>stack</code>、<code>queue</code>、<code>priority_queue</code>。</p>\n<img src=\"/blog/2020/11/25/C-顺序容器/容器适配器.png\" style=\"zoom:120%;\">\n\n<p>每个适配器都定义了两个构造函数：</p>\n<ol>\n<li>默认构造函数创建一个空对象，接受一个容器的构造函数拷贝来初始化适配器。</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假定dep使一个deque&lt;int&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">stk</span><span class=\"params\">(dep)</span></span>; <span class=\"comment\">// 从deq拷贝元素到stk</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>默认情况下，<code>stack</code>和<code>queue</code>基于<code>deque</code>实现，<code>priority_deque</code>基于<code>vector</code>。创建一个适配器时将一个命名的顺序容器作为第二个类型参数，来重载默认容器类型。</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于vector实现空栈</span></span><br><span class=\"line\"><span class=\"built_in\">stack</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; str_stk;</span><br><span class=\"line\"><span class=\"comment\">// str_stk2在vector上实现，初始化时保存svec的拷贝</span></span><br><span class=\"line\">stack&lt;string, vector&lt;string&gt;&gt; str_stk2(svec);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"栈适配器\"><a href=\"#栈适配器\" class=\"headerlink\" title=\"栈适配器\"></a>栈适配器</h5><p><code>stack</code>类型定义在<code>stack</code>头文件中。</p>\n<img src=\"/blog/2020/11/25/C-顺序容器/stack.png\" style=\"zoom:120%;\">\n\n<h5 id=\"队列适配器\"><a href=\"#队列适配器\" class=\"headerlink\" title=\"队列适配器\"></a>队列适配器</h5><p><code>queue</code>和<code>priority_queue</code>适配器定义在<code>queue</code>头文件中。</p>\n<img src=\"/blog/2020/11/25/C-顺序容器/queue.png\" style=\"zoom:120%;\">\n\n<img src=\"/blog/2020/11/25/C-顺序容器/queue1.png\" style=\"zoom:120%;\">\n\n","categories":["C++"]},{"title":"I/O控制（二）","url":"/blog/2021/02/02/I-O%E6%8E%A7%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>假脱机技术（SPOOLing技术）</li>\n<li>设备的分配与回收</li>\n<li>缓冲区管理</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"假脱机技术（SPOOLing技术）\"><a href=\"#假脱机技术（SPOOLing技术）\" class=\"headerlink\" title=\"假脱机技术（SPOOLing技术）\"></a>假脱机技术（SPOOLing技术）</h4><h5 id=\"什么是脱机技术\"><a href=\"#什么是脱机技术\" class=\"headerlink\" title=\"什么是脱机技术\"></a>什么是脱机技术</h5><p>脱离主机的控制进行输入/输出操作。</p>\n<h5 id=\"假脱机技术\"><a href=\"#假脱机技术\" class=\"headerlink\" title=\"假脱机技术\"></a>假脱机技术</h5><p>又称SPOOLing技术，使用软件方式模拟脱机技术。组成如下：</p>\n<img src=\"/blog/2021/02/02/I-O控制（二）/输入井和输出井.png\" style=\"zoom:80%;\">\n\n<p>输入进程模拟脱机输入时的外围控制机，在其控制下，输入缓冲区暂存从输入设备输入的数据，之后再转存到输入井中。</p>\n<p>输出进程模拟脱机输出时的外围控制机，在其控制下，输出缓冲区暂存从输出井送来的数据，之后再传送到输出设备上。</p>\n<p>输入缓冲区和输出缓冲区是在<strong>内存中</strong>的缓冲区。</p>\n<h4 id=\"设备的分配与回收\"><a href=\"#设备的分配与回收\" class=\"headerlink\" title=\"设备的分配与回收\"></a>设备的分配与回收</h4><p>设备可分为三种：独占设备、共享设备、虚拟设备。</p>\n<p>独占设备：一个时段只能分配给一个进程（如打印机）。</p>\n<p>共享设备：可同时分配给多个进程使用，宏观同时使用设备，微观交替使用设备（如磁盘）。</p>\n<p>虚拟设备：采用SPOOLing技术将独占设备改造成虚拟的共享设备，可同时分配给多个进程（共享打印机）。</p>\n<h5 id=\"设备分配时应考虑因素\"><a href=\"#设备分配时应考虑因素\" class=\"headerlink\" title=\"设备分配时应考虑因素\"></a>设备分配时应考虑因素</h5><p>安全分配方式：为进程分配一个设备后将其阻塞，直到本次 I/O 完成后才将其唤醒。</p>\n<ul>\n<li>优点：不会死锁。</li>\n<li>缺点：同一进程 CPU 与 I/O 串行工作。</li>\n</ul>\n<p>不安全分配方式：进程发出 I/O 请求后，系统为其分配 I/O 设备，进程可继续执行，之后还可以发出新的 I/O 请求。只有某个 I/O 请求得不到满足时才将其阻塞。</p>\n<ul>\n<li>优点：进程的计算任务和 I/O 任务可并行处理。</li>\n<li>缺点：可能发生死锁。</li>\n</ul>\n<h5 id=\"静态-动态分配\"><a href=\"#静态-动态分配\" class=\"headerlink\" title=\"静态/动态分配\"></a>静态/动态分配</h5><p>静态分配：进程运行前为其分配所需资源，运行结束后归还资源。</p>\n<p>动态分配：进程运行过程中动态申请设备资源。</p>\n<h5 id=\"设备分配管理中的数据结构\"><a href=\"#设备分配管理中的数据结构\" class=\"headerlink\" title=\"设备分配管理中的数据结构\"></a>设备分配管理中的数据结构</h5><p>设备、控制器、通道之间的关系：</p>\n<img src=\"/blog/2021/02/02/I-O控制（二）/设备、控制器、通道关系.png\" style=\"zoom:80%;\">\n\n<p>一个通道可以控制多个设备控制器，每个设备控制器可控制多个设备。</p>\n<h6 id=\"设备控制表（DCT）\"><a href=\"#设备控制表（DCT）\" class=\"headerlink\" title=\"设备控制表（DCT）\"></a>设备控制表（DCT）</h6><p>系统为每个设备配置一张 DCT，用于记录设备情况。</p>\n<img src=\"/blog/2021/02/02/I-O控制（二）/DCT.PNG\" style=\"zoom:80%;\">\n\n<h6 id=\"控制器控制表（COCT）\"><a href=\"#控制器控制表（COCT）\" class=\"headerlink\" title=\"控制器控制表（COCT）\"></a>控制器控制表（COCT）</h6><p>每个设备控制器都会对应一张 COCT，操作系统根据 COCT 的信息对控制器进行操作和管理。</p>\n<img src=\"/blog/2021/02/02/I-O控制（二）/COCT.PNG\" style=\"zoom:80%;\">\n\n<h6 id=\"通道控制表（CHCT）\"><a href=\"#通道控制表（CHCT）\" class=\"headerlink\" title=\"通道控制表（CHCT）\"></a>通道控制表（CHCT）</h6><p>每个通道都会对应一张 CHCT，操作系统根据 CHCT 的信息对通道进行操作和管理。</p>\n<img src=\"/blog/2021/02/02/I-O控制（二）/CHCT.PNG\" style=\"zoom:80%;\">\n\n<h6 id=\"系统设备表（SDT）\"><a href=\"#系统设备表（SDT）\" class=\"headerlink\" title=\"系统设备表（SDT）\"></a>系统设备表（SDT）</h6><p>记录了系统中全部设备的情况，每个设备对应一个表目。</p>\n<img src=\"/blog/2021/02/02/I-O控制（二）/SDT.PNG\" style=\"zoom:80%;\">\n\n<h5 id=\"设备分配的步骤\"><a href=\"#设备分配的步骤\" class=\"headerlink\" title=\"设备分配的步骤\"></a>设备分配的步骤</h5><ol>\n<li>根据进程请求的逻辑设备名查找 SDT (注：用户变成时提供的逻辑设备名就是“设备类型”)。</li>\n<li>根据 SDT 找到用户进程<strong>指定类型且空闲的设备</strong>，将其分配给该进程。操作系统在逻辑设备表（LUT）中新增一个表项。</li>\n<li>根据 DCT 找到 COCT，若控制器忙碌则将进程 PCB 挂到控制器等待队列中，不忙碌则将控制器分配给进程。</li>\n<li>根据 COCT 找到 CHCT ，若通道忙碌则将进程 PCB 挂到通道等待队列中，不忙碌则将通道分配给进<br>程。</li>\n</ol>\n<img src=\"/blog/2021/02/02/I-O控制（二）/设备分配的步骤.PNG\" style=\"zoom:80%;\">\n\n<p><strong>逻辑设备表（LUT）</strong></p>\n<p>建立逻辑设备名与物理设备名之间的映射关系。</p>\n<img src=\"/blog/2021/02/02/I-O控制（二）/LUT.PNG\">\n\n<h5 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/02/02/I-O控制（二）/设备的分配与回收小结.PNG\">\n\n<h4 id=\"缓冲区管理\"><a href=\"#缓冲区管理\" class=\"headerlink\" title=\"缓冲区管理\"></a>缓冲区管理</h4><h5 id=\"缓冲区概念及作用\"><a href=\"#缓冲区概念及作用\" class=\"headerlink\" title=\"缓冲区概念及作用\"></a>缓冲区概念及作用</h5><p>缓冲区：一个存储区域，可以由专门的硬件组成，也可利用内存作为缓冲区，一般使用内存作为缓冲区。</p>\n<p>作用：</p>\n<ol>\n<li>缓和 CPU 与 I/O 设备之间速度不匹配的矛盾。</li>\n<li>减少对 CPU 的中断频率，放宽对 CPU 中断响应时间的限制。</li>\n<li>解决数据粒度不匹配的问题（输出进程每次生成一块数据，而 I/O 设备每次只能输出一个字符）。</li>\n<li>提高 CPU 与 I/O 设备之间的并行性。</li>\n</ol>\n<h5 id=\"单缓冲\"><a href=\"#单缓冲\" class=\"headerlink\" title=\"单缓冲\"></a>单缓冲</h5><p>操作系统在主存中为其分配一个缓冲区（一般为一个块）。</p>\n<p><strong>缓冲区写满之后才能读，读空之后才能写</strong>。</p>\n<p>处理一块数据平均耗时：$MAX(C,T) + M$。字符意思如下：</p>\n<img src=\"/blog/2021/02/02/I-O控制（二）/单缓冲区.PNG\" style=\"zoom:80%;\">\n\n<h5 id=\"双缓冲\"><a href=\"#双缓冲\" class=\"headerlink\" title=\"双缓冲\"></a>双缓冲</h5><p>操作系统在主存中为其分配两个缓冲区。</p>\n<img src=\"/blog/2021/02/02/I-O控制（二）/双缓冲区.PNG\" style=\"zoom:80%;\">\n\n<p>处理一块数据平均耗时：$MAX(T,C+M)$。</p>\n<h5 id=\"使用单-双缓冲在通信时的区别\"><a href=\"#使用单-双缓冲在通信时的区别\" class=\"headerlink\" title=\"使用单/双缓冲在通信时的区别\"></a>使用单/双缓冲在通信时的区别</h5><p>单缓冲区同一时间只能单向传输，而双缓冲区同一时刻可以实现双向的数据传输。</p>\n<h5 id=\"循环缓冲区\"><a href=\"#循环缓冲区\" class=\"headerlink\" title=\"循环缓冲区\"></a>循环缓冲区</h5><p>将多个大小相等的缓冲区链接成一个<strong>循环队列</strong>。</p>\n<img src=\"/blog/2021/02/02/I-O控制（二）/循环缓冲区.PNG\" style=\"zoom:80%;\">\n\n<h5 id=\"缓冲池\"><a href=\"#缓冲池\" class=\"headerlink\" title=\"缓冲池\"></a>缓冲池</h5><p>缓冲池由系统中共用的缓冲区组成。这些缓冲区按使用状况可分为：空缓冲队列、装满输入数据的缓冲队列（输出队列）、装满输出数据的缓冲队列（输出队列）。</p>\n<img src=\"/blog/2021/02/02/I-O控制（二）/缓冲池.PNG\" style=\"zoom:80%;\">\n\n<p>hin：用于收容输入数据的工作缓冲区。</p>\n<p>sin：用于提取收入数据的工作缓冲区。</p>\n<p>hout：用于收容输出数据的工作缓冲区。</p>\n<p>sout：用于提取输出数据的工作缓冲区。</p>\n<img src=\"/blog/2021/02/02/I-O控制（二）/队列.PNG\" style=\"zoom:80%;\">\n\n<ol>\n<li>输入进程请求输入数据：</li>\n</ol>\n<img src=\"/blog/2021/02/02/I-O控制（二）/输入进程请求输入数据.PNG\" style=\"zoom:80%;\">\n\n<ol start=\"2\">\n<li>计算进程想要取得一块输入数据：</li>\n</ol>\n<img src=\"/blog/2021/02/02/I-O控制（二）/计算进程想要取得一块输入数据.PNG\" style=\"zoom:80%;\">\n\n<ol start=\"3\">\n<li>计算进程想要将准备好的数据冲入缓冲区：</li>\n</ol>\n<img src=\"/blog/2021/02/02/I-O控制（二）/计算进程想要将准备好的数据冲入缓冲区.PNG\" style=\"zoom:80%;\">\n\n<ol start=\"4\">\n<li>输出进程请求输出数据：</li>\n</ol>\n<img src=\"/blog/2021/02/02/I-O控制（二）/输出进程请求输出数据.PNG\" style=\"zoom:80%;\">\n\n<h5 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/02/02/I-O控制（二）/缓冲区管理小结.PNG\">","categories":["操作系统"]},{"title":"LeetCode103-二叉树的锯齿形层序遍历","url":"/blog/2020/12/22/LeetCode103-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p>\n<a id=\"more\"></a>\n\n<p>例如：<br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p>\n<img src=\"/blog/2020/12/22/LeetCode103-二叉树的锯齿形层序遍历/103.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>这道题和二叉树的层序遍历很相似，无非就是遍历完每一层需要改变一次方向，使用一个标志位标记从前往后或者从后往前遍历。可以使用双端队列，根据标志位决定从队列的那一头开始遍历。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">zigzagLevelOrder</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!root) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; res;</span><br><span class=\"line\">        <span class=\"built_in\">deque</span>&lt;TreeNode*&gt; deq;</span><br><span class=\"line\">        deq.push_back(root);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dir = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!deq.empty())&#123;</span><br><span class=\"line\">            <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; buf;</span><br><span class=\"line\">            <span class=\"comment\">// 前往后</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dir == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                dir = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> n = deq.size();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">                    TreeNode* tmp = deq.front();</span><br><span class=\"line\">                    buf.push_back(tmp-&gt;val);</span><br><span class=\"line\">                    <span class=\"comment\">// 前向时需要先将左边的点入队，保证下次遍历的顺序正确</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(tmp-&gt;left) deq.push_back(tmp-&gt;left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(tmp-&gt;right) deq.push_back(tmp-&gt;right);</span><br><span class=\"line\">                    deq.pop_front();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res.push_back(buf);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 后往前</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dir = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> n = deq.size();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">                    TreeNode* tmp = deq.back();</span><br><span class=\"line\">                    buf.push_back(tmp-&gt;val);</span><br><span class=\"line\">                    <span class=\"comment\">// 后向时需要先将右边的点入队，保证下次遍历的顺序正确</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(tmp-&gt;right) deq.push_front(tmp-&gt;right);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(tmp-&gt;left) deq.push_front(tmp-&gt;left);</span><br><span class=\"line\">                    deq.pop_back();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res.push_back(buf);</span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h4><p><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">二叉树的层序遍历</a>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">levelOrder</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!root) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; res;</span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;TreeNode*&gt; q;</span><br><span class=\"line\">        q.push(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = q.size();</span><br><span class=\"line\">            <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; buf;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">                TreeNode *node = q.front();</span><br><span class=\"line\">                q.pop();</span><br><span class=\"line\">                buf.push_back(node-&gt;val);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node-&gt;left) q.push(node-&gt;left);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node-&gt;right) q.push(node-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.push_back(buf);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["二叉树"]},{"title":"LeetCode1046-最后一块石头的重量","url":"/blog/2020/12/30/LeetCode1046-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>有一堆石头，每块石头的重量都是正整数。</p>\n<p>每一回合，从中选出两块 最重的 石头，然后将它们一起粉碎。假设石头的重量分别为 <code>x</code> 和 <code>y</code>，且 <code>x &lt;= y</code>。那么粉碎的可能结果如下：</p>\n<p>如果 <code>x == y</code>，那么两块石头都会被完全粉碎；<br>如果 <code>x != y</code>，那么重量为 <code>x</code> 的石头将会完全粉碎，而重量为 <code>y</code> 的石头新重量为 <code>y-x</code>。<br>最后，最多只会剩下一块石头。返回此石头的重量。如果没有石头剩下，就返回 <code>0</code>。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"思路及代码\"><a href=\"#思路及代码\" class=\"headerlink\" title=\"思路及代码\"></a>思路及代码</h4><h5 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h5><h6 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h6><p>每次寻找最大的两个石头重量进行碰撞，直到链表为空或只剩下一个元素：</p>\n<h6 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastStoneWeight</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stones.size() &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> stones.empty() ? <span class=\"number\">0</span> : stones[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">li</span><span class=\"params\">(stones.begin(), stones.end())</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!li.empty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it1 = max_element(li.begin(), li.end());</span><br><span class=\"line\">            <span class=\"keyword\">int</span> val1 = *it1;</span><br><span class=\"line\">            li.erase(it1);</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it2 = max_element(li.begin(), li.end());</span><br><span class=\"line\">            <span class=\"keyword\">int</span> val2 = *it2;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val2 != val1)</span><br><span class=\"line\">                *it2 = <span class=\"built_in\">abs</span>(val1 - val2);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> li.erase(it2);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(li.size() == <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> li.empty() ? <span class=\"number\">0</span> : *li.begin();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h5><h6 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h6><p>大顶堆，每次前两个出队元素就是石头中重量最大的两个。</p>\n<h6 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastStoneWeight</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class=\"line\">        priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt;&gt; p_q(stones.begin(), stones.end());</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!p_q.empty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p_q.size() == <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v1 = p_q.top();</span><br><span class=\"line\">            p_q.pop();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v2 = p_q.top();</span><br><span class=\"line\">            p_q.pop();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = <span class=\"built_in\">abs</span>(v1 - v2);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != <span class=\"number\">0</span>) p_q.push(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p_q.empty() ? <span class=\"number\">0</span> : p_q.top();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["链表","优先队列"]},{"title":"LeetCode1202-交换字符串中的元素","url":"/blog/2021/01/11/LeetCode1202-%E4%BA%A4%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给你一个字符串 <code>s</code>，以及该字符串中的一些「索引对」数组 <code>pairs</code>，其中 <code>pairs[i] = [a, b]</code> 表示字符串中的两个索引（编号从 0 开始）。</p>\n<p>你可以 <strong>任意多次交换</strong> 在 <code>pairs</code> 中任意一对索引处的字符。</p>\n<p>返回在经过若干次交换后，<code>s</code> 可以变成的按字典序最小的字符串。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/11/LeetCode1202-交换字符串中的元素/1202.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p><del>不看提示我都没想到用并查集去解决这个问题</del>。</p>\n<p>以示例三为例：<code>s = &quot;cba&quot;, pairs = [[0,1],[1,2]]</code>，输出为 <code>&quot;abc&quot;</code>。可以看出 <code>pairs</code> 中 <code>0,1,2</code> 三个点是相连的。相连的点在 <code>s</code> 中对应的元素 <code>&quot;cba&quot;</code> 可以任意排序，我们需要让这些元素的组合字典序最小，可以得到 <code>&quot;abc&quot;</code>。</p>\n<p>将上述例子扩充，<code>s = &quot;cbafd&quot;, pairs = [[0,1],[1,2],[4,3]]</code>，输出为 <code>&quot;abcdf&quot;</code>。其中 <code>0,1,2</code> 相连，<code>4,3</code> 相连，分别将两个集合中对应的位置<strong>升序排序</strong>得到 <code>0,1,2</code> 和 <code>3,4</code>，再将 <code>s</code> 中对应位置元素取出来按照<strong>字典序排序</strong>，再根据对应位置修改 <code>s</code> 中的元素。所以<strong>一共需要进行两次排序</strong>。</p>\n<hr>\n<p>我们将 <code>pairs</code> 中的<strong>每一个</strong>元素想象成一个孤立的点，对于 <code>pairs</code> 中的<strong>每一对</strong>元素，表示两个点相连，所有相连的点构成不同的集合（只需要知道是否相连，不需要知道如何相连），所以使用并查集即可。</p>\n<p><strong>算法如下</strong>：</p>\n<ul>\n<li>将 <code>pairs</code> 中的<strong>每一对</strong>元素进行 <code>union</code> 操作，再将它们根据共同祖先分为<strong>若干集合</strong>。</li>\n<li>将每个集合中的序列<strong>升序排列</strong>，再找到 <code>s</code> 中对应的元素，将这些元素按<strong>字典序</strong>排序。</li>\n<li>将按字典序排列的元素按照集合中序列的顺序依次修改 <code>s</code>。</li>\n</ul>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">unionFind</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; parent;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; rank;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count; <span class=\"comment\">// 未用到</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unionFind(<span class=\"built_in\">string</span> &amp;s)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;count = <span class=\"number\">0</span>; <span class=\"comment\">// 未用到</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            parent.push_back(i);</span><br><span class=\"line\">            rank.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p == parent[p] ? p : parent[p] = find(parent[p]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionElem</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRoot == qRoot) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rank[pRoot] &lt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank[qRoot] &lt; rank[pRoot])&#123;</span><br><span class=\"line\">            parent[qRoot] = pRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            parent[qRoot] = pRoot;</span><br><span class=\"line\">            rank[pRoot]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">smallestStringWithSwaps</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; pairs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pairs.size() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        <span class=\"function\">unionFind <span class=\"title\">uf</span><span class=\"params\">(s)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pairs.size(); ++i)&#123;</span><br><span class=\"line\">            uf.unionElem(pairs[i][<span class=\"number\">0</span>], pairs[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> rootIdx = <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;(s.size());</span><br><span class=\"line\">        <span class=\"comment\">// 如果祖先相同，代表在同一个集合中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> root = uf.find(i);</span><br><span class=\"line\">            rootIdx[root].push_back(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; rootIdx.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rootIdx[i].empty()) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 将同一个祖先的序列升序排列</span></span><br><span class=\"line\">            sort(rootIdx[i].begin(), rootIdx[i].end());</span><br><span class=\"line\">            <span class=\"built_in\">string</span> buf;</span><br><span class=\"line\">            <span class=\"comment\">// 根据排好序的序列取出s中的元素</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;v : rootIdx[i])&#123;</span><br><span class=\"line\">                buf += s[v];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 再将取出的元素按照字典序排列</span></span><br><span class=\"line\">            sort(buf.begin(), buf.end());</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 将排好序的字符串根据排好序的序列修改s中相应的位置</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;v : rootIdx[i])&#123;</span><br><span class=\"line\">                s[v] = buf[j++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["并查集"]},{"title":"LeetCode12-整数转罗马数字","url":"/blog/2020/12/25/LeetCode12-%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>罗马数字包含以下七种字符： <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>\n<img src=\"/blog/2020/12/25/LeetCode12-整数转罗马数字/12.png\">\n\n<p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p>\n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>\n<ul>\n<li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li>\n<li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li>\n<li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li>\n</ul>\n<p>给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>主要是处理那些特殊的样例，结合代码，对于示例中的1994，去掉1000后还剩下994，这个900的表示是特殊的，所以如果当前 $num$ 范围是900-999，就需要加上”CM”；$num$ 还剩下94，这个90也是特殊的，所以如果当前 $num$ 范围是90-99，就需要加上”XC”；最后剩下4，所以加上”IV”，得到结果”MCMXCIV”。</p>\n<p><strong>需要注意<code>if</code>语句的顺序不能改变，就像状态机一样，执行完一个状态后才能执行下一个状态</strong>。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">intToRoman</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 前面几行针对特定案例，注释了也不影响</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num == <span class=\"number\">4</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"IV\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num == <span class=\"number\">9</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"IX\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num == <span class=\"number\">40</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"XL\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num == <span class=\"number\">90</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"XC\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num == <span class=\"number\">400</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"CD\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num == <span class=\"number\">900</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"CM\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> res;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(num)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num / <span class=\"number\">1000</span> != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                res += <span class=\"built_in\">string</span>(num / <span class=\"number\">1000</span>, <span class=\"string\">'M'</span>);</span><br><span class=\"line\">                num -= num / <span class=\"number\">1000</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num &gt;= <span class=\"number\">900</span> &amp;&amp; num &lt; <span class=\"number\">1000</span>)&#123;</span><br><span class=\"line\">                res += <span class=\"string\">\"CM\"</span>;</span><br><span class=\"line\">                num -= <span class=\"number\">900</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num / <span class=\"number\">500</span> != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                res += <span class=\"built_in\">string</span>(num / <span class=\"number\">500</span>, <span class=\"string\">'D'</span>);</span><br><span class=\"line\">                num -= num / <span class=\"number\">500</span> * <span class=\"number\">500</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num &gt;= <span class=\"number\">400</span> &amp;&amp; num &lt; <span class=\"number\">500</span>)&#123;</span><br><span class=\"line\">                res += <span class=\"string\">\"CD\"</span>;</span><br><span class=\"line\">                num -= <span class=\"number\">400</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num / <span class=\"number\">100</span> != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                res += <span class=\"built_in\">string</span>(num / <span class=\"number\">100</span>, <span class=\"string\">'C'</span>);</span><br><span class=\"line\">                num -= num / <span class=\"number\">100</span> * <span class=\"number\">100</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num &gt;= <span class=\"number\">90</span> &amp;&amp; num &lt; <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">                res += <span class=\"string\">\"XC\"</span>;</span><br><span class=\"line\">                num -= <span class=\"number\">90</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num / <span class=\"number\">50</span> != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                res += <span class=\"built_in\">string</span>(num / <span class=\"number\">50</span>, <span class=\"string\">'L'</span>);</span><br><span class=\"line\">                num -= num / <span class=\"number\">50</span> * <span class=\"number\">50</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num &gt;= <span class=\"number\">40</span> &amp;&amp; num &lt; <span class=\"number\">50</span>)&#123;</span><br><span class=\"line\">                res += <span class=\"string\">\"XL\"</span>;</span><br><span class=\"line\">                num -= <span class=\"number\">40</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num / <span class=\"number\">10</span> != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                res += <span class=\"built_in\">string</span>(num / <span class=\"number\">10</span>, <span class=\"string\">'X'</span>);</span><br><span class=\"line\">                num -= num / <span class=\"number\">10</span> * <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num == <span class=\"number\">9</span>)&#123;</span><br><span class=\"line\">                res += <span class=\"string\">\"IX\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num / <span class=\"number\">5</span> != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                res += <span class=\"built_in\">string</span>(num / <span class=\"number\">5</span>, <span class=\"string\">'V'</span>);</span><br><span class=\"line\">                num -= num / <span class=\"number\">5</span> * <span class=\"number\">5</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num == <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                res += <span class=\"string\">\"IV\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num / <span class=\"number\">1</span> != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                res += <span class=\"built_in\">string</span>(num / <span class=\"number\">1</span>, <span class=\"string\">'I'</span>);</span><br><span class=\"line\">                num = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["贪心算法","状态机"]},{"title":"LeetCode106-从中序与后序遍历序列构造二叉树","url":"/blog/2020/09/27/LeetCode106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>根据一棵树的中序遍历与后序遍历构造二叉树。</p>\n<p><strong>注意:</strong><br>你可以假设树中没有重复的元素。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/09/27/LeetCode106-从中序与后序遍历序列构造二叉树/示例.png\">\n\n\n\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>对于二叉树的题，大部分都是通过递归来解决的，此题也不例外，需要注意的是，要充分利用二叉树中序遍历和后序遍历的性质。</p>\n<ul>\n<li>中序遍历二叉树(左子树—根节点—右子树)，根节点的左边是左子树，右边是右子树；</li>\n<li>后序遍历二叉树(左子树—右子树—根节点)，根节点是最后输出的。</li>\n</ul>\n<p>在后序遍历数组中找到根节点之后，再从中序遍历数组中搜索根节点的左边，由此坐标将数组分开，分别就是当前根节点下的左子树和右子树：</p>\n<img src=\"/blog/2020/09/27/LeetCode106-从中序与后序遍历序列构造二叉树/pic1.png\">\n\n<p>上图中<code>inorder</code>数组中，3是在<code>postorder</code>找到的根节点，由此节点分开，<code>inorder</code>数组中绿色部分是左子树，黄色部分是右子树，在<code>posorder</code>数组中也是一样的。</p>\n<ul>\n<li>定义<code>inorder</code>数组中3的位置为<strong>rootIn</strong>，数组起始位置为<strong>iStart</strong>，结束位置为<strong>iEnd</strong>；</li>\n<li>定义<code>postorder</code>数组数组起始位置为<strong>pStart</strong>，结束位置为<strong>pEnd</strong>；</li>\n</ul>\n<p>根据以上定义，<code>inorder</code>数组中左子树起止位置为<code>iStart-&gt;rootIn-1</code>，右子树起止位置为<code>rootIn+1-&gt;iEnd</code>；<code>postorder</code>数组中左子树起止位置为<code>pStart-&gt;pStart+rootIn-iStart-1</code>，右子树起止位置为<code>pStart+rootIn-iStart-&gt;pEnd-1</code>，图来自leetcode题解(<a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/solution/tu-jie-gou-zao-er-cha-shu-wei-wan-dai-xu-by-user72/)%EF%BC%9A\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/solution/tu-jie-gou-zao-er-cha-shu-wei-wan-dai-xu-by-user72/)：</a></p>\n<img src=\"/blog/2020/09/27/LeetCode106-从中序与后序遍历序列构造二叉树/pic2.png\">\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; <span class=\"built_in\">map</span>;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; post;</span><br><span class=\"line\">    <span class=\"function\">TreeNode* <span class=\"title\">buildTree</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; inorder, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 使用一个map记录中序遍历数值的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;num : inorder)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">map</span>[num] = cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        post = postorder;</span><br><span class=\"line\">        TreeNode *node = dfs(<span class=\"number\">0</span>, inorder.size() - <span class=\"number\">1</span>, <span class=\"number\">0</span>, postorder.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">TreeNode* <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> iStart, <span class=\"keyword\">int</span> iEnd, <span class=\"keyword\">int</span> pStart, <span class=\"keyword\">int</span> pEnd)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(iStart &gt; iEnd || pStart &gt; pEnd) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> root = post[pEnd];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rootIn = <span class=\"built_in\">map</span>[root];</span><br><span class=\"line\">        TreeNode *node = <span class=\"keyword\">new</span> TreeNode(root);</span><br><span class=\"line\">        node-&gt;left = dfs(iStart, rootIn - <span class=\"number\">1</span>, pStart, pStart + rootIn - iStart - <span class=\"number\">1</span>);</span><br><span class=\"line\">        node-&gt;right = dfs(rootIn + <span class=\"number\">1</span>, iEnd, pStart + rootIn - iStart, pEnd - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/solution/tu-jie-gou-zao-er-cha-shu-wei-wan-dai-xu-by-user72/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/solution/tu-jie-gou-zao-er-cha-shu-wei-wan-dai-xu-by-user72/</a></p>\n","categories":["LeetCode"],"tags":["二叉树","递归"]},{"title":"LCP19-秋叶收藏集","url":"/blog/2020/10/11/LCP19-%E7%A7%8B%E5%8F%B6%E6%94%B6%E8%97%8F%E9%9B%86/","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>小扣出去秋游，途中收集了一些红叶和黄叶，他利用这些叶子初步整理了一份秋叶收藏集 leaves， 字符串 leaves 仅包含小写字符 r 和 y， 其中字符 r 表示一片红叶，字符 y 表示一片黄叶。<br>出于美观整齐的考虑，小扣想要将收藏集中树叶的排列调整成「红、黄、红」三部分。每部分树叶数量可以不相等，但均需大于等于 1。每次调整操作，小扣可以将一片红叶替换成黄叶或者将一片黄叶替换成红叶。请问小扣最少需要多少次调整操作才能将秋叶收藏集调整完毕。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/10/11/LCP19-秋叶收藏集/image-20201011112801516.png\" style=\"zoom:80%;\">\n\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>用三个状态来标记其中的每一个部分，0和2表示前面和后面的红色，1表示中间的黄色，于是三部分结构为「0、1、2」。</p>\n<p>定义<code>dp[i][j]</code>表示：对**[0..i]<strong>片叶子进行调整，并且第</strong>i<strong>片叶子处于</strong>j**状态的最小操作数，所以有下面三种情况：</p>\n<ol>\n<li>当<strong>j = 0</strong>时，第<strong>i</strong>片叶子应为红色，并且第<strong>i - 1</strong>片叶子也应该处于<strong>j = 0</strong>的状态：</li>\n</ol>\n<p>$$<br>dp[i][0] = dp[i-1][0] + isYellow(i)<br>$$</p>\n<p>$$<br>isYellow(i)=<br>\\begin{cases}<br>1&amp; \\text{leaves[i] = ‘y’}\\\\<br>0&amp; \\text{leaves[i] = ‘r’}<br>\\end{cases}<br>$$</p>\n<p>如果是黄色，那么需要进行一次操作修改颜色：</p>\n<ol start=\"2\">\n<li>当<strong>j = 1</strong>时，第<strong>i</strong>片叶子应为黄色，第<strong>i - 1</strong>片叶子可以处于<strong>j = 0</strong>或<strong>j = 1</strong>的状态，所以取其中的较小值：</li>\n</ol>\n<p>$$<br>dp[i][1] = min(dp[i-1][1], dp[i-1][0]) + isRed(i)<br>$$</p>\n<p>$$<br>isRed(i)=<br>\\begin{cases}<br>1&amp; \\text{leaves[i] = ‘r’}\\\\<br>0&amp; \\text{leaves[i] = ‘y’}<br>\\end{cases}<br>$$</p>\n<p>​        如果是红色，那么需要进行一次操作修改颜色：</p>\n<ol start=\"3\">\n<li>当<strong>j = 2</strong>时，第<strong>i</strong>片叶子应为红色，第<strong>i - 1</strong>片叶子可以处于<strong>j = 2</strong>或<strong>j = 1</strong>的状态（不能取<strong>j = 0</strong>的状态，因为每种状态至少含有一片叶子，中间必须存在有黄色叶子），再取其中的较小值：</li>\n</ol>\n<p>$$<br>dp[i][2] = min(dp[i-1][2], dp[i-1][1]) + isYellow(i)<br>$$</p>\n<p>如果是黄色，那么需要进行一次操作修改颜色，公式同1</p>\n<p>最终答案为<code>dp[n-1][2]</code>。</p>\n<p><strong><em>初始化条件：</em></strong></p>\n<ol>\n<li>要保证每种状态都有叶子，则叶子数量应大于等于状态数量，对于<code>dp[i][j]</code>，有<strong>i &gt;= j</strong>；如果<strong>i &lt; j</strong>，那么可以令<code>dp[i][j] = INT_MAX</code>；</li>\n<li>对于<strong>i = 0</strong>，<strong>j</strong>也必须为0，于是有<code>dp[0][0] = isYellow(0)</code>。</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">minimumOperations</span><span class=\"params\">(<span class=\"built_in\">string</span> leaves)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">dp</span><span class=\"params\">(leaves.size(), <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">3</span>))</span></span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = leaves[<span class=\"number\">0</span>] == <span class=\"string\">'y'</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 不合要求的,实际上也不会遇到dp[0][2]这种情况</span></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = dp[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = dp[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = INT_MAX;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; leaves.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> isYellow = leaves[i] == <span class=\"string\">'y'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> isRed = leaves[i] == <span class=\"string\">'r'</span>;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + isYellow;</span><br><span class=\"line\">            dp[i][<span class=\"number\">1</span>] = min(dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>]) + isRed;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">2</span>) dp[i][<span class=\"number\">2</span>] = min(dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">2</span>]) + isYellow;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[leaves.size() - <span class=\"number\">1</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以优化空间，使用3个变量来代替状态转移数组：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">minimumOperations</span><span class=\"params\">(<span class=\"built_in\">string</span> leaves)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = leaves.size();</span><br><span class=\"line\">        <span class=\"comment\">// dp[0][0]</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = leaves[<span class=\"number\">0</span>] == <span class=\"string\">'y'</span>;</span><br><span class=\"line\">        <span class=\"comment\">// dp[0][1]</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = INT_MAX;</span><br><span class=\"line\">        <span class=\"comment\">// dp[1][2]</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> last = INT_MAX;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化转移变量</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> start2, mid2, last2 = INT_MAX, red = <span class=\"number\">0</span>, yellow = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            red = leaves[i] == <span class=\"string\">'r'</span>;</span><br><span class=\"line\">            yellow = leaves[i] == <span class=\"string\">'y'</span>;</span><br><span class=\"line\">            start2 = start + yellow;</span><br><span class=\"line\">            mid2 = min(start, mid) + red;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">2</span>) last2 = min(mid, last) + yellow;</span><br><span class=\"line\"></span><br><span class=\"line\">            start = start2;</span><br><span class=\"line\">            mid = mid2;</span><br><span class=\"line\">            last = last2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><a href=\"https://leetcode-cn.com/problems/UlBDOe/solution/qiu-xie-shou-cang-ji-by-leetcode-solution/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/UlBDOe/solution/qiu-xie-shou-cang-ji-by-leetcode-solution/</a></p>\n","categories":["LeetCode"],"tags":["动态规划"]},{"title":"LeetCode1203-项目管理","url":"/blog/2021/01/12/LeetCode1203-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>公司共有 <code>n</code> 个项目和  <code>m</code> 个小组，每个项目要不无人接手，要不就由 <code>m</code> 个小组之一负责。</p>\n<p><code>group[i]</code> 表示第 <code>i</code> 个项目所属的小组，如果这个项目目前无人接手，那么 <code>group[i]</code> 就等于 <code>-1</code>。（项目和小组都是从零开始编号的）小组可能存在没有接手任何项目的情况。</p>\n<p>请你帮忙按要求安排这些项目的进度，并返回排序后的项目列表：</p>\n<p>同一小组的项目，排序后在列表中彼此相邻。<br>项目之间存在一定的依赖关系，我们用一个列表 <code>beforeItems</code> 来表示，其中 <code>beforeItems[i]</code> 表示在进行第 <code>i</code> 个项目前（位于第 <code>i</code> 个项目左侧）应该完成的所有项目。<br>如果存在多个解决方案，只需要返回其中任意一个即可。如果没有合适的解决方案，就请返回一个 <strong>空列表</strong> 。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/12/LeetCode1203-项目管理/1203.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>这道题是真的难，看了别人的题解才勉强写出来。</p>\n<h5 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h5><p>在有向无环图（DAG）问题中，如果节点之间含有<strong>依赖关系</strong>，比如要完成 <code>B</code> 工作，必须先完成 <code>A</code> 工作，考虑进行<strong>拓扑排序</strong>，有关知识点参考<a href=\"https://www.cnblogs.com/bigsai/p/11489260.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p><strong>C++模板</strong>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 图，节点入度，节点编号</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">topSort</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;G, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;inDegree, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;id)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;i : id)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(inDegree[i] == <span class=\"number\">0</span>) q.push(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> times = <span class=\"number\">0</span>; <span class=\"comment\">// 记录已经出队多少个点，小于节点数说明有环</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; afterSort;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 取出第一个入度为0的点</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = q.front();</span><br><span class=\"line\">        afterSort.push_back(cur);</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        times++;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历图</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[cur].size(); ++i)&#123;</span><br><span class=\"line\">            inDegree[G[cur][i]]--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(inDegree[G[cur][i]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                q.push(G[cur][i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(times &lt; id.size()) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> afterSort;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关于本题\"><a href=\"#关于本题\" class=\"headerlink\" title=\"关于本题\"></a>关于本题</h5><p>从宏观来看，本题要求同一小组所处理的项目是相邻的，<strong>小组与小组之间</strong>是有依赖关系的，根据 <code>Before</code> 得到。同时，<strong>项目与项目之间</strong>也是有依赖关系的，也是由 <code>Before</code> 得到。以示例1为例：</p>\n<ul>\n<li>项目与项目之间：对于小组0，3必须在6之后，4必须在3和6之后。</li>\n<li>小组与小组之间：小组-1中的1必须在小组0中的6之后。</li>\n</ul>\n<p>根据以上两条信息，可以先对所有小组进行拓扑排序，再对排好序的小组集合中的每个小组进行一个拓扑排序，就可以得到结果了。<strong>所有小组号为-1的表示当前未进行处理，可以给其分配一个新的组号，从m开始递增</strong>，只要拓扑排序时无环，所有的项目都会被处理掉。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">sortItems</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; group, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; beforeItems)</span></span>&#123;      </span><br><span class=\"line\">        <span class=\"comment\">// 将同一组的放一起</span></span><br><span class=\"line\">        <span class=\"comment\">// 比如3, 4, 6分组为0，则sameGroup[0] = &#123;3,4,6&#125;</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">sameGroup</span><span class=\"params\">(n + m)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> samegroup = m;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; group.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(group[i] == <span class=\"number\">-1</span>) group[i] = samegroup++;</span><br><span class=\"line\">            sameGroup[group[i]].push_back(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 最多会有n + m个小组（比如m=2, 所有分组都为-1）</span></span><br><span class=\"line\">        <span class=\"comment\">// n + m个小组的序号</span></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; groupid;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n + m; ++i) groupid.push_back(i);</span><br><span class=\"line\">        <span class=\"comment\">// 建立group图和item图及其入度</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">itemGraph</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">groupGraph</span><span class=\"params\">(n + m)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">itemIndegree</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">groupIndegree</span><span class=\"params\">(n + m, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; beforeItems.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> curId = group[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;item : beforeItems[i])&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果是同一个组，那么有item-&gt;i</span></span><br><span class=\"line\">                <span class=\"comment\">// i入度+1，同时节点item可达i</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(group[item] == curId)&#123; </span><br><span class=\"line\">                    itemIndegree[i]++;</span><br><span class=\"line\">                    itemGraph[item].push_back(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 不同组，有小组group[item]-&gt;curId</span></span><br><span class=\"line\">                <span class=\"comment\">// 小组curId入度+1，同时小组group[item]可达curId</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">                    groupIndegree[curId]++;</span><br><span class=\"line\">                    groupGraph[group[item]].push_back(curId);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 对group图进行topSort，得到小组之间的拓扑关系</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> outGroup = topSort(groupGraph, groupIndegree, groupid);</span><br><span class=\"line\">        <span class=\"comment\">// 对每个小组进行topSort，得到组内的拓扑关系</span></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ret;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;g : outGroup)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> id = sameGroup[g];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(id.empty()) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> res = topSort(itemGraph, itemIndegree, id);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(res.empty()) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;r : res)</span><br><span class=\"line\">                ret.push_back(r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 参数：图，入度，当前的节点集合</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">topSort</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;G, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;inDegree, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;i : id)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(inDegree[i] == <span class=\"number\">0</span>) q.push(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> times = <span class=\"number\">0</span>; <span class=\"comment\">// 记录已经出队多少个点，小于id数说明有环</span></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; afterSort;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 取出第一个入度为0的点</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> cur = q.front();</span><br><span class=\"line\">            afterSort.push_back(cur);</span><br><span class=\"line\">            q.pop();</span><br><span class=\"line\">            times++;</span><br><span class=\"line\">            <span class=\"comment\">// 遍历图</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[cur].size(); ++i)&#123;</span><br><span class=\"line\">                inDegree[G[cur][i]]--;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(inDegree[G[cur][i]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    q.push(G[cur][i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(times &lt; id.size()) <span class=\"keyword\">return</span> &#123;&#125;; <span class=\"comment\">// 有环，返回空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> afterSort;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>题解：<a href=\"https://leetcode-cn.com/problems/sort-items-by-groups-respecting-dependencies/solution/chao-xiang-xi-shuang-ceng-tuo-bu-pai-xu-5cyuc/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/sort-items-by-groups-respecting-dependencies/solution/chao-xiang-xi-shuang-ceng-tuo-bu-pai-xu-5cyuc/</a></p>\n<p>拓扑排序：<a href=\"https://www.cnblogs.com/bigsai/p/11489260.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/bigsai/p/11489260.html</a></p>\n","categories":["LeetCode"],"tags":["拓扑排序","图论"]},{"title":"LeetCode122-买卖股票的最佳时机II","url":"/blog/2020/12/28/LeetCode122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个数组，它的第 $i$ 个元素是一支给定股票第 $i$ 天的价格。</p>\n<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>\n<p><strong>注意</strong>：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/28/LeetCode122-买卖股票的最佳时机II/122.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><h5 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h5><h6 id=\"策略\"><a href=\"#策略\" class=\"headerlink\" title=\"策略\"></a>策略</h6><p>本题要求尽可能地完成更多地交易，所以可以使用贪心策略，在局部价格最低时买入，在局部价格最高时卖出，重复此操作直到最后一天，最后一天不持有股票时收益最大。</p>\n<ul>\n<li>局部最低：如果后一天价格低于前一天价格，更新局部最低，否则已经是局部最低</li>\n<li>局部最高：在持有股票后，当前价格的下一天价格降低，说明已经达到局部最高</li>\n</ul>\n<h6 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(prices[i] &lt;= val) &#123;</span><br><span class=\"line\">                val = prices[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i + <span class=\"number\">1</span> &lt; prices.size() &amp;&amp; prices[i + <span class=\"number\">1</span>] &lt; prices[i])&#123;</span><br><span class=\"line\">                    res += prices[i] - val;</span><br><span class=\"line\">                    val = prices[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 最后一天如果还持有股票应该卖出</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i + <span class=\"number\">1</span> == prices.size())&#123;</span><br><span class=\"line\">                    res += prices[i] - val;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"另一种策略\"><a href=\"#另一种策略\" class=\"headerlink\" title=\"另一种策略\"></a>另一种策略</h6><p>把股票的交易价格看成曲线图，找出图中上升的部分，即为交易获利。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; prices)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;prices.size()<span class=\"number\">-1</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(prices[i] &lt; prices[i + <span class=\"number\">1</span>])</span><br><span class=\"line\">            sum += prices[i + <span class=\"number\">1</span>] - prices[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h5><h6 id=\"定义dp数组\"><a href=\"#定义dp数组\" class=\"headerlink\" title=\"定义dp数组\"></a>定义dp数组</h6><p>每天的状态可以为持有股票或不持有股票，所以使用 $dp[i][0]$ 表示第 $i$ 天不持有股票时的最大收益； $dp[i][1]$ 表示第 $i$ 天持有股票时的最大收益。本题交易次数 <strong>+∞</strong> 。</p>\n<h6 id=\"状态转移方程\"><a href=\"#状态转移方程\" class=\"headerlink\" title=\"状态转移方程\"></a>状态转移方程</h6><ul>\n<li><p>如果当天未持有股票，那么前一天可以未持有股票或者前一天持有股票，当天卖出：<br>$$<br>dp[i][0]=max(dp[i-1][0],dp[i-1][1]+prices[i])<br>$$</p>\n</li>\n<li><p>如果当天持有股票，那么可以前一天持有股票或者前一天未持有股票，当天买入：<br>$$<br>dp[i][1]=max(dp[i-1][1],dp[i-1][0]-prices[i])<br>$$</p>\n</li>\n</ul>\n<h6 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h6><p>在第一天时，如果买入股票收益为$-prices[0]$ ，没有买入时收益为 $0$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">dp</span><span class=\"params\">(prices.size(), <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">2</span>))</span></span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>] + prices[i]);</span><br><span class=\"line\">            dp[i][<span class=\"number\">1</span>] = max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] - prices[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[prices.size() - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"空间优化\"><a href=\"#空间优化\" class=\"headerlink\" title=\"空间优化\"></a>空间优化</h6><p>由于当天的状态只依赖于前一天，所以用两个变量来表示当天持有或者未持有的最大收益：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> profit0 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> profit1 = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> new0 = max(profit0, profit1 + prices[i]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> new1 = max(profit1, profit0 - prices[i]);</span><br><span class=\"line\">            profit0 = new0;</span><br><span class=\"line\">            profit1 = new1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> profit0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>股票问题系列通解（转载翻译）：<a href=\"https://leetcode-cn.com/circle/article/qiAgHn/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/circle/article/qiAgHn/</a></p>\n<h4 id=\"Appendix\"><a href=\"#Appendix\" class=\"headerlink\" title=\"Appendix\"></a>Appendix</h4><p>结束时持有 0 份股票的收益一定大于持有 1 份股票的收益？</p>\n<p>如果结束时持有 1 份股票，可能有两种情况，一是在最后一天买入，二是在之前买入。 如果是第一种情况，则最后一天选择不买入，收益一定更高，因为不用付出购买股票的钱。 如果是第二种情况，则一定可以在最后一天卖出，卖出操作一定会增加收益。 因此，无论是哪种情况，持有 0 份股票的收益一定大于持有 1 份股票的收益。</p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/\">LeetCode121-买卖股票的最佳时机</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/\">LeetCode122-买卖股票的最佳时机II</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode123-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII/\">LeetCode122-买卖股票的最佳时机III</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode188-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV/\">LeetCode122-买卖股票的最佳时机IV</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode309-%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F/\">LeetCode309-最佳买卖股票时机含冷冻期</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/17/LeetCode714-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9/\">LeetCode714-买卖股票的最佳时机含手续费</a></p>\n","categories":["LeetCode"],"tags":["贪心算法","动态规划","股票问题"]},{"title":"LeetCode121-买卖股票的最佳时机","url":"/blog/2020/12/28/LeetCode121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个数组，它的第 $i$ 个元素是一支给定股票第 $i$ 天的价格。</p>\n<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</p>\n<p><strong>注意</strong>：你不能在买入股票前卖出股票。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/28/LeetCode121-买卖股票的最佳时机/121.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><h5 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h5><h6 id=\"策略\"><a href=\"#策略\" class=\"headerlink\" title=\"策略\"></a>策略</h6><p>从前往后遍历找到最小的价格买入，再往后找到最大的价格卖出即可。</p>\n<h6 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        st.push(prices[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(prices[i] &lt;= st.top())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                st.pop();</span><br><span class=\"line\">                st.push(prices[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> m = prices[i] - st.top();</span><br><span class=\"line\">                res = res &gt; m ? res : m;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h5><p>本题是<a href>LeetCode122-买卖股票的最佳时机II</a>的简化版，这道题与其最大的区别在于限制交易次数为 <strong>一次</strong>，找到最小的起点之后，再去找最大的终点即可。</p>\n<h6 id=\"定义dp数组\"><a href=\"#定义dp数组\" class=\"headerlink\" title=\"定义dp数组\"></a>定义dp数组</h6><p>$dp[i][0]$ 表示第 $i$ 天不持有股票可获得的最大收益。</p>\n<p>$dp[i][1]$ 表示第 $i$ 天持有股票可获得的最大收益。</p>\n<h6 id=\"状态转移方程\"><a href=\"#状态转移方程\" class=\"headerlink\" title=\"状态转移方程\"></a>状态转移方程</h6><ul>\n<li><p>如果当天未持有股票，那么前一天可以未持有股票或者前一天持有股票，当天卖出：<br>$$<br>dp[i][0]=max(dp[i-1][0],dp[i-1][1]+prices[i])<br>$$</p>\n</li>\n<li><p>如果当天持有股票，那么可以前一天持有股票或者前一天未持有股票，当天买入（只能持有一次，所以第一次持有时的利润为$-prices[i]$）：<br>$$<br>dp[i][1]=max(dp[i-1][1],-prices[i])<br>$$</p>\n</li>\n</ul>\n<h6 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h6><p>在第一天时，如果买入股票收益为$-prices[0]$ ，没有买入时收益为 $0$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">dp</span><span class=\"params\">(prices.size(), <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">2</span>))</span></span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>] + prices[i]);</span><br><span class=\"line\">            dp[i][<span class=\"number\">1</span>] = max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>], -prices[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[prices.size() - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"空间优化\"><a href=\"#空间优化\" class=\"headerlink\" title=\"空间优化\"></a>空间优化</h6><p>由于当天的状态只依赖于前一天，所以用两个变量来表示当天持有或者未持有的最大收益：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> profit0 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> profit1 = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> new0 = max(profit0, profit1 + prices[i]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> new1 = max(profit1, -prices[i]);</span><br><span class=\"line\">            profit0 = new0;</span><br><span class=\"line\">            profit1 = new1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> profit0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>股票问题系列通解（转载翻译）：<a href=\"https://leetcode-cn.com/circle/article/qiAgHn/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/circle/article/qiAgHn/</a></p>\n<h4 id=\"Appendix\"><a href=\"#Appendix\" class=\"headerlink\" title=\"Appendix\"></a>Appendix</h4><p>结束时持有 0 份股票的收益一定大于持有 1 份股票的收益？</p>\n<p>如果结束时持有 1 份股票，可能有两种情况，一是在最后一天买入，二是在之前买入。 如果是第一种情况，则最后一天选择不买入，收益一定更高，因为不用付出购买股票的钱。 如果是第二种情况，则一定可以在最后一天卖出，卖出操作一定会增加收益。 因此，无论是哪种情况，持有 0 份股票的收益一定大于持有 1 份股票的收益。</p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/\">LeetCode121-买卖股票的最佳时机</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/\">LeetCode122-买卖股票的最佳时机II</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode123-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII/\">LeetCode122-买卖股票的最佳时机III</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode188-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV/\">LeetCode122-买卖股票的最佳时机IV</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode309-%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F/\">LeetCode309-最佳买卖股票时机含冷冻期</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/17/LeetCode714-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9/\">LeetCode714-买卖股票的最佳时机含手续费</a></p>\n","categories":["LeetCode"],"tags":["贪心算法","动态规划","股票问题","栈"]},{"title":"LeetCode123-买卖股票的最佳时机III","url":"/blog/2020/12/28/LeetCode123-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个数组，它的第 $i$ 个元素是一支给定的股票在第 $i$ 天的价格。</p>\n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>两笔</strong> 交易。</p>\n<p><strong>注意</strong>: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/28/LeetCode123-买卖股票的最佳时机III/123.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>本题是<a href>LeetCode122-买卖股票的最佳时机II</a>的升级版，这道题与其最大的区别在于限制交易次数为 <strong>两次</strong>，所以选择哪两次交易至关重要。</p>\n<h5 id=\"定义dp数组\"><a href=\"#定义dp数组\" class=\"headerlink\" title=\"定义dp数组\"></a>定义dp数组</h5><p>需要记录当前还剩下多少次交易次数，还有当天是否持有股票（ $k=0,1,2$ ）。</p>\n<p>$dp[i][k][0]$ 表示第 $i$ 天交易 $k$ 次且不持有股票可获得的最大收益。</p>\n<p>$dp[i][k][1]$ 表示第 $i$ 天交易 $k$ 次且持有股票可获得的最大收益。</p>\n<h5 id=\"状态转移方程\"><a href=\"#状态转移方程\" class=\"headerlink\" title=\"状态转移方程\"></a>状态转移方程</h5><ul>\n<li><p>第 $i$ 天不持有，前一天不持有或前一天持有今天卖出：<br>$$<br>dp[i][k][0] = max(dp[i - 1][k][0], dp[i - 1][k][1] + prices[i]);<br>$$</p>\n</li>\n<li><p>第 $i$ 天持有，前一天持有或前一天不持有今天买入，买入要减少一次交易次数：<br>$$<br>dp[i][j][1] = max(dp[i - 1][k][1], dp[i - 1][k - 1][0] - prices[i]);<br>$$</p>\n</li>\n</ul>\n<h5 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h5><p>在第一天时，如果买入股票收益为$-prices[0]$ ，没有买入时收益为 $0$。每一笔交易都需要初始化：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 剩余交易i次，获得收益初始化</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; ++i)&#123;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][i][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&gt; <span class=\"title\">dp</span><span class=\"params\">(prices.size(), <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;(<span class=\"number\">2</span> + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">2</span>)))</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">2</span>; ++i)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][i][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>; j &gt; <span class=\"number\">0</span>; --j)&#123;</span><br><span class=\"line\">                dp[i][j][<span class=\"number\">0</span>] = max(dp[i - <span class=\"number\">1</span>][j][<span class=\"number\">0</span>], dp[i - <span class=\"number\">1</span>][j][<span class=\"number\">1</span>] + prices[i]);</span><br><span class=\"line\">                dp[i][j][<span class=\"number\">1</span>] = max(dp[i - <span class=\"number\">1</span>][j][<span class=\"number\">1</span>], dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>][<span class=\"number\">0</span>] - prices[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[prices.size() - <span class=\"number\">1</span>][<span class=\"number\">2</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"空间优化\"><a href=\"#空间优化\" class=\"headerlink\" title=\"空间优化\"></a>空间优化</h4><p>由于当天的状态只依赖于前一天，所以可以将三维压缩为二维：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">dp</span><span class=\"params\">(<span class=\"number\">2</span> + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">2</span>))</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">2</span>; ++i)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dp[i][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>; j &gt; <span class=\"number\">0</span>; --j)&#123;</span><br><span class=\"line\">                dp[j][<span class=\"number\">0</span>] = max(dp[j][<span class=\"number\">0</span>], dp[j][<span class=\"number\">1</span>] + prices[i]);</span><br><span class=\"line\">                dp[j][<span class=\"number\">1</span>] = max(dp[j][<span class=\"number\">1</span>], dp[j - <span class=\"number\">1</span>][<span class=\"number\">0</span>] - prices[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">2</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>股票问题系列通解（转载翻译）：<a href=\"https://leetcode-cn.com/circle/article/qiAgHn/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/circle/article/qiAgHn/</a></p>\n<h4 id=\"Appendix\"><a href=\"#Appendix\" class=\"headerlink\" title=\"Appendix\"></a>Appendix</h4><p>结束时持有 0 份股票的收益一定大于持有 1 份股票的收益？</p>\n<p>如果结束时持有 1 份股票，可能有两种情况，一是在最后一天买入，二是在之前买入。 如果是第一种情况，则最后一天选择不买入，收益一定更高，因为不用付出购买股票的钱。 如果是第二种情况，则一定可以在最后一天卖出，卖出操作一定会增加收益。 因此，无论是哪种情况，持有 0 份股票的收益一定大于持有 1 份股票的收益。</p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/\">LeetCode121-买卖股票的最佳时机</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/\">LeetCode122-买卖股票的最佳时机II</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode123-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII/\">LeetCode122-买卖股票的最佳时机III</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode188-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV/\">LeetCode122-买卖股票的最佳时机IV</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode309-%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F/\">LeetCode309-最佳买卖股票时机含冷冻期</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/17/LeetCode714-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9/\">LeetCode714-买卖股票的最佳时机含手续费</a></p>\n","categories":["LeetCode"],"tags":["动态规划","股票问题"]},{"title":"LeetCode126-单词接龙2","url":"/blog/2020/06/07/LeetCode126-%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%992/","content":"<p>这是今天的每日一题，难度为hard，不过与之前软挑赛的题目有很多相似之处，但是我还是没做出来，还是要多总结。最后看了别人的答案，用BFS+DFS才解决这个问题。</p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定两个单词（beginWord 和 endWord）和一个字典 wordList，找出所有从 beginWord 到 endWord 的最短转换序列。转换需遵循如下规则：</p>\n<ol>\n<li>每次转换只能改变一个字母。</li>\n<li>转换过程中的中间单词必须是字典中的单词。</li>\n</ol>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>如果不存在这样的转换序列，返回一个空列表。</li>\n<li>所有单词具有相同的长度。</li>\n<li>所有单词只由小写字母组成。</li>\n<li>字典中不存在重复的单词。</li>\n<li>你可以假设 beginWord 和 endWord 是非空的，且二者不相同。</li>\n</ul>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/06/07/LeetCode126-单词接龙2/示例.png\" style=\"zoom:80%;\">\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>对于beginWord，一次只能更改一个字母，同时更改后的字母必须出现在wordList中，所以考虑将wordList放入一个集合中，方便每次判断是否在集合内。一开始我考虑的是直接用DFS解决，虽然DFS可以找到所有路径，然后从中挑选最短，但是它无法直接找到最短路径。如果某条长度过长，很容易出现超时，事实上在刷题群里很多大佬已经出现了这个问题，所以只能找别的办法。直接用BFS是可以的，在找最短的同时记录路径，我没有尝试，之后可以再试试，我选择了使用BFS+DFS的方法，使用BFS建立逆邻接表，使用DFS在逆邻接表基础上搜索答案。</p>\n<h4 id=\"BFS建立逆邻接表\"><a href=\"#BFS建立逆邻接表\" class=\"headerlink\" title=\"BFS建立逆邻接表\"></a>BFS建立逆邻接表</h4><p>使用BFS可以找到最短的路径，可以建立一个逆邻接表，用来表示可以到达当前节点的所有节点(当然这些节点必须是出现在wordList之中的)，<strong>我们用curr代表当前节点，temp代表更改一个字母后的节点</strong>。</p>\n<p>使用<code>unordered_map&lt;string, vector&lt;string&gt;&gt; neighbor</code>来表示，就拿示例1来说，如下图所示：<img src=\"/blog/2020/06/07/LeetCode126-单词接龙2/邻接表.png\"></p>\n<p>上图表示可以到达cog的节点为dog和log，具体的实现还是需要一个记录当前节点深度的哈希表<code>unordered_map&lt;string, int&gt; depth</code>，用来判断curr是否可达temp，同时省去一些不必要的遍历。具体操作是：首先队列弹出curr节点，检查和它相差一个字母的temp是否在wordList中出现，如果出现了：</p>\n<ul>\n<li>没有记录过(<code>depth[temp] = 0</code>)，记录<code>curr-&gt;temp</code>，同时<code>depth[temp] = depth[curr] + 1</code>，将temp入队</li>\n<li>记录过并且相邻(<code>depth[temp] = depth[curr] + 1</code>)，同时避免不是直接相邻的遍历，也避免了往回遍历。如下表，遍历改变pot一个字母的节点时，可能再次出现hot，但是此时<code>depth[hot] = 1 != depth[pot] + 1 = 2</code>所以避免了再次遍历hot。</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\">   hot</span><br><span class=\"line\"> /       \\</span><br><span class=\"line\"><span class=\"attribute\">pot</span>     hit</span><br><span class=\"line\"> \\        /</span><br><span class=\"line\">    pit</span><br></pre></td></tr></table></figure>\n\n<p>通过以上步骤就可以建立逆临界表，代码实现如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>,<span class=\"keyword\">int</span>&gt; depth;</span><br><span class=\"line\"><span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; neighbor;</span><br><span class=\"line\"><span class=\"comment\">//将wordList添加至集合中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">unordered_set</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">wordSet</span><span class=\"params\">(wordList.begin(),wordList.end())</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//使用BFS建立逆邻接表</span></span><br><span class=\"line\">depth[beginWord]=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"built_in\">string</span>&gt; Q;</span><br><span class=\"line\">Q.push(beginWord);</span><br><span class=\"line\"><span class=\"comment\">//从begin到end建图</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!Q.empty())&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> curr=Q.front();</span><br><span class=\"line\">\tQ.pop();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;curr.size();++i)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> temp=curr;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c=<span class=\"string\">'a'</span>;c&lt;=<span class=\"string\">'z'</span>;++c)&#123;</span><br><span class=\"line\">            temp[i]=c;</span><br><span class=\"line\">            <span class=\"comment\">//如果修改后的这个temp是在集合里面</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(wordSet.count(temp))&#123;</span><br><span class=\"line\">           \t\t<span class=\"comment\">//这个temp还没被添加进neighbor</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(depth[temp] == <span class=\"number\">0</span>)&#123; </span><br><span class=\"line\">                    Q.push(temp);</span><br><span class=\"line\">                    depth[temp]=depth[curr]+<span class=\"number\">1</span>;\t<span class=\"comment\">//更新深度</span></span><br><span class=\"line\">                    neighbor[temp].push_back(curr);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                <span class=\"comment\">//已经被添加并且相邻</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(depth[temp]==depth[curr]+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    neighbor[temp].push_back(curr);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DFS从逆邻接表中搜索答案\"><a href=\"#DFS从逆邻接表中搜索答案\" class=\"headerlink\" title=\"DFS从逆邻接表中搜索答案\"></a>DFS从逆邻接表中搜索答案</h4><p>在上一步的BFS中已经存储了每个点的逆邻接点，我们从endWord沿着neighbor往回进行搜索，直到到达beginWord，将已经记录的路径(path)进行反转，存入最终的res中；如果无法到达，则DFS执行至末尾，将path重置(省去了使用&amp;path引用的pop_back()操作)。代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;begin, <span class=\"built_in\">string</span> &amp;curr, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; path, <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; &amp;neighbor, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; &amp;res)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(curr == begin)&#123;</span><br><span class=\"line\">        path.push_back(curr);</span><br><span class=\"line\">        reverse(path.begin(), path.end());</span><br><span class=\"line\">        res.push_back(path);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    path.push_back(curr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;word : neighbor[curr])&#123;</span><br><span class=\"line\">        dfs(begin, word, path, neighbor, res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; <span class=\"title\">findLadders</span><span class=\"params\">(<span class=\"built_in\">string</span> beginWord, <span class=\"built_in\">string</span> endWord, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; wordList)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; res;</span><br><span class=\"line\">        <span class=\"comment\">//如果wordList中没有endWord，则返回空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(find(wordList.begin(), wordList.end(), endWord) == wordList.end())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res; </span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; path;\t<span class=\"comment\">//记录路径</span></span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; depth;\t<span class=\"comment\">//记录深度</span></span><br><span class=\"line\">        <span class=\"comment\">//存储节点的逆邻接</span></span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; neighbor;\t</span><br><span class=\"line\">        <span class=\"comment\">//将wordList添加至集合中</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">unordered_set</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">wordset</span><span class=\"params\">(wordList.begin(), wordList.end())</span></span>;</span><br><span class=\"line\">        depth[beginWord] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;<span class=\"built_in\">string</span>&gt; Q;</span><br><span class=\"line\">        Q.push(beginWord);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!Q.empty())&#123;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> curr = Q.front();</span><br><span class=\"line\">            Q.pop();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; curr.size(); i++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> temp = curr;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c = <span class=\"string\">'a'</span>; c &lt;= <span class=\"string\">'z'</span>; c++)&#123;</span><br><span class=\"line\">                    temp[i] = c;</span><br><span class=\"line\">                    <span class=\"comment\">//如果修改后的这个temp是在集合里面</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(wordset.count(temp))&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//这个temp还没被添加进neighbor</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(depth[temp] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                            Q.push(temp);</span><br><span class=\"line\">                            depth[temp] = depth[curr] + <span class=\"number\">1</span>;\t<span class=\"comment\">//更新深度</span></span><br><span class=\"line\">                            neighbor[temp].push_back(curr);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">//已经被添加并且相邻</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(depth[temp] == depth[curr] + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                            neighbor[temp].push_back(curr);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dfs(beginWord, endWord, path, neighbor, res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;begin, <span class=\"built_in\">string</span> &amp;curr, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; path, <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; &amp;neighbor, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; &amp;res)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//当前点已经等于beginWord</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(curr == begin)&#123;</span><br><span class=\"line\">            path.push_back(curr);</span><br><span class=\"line\">            reverse(path.begin(), path.end());\t<span class=\"comment\">//反转</span></span><br><span class=\"line\">            res.push_back(path);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        path.push_back(curr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;word : neighbor[curr])&#123;</span><br><span class=\"line\">            dfs(begin, word, path, neighbor, res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果没有逆邻接，则执行完毕此函数后，path还原为上一次的值，即省去了pop_back()</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://leetcode-cn.com/problems/word-ladder-ii/solution/zhe-ti-you-xie-nan-bie-ren-de-dai-ma-zuo-xia-zhu-s/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/word-ladder-ii/solution/zhe-ti-you-xie-nan-bie-ren-de-dai-ma-zuo-xia-zhu-s/</a></p>\n","categories":["LeetCode"],"tags":["BFS","DFS"]},{"title":"LeetCode139-单词拆分","url":"/blog/2020/06/25/LeetCode139-%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/","content":"<p>这道题我一开始没想到可以用动态规划来做，先试着用暴力做了，结果通过34/36，看似只剩下3个没通过，但是问题很大，不好修改，具体原因后面分析。</p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。</p>\n<p>说明：</p>\n<ul>\n<li>拆分时可以重复使用字典中的单词。</li>\n<li>你可以假设字典中没有重复的单词。</li>\n</ul>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/06/25/LeetCode139-单词拆分/示例.png\" style=\"zoom:80%;\">\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>这道题题意还是挺好理解的，给定字符串s，从字典wordDict中取出单个或多个字符串（可重复），最后如果可以拼接成s，返回true，反之返回false。</p>\n<p>一开始暴力的思路就是遍历字典中的每一个字符串看是否出现在s中，如果出现了，那么用#号来代替s中的出现的子串，并且继续搜索，搜索完成后，将s中的#号清空，如果此时s为空，那么代表s可以被拆分，返回true。但是对于以下的例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">\"abbbc\"</span></span><br><span class=\"line\">wordDict = [<span class=\"string\">\"ab\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"bbc\"</span>]</span><br></pre></td></tr></table></figure>\n\n<p>s可以由ab+bbc组合而成。但是用暴力法，只会搜到ab+b+b，再往下就搜索不到了，返回了false。如果需要修改，要用到dfs的思想，进行深搜，但是不剪枝也容易超时。在看了答案之后才知道可以用动态规划来做，而且很好理解。</p>\n<p>按照第二个示例来说，<code>s = &quot;applepenapple&quot;, wordDcit = [&quot;apple&quot;, &quot;pen&quot;]</code>，从s的第一个字符<code>a</code>开始遍历：</p>\n<ul>\n<li>当等于<code>apple</code>时候，存在与字典中，就可以认为在第5个字符处是可以拆的；</li>\n<li>继续向后遍历，当得到<code>applepen</code>时，增加了字符串<code>pen</code>，且它存在于字典中，所以可以知道第8个字符处也是可拆的；</li>\n<li>直到<code>applepenapple</code>时，增加了<code>apple</code>，且它存在于字典中，最后一个字符即第13个字符处可拆。</li>\n</ul>\n<p>从上述分析可以知道，如果最后一个字符处可拆，就返回true，否则返回false。</p>\n<h4 id=\"定义dp数组\"><a href=\"#定义dp数组\" class=\"headerlink\" title=\"定义dp数组\"></a>定义dp数组</h4><p>首先，<code>dp</code>数组应该是<code>bool</code>类型，长度为<code>s.length()+1</code>，并且<code>dp[0]=true</code>，否则dp数组全是false。<strong>dp数组含义为当前位置的字符是否可以被拆分</strong>。</p>\n<p>如果<code>dp[j]</code>代表当前位置，<code>dp[i]</code>是某一起始位置，那么就需要检查从<code>i</code>到<code>j</code>的子串是否在字典中，如果在，并且<code>dp[i]</code>是可以拆分的，那么<code>dp[j]</code>也应该是可以拆分的，否则<code>dp[j]=false</code>。</p>\n<h4 id=\"状态转移方程\"><a href=\"#状态转移方程\" class=\"headerlink\" title=\"状态转移方程\"></a>状态转移方程</h4><p>根据上面的分析，可以容易写出以下的状态转移方程，同时将字典放入<code>unordered_map</code>中方便查找：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">dp[j] = dp[i] &amp;&amp; dict.count(s.substr(i, j - i))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">wordBreak</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存入字典，方便查找</span></span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">bool</span>&gt; dict; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp;word : wordDict) dict[word] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化dp数组，如果s为空，返回true</span></span><br><span class=\"line\">        <span class=\"comment\">// 实际上只初始化dp[0]即可</span></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> *dp = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[s.length() + <span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"literal\">true</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= s.length(); i++)&#123;</span><br><span class=\"line\">            dp[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= s.length(); j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = j - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">                dp[j] = dp[i] &amp;&amp; dict.count(s.substr(i, j - i));</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dp[j]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[s.length()];    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://leetcode-cn.com/problems/word-break/solution/dan-ci-chai-fen-ju-jue-zhuang-xcong-jian-dan-de-xi/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/word-break/solution/dan-ci-chai-fen-ju-jue-zhuang-xcong-jian-dan-de-xi/</a></p>\n","categories":["LeetCode"],"tags":["动态规划"]},{"title":"LeetCode1319-连通网络的操作次数","url":"/blog/2021/01/23/LeetCode1319-%E8%BF%9E%E9%80%9A%E7%BD%91%E7%BB%9C%E7%9A%84%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>用以太网线缆将 <code>n</code> 台计算机连接成一个网络，计算机的编号从 <code>0</code> 到 <code>n-1</code>。线缆用 <code>connections</code> 表示，其中 <code>connections[i] = [a, b]</code> 连接了计算机 <code>a</code> 和 <code>b</code>。</p>\n<p>网络中的任何一台计算机都可以通过网络直接或者间接访问同一个网络中其他任意一台计算机。</p>\n<p>给你这个计算机网络的初始布线 <code>connections</code>，你可以拔开任意两台直连计算机之间的线缆，并用它连接一对未直连的计算机。请你计算并返回使所有计算机都连通所需的最少操作次数。如果不可能，则返回 -1 。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/23/LeetCode1319-连通网络的操作次数/1319.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>首先我们需要得到<strong>多余</strong>的边的总数：先判断两个节点是否处于同一个连通集，如果处于同一个连通集并且当前还有一条边连接它们，那么就将<strong>可用边</strong>计数加1。</p>\n<p>其次，我们需要得到连通集的个数，连通集的总数减去1就是要将它们连接起来<strong>所需要边</strong>的个数。</p>\n<p>如果<strong>可用边</strong>小于<strong>所需要边</strong>的个数，就返回-1，代表无法使所有计算机连通。否则，取两者中的较小值，就是最小需要移动边的个数。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">unionFind</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; parent;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; rank;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unionFind(<span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;count = n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            parent.push_back(i);</span><br><span class=\"line\">            rank.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p == parent[p] ? p : parent[p] = find(parent[p]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionElem</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRoot == qRoot) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rank[pRoot] &lt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank[qRoot] &lt; rank[pRoot])&#123;</span><br><span class=\"line\">            parent[qRoot] = pRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">            rank[qRoot]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">makeConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; connections)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">unionFind <span class=\"title\">uf</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lines = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; connections.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = uf.getCount();</span><br><span class=\"line\">            uf.unionElem(connections[i][<span class=\"number\">0</span>], connections[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count == uf.getCount()) lines++;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> need = uf.getCount() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; lines &lt;&lt; \" \" &lt;&lt; need;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lines &gt;= need)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> min(lines, need);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["并查集","图论"]},{"title":"LeetCode135-分发糖果","url":"/blog/2020/12/24/LeetCode135-%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>老师想给孩子们分发糖果，有 <em>N</em> 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p>\n<p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p>\n<ul>\n<li>每个孩子至少分配到 1 个糖果。</li>\n<li>相邻的孩子中，评分高的孩子必须获得更多的糖果。</li>\n</ul>\n<p>那么这样下来，老师至少需要准备多少颗糖果呢？</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/24/LeetCode135-分发糖果/135.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>用数组 $store$ 记录每个孩子得到的糖果数，$store[i]$ 表示第 $i$ 个孩子获得的糖果数。</p>\n<p>首先找到最低的评分，这个位置记为 $pos$，最低分孩子的糖果数必为1，所以可以得到 $store[pos]=1$ ，以 $pos$为界，将评分数组分为两个部分分别操作，两个部分是<strong>互不影响</strong>的。</p>\n<img src=\"/blog/2020/12/24/LeetCode135-分发糖果/评分数组.png\" style=\"zoom:80%;\">\n\n<ol>\n<li><p>对于 $pos$ 之前（包括 $pos$），往回遍历评分数组，在不越界的条件下可以得到：</p>\n<img src=\"/blog/2020/12/24/LeetCode135-分发糖果/从后往前1.png\" style=\"zoom:80%;\">\n\n<ol>\n<li><p>如果前一个评分小于当前评分：</p>\n<ol>\n<li><p>当前糖果数不为1，那么前一个孩子获得的糖果置为1，结束；</p>\n</li>\n<li><p>当前糖果数为1，那么前一个孩子获得的糖果置为1，但是当前孩子的糖果数必须要大于前一个孩子获得的糖果数（前一个评分小于当前评分）。所以需要从前一个位置开始往后遍历：</p>\n<ol>\n<li><p>如果遇到<strong>后一个评分大于当前评分，并且后一个的糖果等于当前糖果数（上图红线）</strong>，需要给后一个糖果数加1，保证后一个的糖果大于当前糖果数。</p>\n<img src=\"/blog/2020/12/24/LeetCode135-分发糖果/从后往前2.png\" style=\"zoom:80%;\">\n</li>\n<li><p>如果后一个评分等于当前评分，直接退出即可。因为如果相等的评分相邻，没有糖果数的大小关系约束。</p>\n<img src=\"/blog/2020/12/24/LeetCode135-分发糖果/从后往前3.png\" style=\"zoom:80%;\">\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>如果前一个评分等于当前评分，前一个糖果数为1</p>\n</li>\n<li><p>如果前一个评分大于当前评分，前一个糖果数为当前糖果数加1</p>\n</li>\n</ol>\n</li>\n<li><p>对于 $pos$ 之后（包括 $pos$），往后遍历评分数组，在不越界的条件下：</p>\n<img src=\"/blog/2020/12/24/LeetCode135-分发糖果/从前往后1.png\" style=\"zoom:80%;\">\n\n<ol>\n<li><p>如果后一个评分小于当前评分：</p>\n<ol>\n<li><p>当前糖果数不为1，那么后一个孩子获得的糖果置为1，结束；</p>\n</li>\n<li><p>当前糖果数为1，那么后一个孩子获得的糖果置为1，但是当前孩子的糖果数必须要大于后一个孩子获得的糖果数（后一个评分小于当前评分）。所以需要从后一个位置开始往前遍历：</p>\n<ol>\n<li><p>如果遇到<strong>前一个评分大于当前评分，并且前一个的糖果等于当前糖果数（上图红线）</strong>，需要给前一个糖果数加1，保证前一个的糖果大于当前糖果数。</p>\n<img src=\"/blog/2020/12/24/LeetCode135-分发糖果/从前往后2.png\" style=\"zoom: 80%;\">\n</li>\n<li><p>如果前一个评分等于当前评分，直接退出即可。因为如果相等的评分相邻，没有糖果数的大小关系约束。</p>\n<img src=\"/blog/2020/12/24/LeetCode135-分发糖果/从前往后3.png\" style=\"zoom:80%;\">\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>如果后一个评分等于当前评分，后一个糖果数为1</p>\n</li>\n<li><p>如果后一个评分大于当前评分，后一个糖果数为当前糖果数加1</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>最终结果：</p>\n<table>\n<thead>\n<tr>\n<th>ratings</th>\n<th>2</th>\n<th>3</th>\n<th>3</th>\n<th>1</th>\n<th>3</th>\n<th>2</th>\n<th>2</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>store</td>\n<td>1</td>\n<td>2</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">candy</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; ratings)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ratings.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> iter = min_element(ratings.begin(), ratings.end());</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = *iter;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = iter - ratings.begin();</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">store</span><span class=\"params\">(ratings.size(), <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        store[pos] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从pos往前</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = pos; i &gt;= <span class=\"number\">0</span>; --i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; ratings[i - <span class=\"number\">1</span>] &lt; ratings[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(store[i] != <span class=\"number\">1</span>) store[i - <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    store[i - <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>; j &lt; pos; ++j)&#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 往后走</span></span><br><span class=\"line\">                        <span class=\"comment\">// 下一个评分比当前评分高，并且下一个的糖果又没当前糖果多</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(ratings[j + <span class=\"number\">1</span>] &gt; ratings[j] &amp;&amp; store[j + <span class=\"number\">1</span>] &lt;= store[j])&#123;</span><br><span class=\"line\">                            store[j + <span class=\"number\">1</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(ratings[j + <span class=\"number\">1</span>] == ratings[j]) <span class=\"keyword\">break</span>;                        </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; ratings[i - <span class=\"number\">1</span>] == ratings[i])&#123;</span><br><span class=\"line\">                store[i - <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; ratings[i - <span class=\"number\">1</span>] &gt; ratings[i])&#123;</span><br><span class=\"line\">                store[i - <span class=\"number\">1</span>] = store[i] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 从pos往后</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = pos; i &lt; ratings.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i + <span class=\"number\">1</span> &lt; ratings.size() &amp;&amp; ratings[i + <span class=\"number\">1</span>] &lt; ratings[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(store[i] != <span class=\"number\">1</span>) store[i + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    store[i + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &gt; pos; --j)&#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 往前走</span></span><br><span class=\"line\">                        <span class=\"comment\">// 上一个评分比当前评分高，并且上一个的糖果又没当前糖果多</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(ratings[j - <span class=\"number\">1</span>] &gt; ratings[j] &amp;&amp; store[j - <span class=\"number\">1</span>] &lt;= store[j])&#123;</span><br><span class=\"line\">                            store[j - <span class=\"number\">1</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(ratings[j - <span class=\"number\">1</span>] == ratings[j]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i + <span class=\"number\">1</span> &lt; ratings.size() &amp;&amp; ratings[i + <span class=\"number\">1</span>] == ratings[i])&#123;</span><br><span class=\"line\">                store[i + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i + <span class=\"number\">1</span> &lt; ratings.size() &amp;&amp; ratings[i + <span class=\"number\">1</span>] &gt; ratings[i])&#123;</span><br><span class=\"line\">                store[i + <span class=\"number\">1</span>] = store[i] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// for(auto &amp;v : store) cout &lt;&lt; v &lt;&lt; \" \";</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = accumulate(store.begin(), store.end(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更进一步\"><a href=\"#更进一步\" class=\"headerlink\" title=\"更进一步\"></a>更进一步</h4><h5 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p><strong>相邻的孩子中，评分高的孩子必须获得更多的糖果</strong>。这句话可以拆为两个规则分别处理：</p>\n<ul>\n<li>左规则：当 $ratings[i-1]&lt;ratings[i]$ 时，$i$ 获得的糖果要多于 $i-1$ 。</li>\n<li>右规则：当 $ratings[i]&gt;ratings[i+1]$ 时，$i$ 获得的糖果要多于 $i+1$ 。</li>\n</ul>\n<p>遍历数组两次，分别得到每一个孩子满足左规则和右规则的糖果数，取两者之间的最大值就是这个孩子最少分配的糖果数。</p>\n<p>在实际代码中，我们先计算出左规则 $left$ 数组，在计算右规则的时候只需要用单个变量记录当前位置的右规则，同时计算答案即可。</p>\n<h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">candy</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; ratings)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ratings.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">left</span><span class=\"params\">(ratings.size())</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ratings.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; ratings[i] &gt; ratings[i - <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                left[i] = left[i - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                left[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = <span class=\"number\">0</span>, ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = ratings.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i + <span class=\"number\">1</span> &lt; ratings.size() &amp;&amp; ratings[i] &gt; ratings[i + <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                right++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                right = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ret += max(left[i], right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>官方题解：<a href=\"https://leetcode-cn.com/problems/candy/solution/fen-fa-tang-guo-by-leetcode-solution-f01p/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/candy/solution/fen-fa-tang-guo-by-leetcode-solution-f01p/</a></p>\n","categories":["LeetCode"],"tags":["贪心算法"]},{"title":"LeetCode147-对链表进行插入排序","url":"/blog/2020/11/21/LeetCode147-%E5%AF%B9%E9%93%BE%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>插入排序算法：</p>\n<ol>\n<li>插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。</li>\n<li>每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。</li>\n<li>重复直到所有输入数据插入完为止。</li>\n</ol>\n<p>本题可与<a href=\"http://www.xingyuzhao.ltd/blog/2020/10/27/LeetCode143-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/\">LeetCode143-重排链表</a>，<a href=\"http://www.xingyuzhao.ltd/blog/2020/11/22/LeetCode148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/\">LeetCode148-排序链表</a>共同学习。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/11/21/LeetCode147-对链表进行插入排序/description.png\" style=\"zoom:80%;\">\n\n\n\n<img src=\"/blog/2020/11/21/LeetCode147-对链表进行插入排序/示例.png\" style=\"zoom:100%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>首先，使用一个指针记录下一个要进行排序的节点；对于当前节点，从头开始寻找插入位置，然后将当前节点插入。</p>\n<p>那么需要保存插入位置的前一个节点和后一个节点，从头开始，如果当前节点的值大于后一个节点，那么同时将两个节点后移，否则直接进行插入即可。</p>\n<p>最后再将当前节点更新为下一个要进行排序的节点。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">insertionSortList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!head || !head-&gt;next) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        ListNode *dummyNode = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode *node = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(node)&#123;</span><br><span class=\"line\">            ListNode *next = node-&gt;next;</span><br><span class=\"line\">            <span class=\"comment\">// 对排好序的链表进行插入</span></span><br><span class=\"line\">            ListNode *pre = dummyNode;</span><br><span class=\"line\">            ListNode *sorted = dummyNode-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(sorted)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 当前点大于后一个点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node-&gt;val &gt; sorted-&gt;val)&#123;</span><br><span class=\"line\">                    pre = sorted;</span><br><span class=\"line\">                    sorted = sorted-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 此时当前点小于等于最后一个点，可以进行插入</span></span><br><span class=\"line\">            <span class=\"comment\">// 此时sorted之前的点都已经排好序了</span></span><br><span class=\"line\">            pre-&gt;next = node;</span><br><span class=\"line\">            node-&gt;next = sorted;</span><br><span class=\"line\"></span><br><span class=\"line\">            node = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummyNode-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["链表","插入排序"]},{"title":"LeetCode148-排序链表","url":"/blog/2020/11/22/LeetCode148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给你链表的头结点 <code>head</code> ，请将其按 升序 排列并返回 排序后的链表 。</p>\n<p><strong>进阶</strong>：</p>\n<p>你可以在<code>O(nlogn)</code>时间复杂度和常数级空间复杂度下，对链表进行排序吗？</p>\n<p>本题可与<a href=\"http://www.xingyuzhao.ltd/blog/2020/11/21/LeetCode147-%E5%AF%B9%E9%93%BE%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#more\">LeetCode147-对链表进行插入排序</a>，<a href=\"http://www.xingyuzhao.ltd/blog/2020/10/27/LeetCode143-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/\">LeetCode143-重排链表</a>共同学习。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/11/22/LeetCode148-排序链表/示例.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>题目要求用<code>O(nlogn)</code>的时间复杂度来进行排序，所以不能用<a href=\"http://www.xingyuzhao.ltd/blog/2020/11/21/LeetCode147-%E5%AF%B9%E9%93%BE%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#more\">LeetCode147-对链表进行插入排序</a>的方法来进行解，所以采用归并排序的思想对链表进行排序。</p>\n<p>使用归并排序首先得找到链表的中间节点，找到中间节点，根据中间节点的位置将链表分为两个部分，再进行归并排序。<strong>中间节点在链表前半部分的末尾，将链表拆开后，要让中间节点的下一个指向空</strong>，再分别对两个链表进行归并排序，最后再合并两个排序好的链表，如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">ListNode* __mergeSort(ListNode *node)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果节点为空或只有一个节点，返回当前节点即可</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!node || !node-&gt;next)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    ListNode *fast = node;</span><br><span class=\"line\">    ListNode *slow = node;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast-&gt;next &amp;&amp; fast-&gt;next-&gt;next)&#123;</span><br><span class=\"line\">        fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">        slow = slow-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode *l2 = slow-&gt;next;</span><br><span class=\"line\">    slow-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode* left = __mergeSort(node);</span><br><span class=\"line\">    ListNode* right = __mergeSort(l2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> __merge(left, right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>合并的操作需要创建一个新的链表，新的链表根据两个链表的值建立。如果$l1$的值小于$l2$，那么将插入$l1$新的链表中，同时$l1$移动到它的下一个节点；否则将$l2$插入新的链表中，同时$l2$移动到它的下一个节点。插入操作结束后，再将新链表向后移动一个节点（也就是新插入的节点）。<strong>如果两个链表长度不一样（两个链表长度最多差一个），还要判断插入操作结束后哪个链表不为空，如果不为空，它就是新链表的最后一个节点</strong>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">ListNode* __merge(ListNode *l1, ListNode *l2)&#123;</span><br><span class=\"line\">    ListNode *dummyNode = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    ListNode *cur = dummyNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l1 &amp;&amp; l2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1-&gt;val &lt; l2-&gt;val)&#123;</span><br><span class=\"line\">            cur-&gt;next = l1;</span><br><span class=\"line\">            l1 = l1-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cur-&gt;next = l2;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; l2-&gt;val;</span></span><br><span class=\"line\">            l2 = l2-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = cur-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cur-&gt;next = l1 != <span class=\"literal\">nullptr</span> ? l1 : l2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummyNode-&gt;next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主函数</span></span><br><span class=\"line\"><span class=\"function\">ListNode* <span class=\"title\">sortList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> __mergeSort(head);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 其余两个函数</span></span><br><span class=\"line\">ListNode* __mergeSort(ListNode *node);</span><br><span class=\"line\">ListNode* __merge(ListNode *l1, ListNode *l2);</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["链表","归并排序"]},{"title":"LeetCode143-重排链表","url":"/blog/2020/10/27/LeetCode143-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/","content":"<p>本题同时解决<strong>LeetCode206-反转链表</strong>和<strong>LeetCode876-链表的中间结点</strong></p>\n<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个单链表 $L$：$L0→L1→…→Ln-1→Ln$ ，<br>将其重新排列后变为： $L0→Ln→L1→Ln-1→L2→Ln-2→…$</p>\n<p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>\n<p>本题可与<a href=\"http://www.xingyuzhao.ltd/blog/2020/11/21/LeetCode147-%E5%AF%B9%E9%93%BE%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#more\">LeetCode147-对链表进行插入排序</a>，<a href=\"http://www.xingyuzhao.ltd/blog/2020/11/22/LeetCode148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/\">LeetCode148-排序链表</a>共同学习。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/10/27/LeetCode143-重排链表/示例.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>观察链表，对于长度为偶数的链表，如示例1，可以将2之后的子链表进行反转得到$4-&gt;3$，然后再与剩下的链表$1-&gt;2$交叉合并，得到$1-&gt;4-&gt;2-&gt;3$；</p>\n<p>长度为奇数的链表同理，找到中间结点3，将3之后的子链表反转得到$5-&gt;4$，再与剩下的链表$1-&gt;2-&gt;3$进行合并，得到$1-&gt;5-&gt;2-&gt;4-&gt;3$。</p>\n<h4 id=\"链表的中间结点\"><a href=\"#链表的中间结点\" class=\"headerlink\" title=\"链表的中间结点\"></a>链表的中间结点</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于偶数长度链表，找到的是中间靠后的一个</span></span><br><span class=\"line\"><span class=\"function\">ListNode* <span class=\"title\">midNode</span><span class=\"params\">(ListNode *root)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root || !root-&gt;next) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    ListNode *fast = root;</span><br><span class=\"line\">    ListNode *slow = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class=\"line\">        fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">        slow = slow-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 对于偶数长度链表，找到的是中间靠前的一个</span></span><br><span class=\"line\"><span class=\"function\">ListNode* <span class=\"title\">midNode</span><span class=\"params\">(ListNode *root)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root || !root-&gt;next) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    ListNode *fast = root;</span><br><span class=\"line\">    ListNode *slow = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast-&gt;next &amp;&amp; fast-&gt;next-&gt;next)&#123;</span><br><span class=\"line\">        fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">        slow = slow-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表\"></a>反转链表</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ListNode* <span class=\"title\">reverseList</span><span class=\"params\">(ListNode *root)</span></span>&#123;</span><br><span class=\"line\">    ListNode *pre = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    ListNode *cur = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur)&#123;</span><br><span class=\"line\">        ListNode *tmp = cur-&gt;next;</span><br><span class=\"line\">        cur-&gt;next = pre;</span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reorderList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!head) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        ListNode *mid = midNode(head);</span><br><span class=\"line\">        ListNode *l2 = mid-&gt;next;</span><br><span class=\"line\">        mid-&gt;next = <span class=\"literal\">nullptr</span>; </span><br><span class=\"line\">        l2 = reverseList(l2);</span><br><span class=\"line\">        mergeList(head, l2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">midNode</span><span class=\"params\">(ListNode *root)</span></span>&#123;</span><br><span class=\"line\">        ListNode *fast = root;</span><br><span class=\"line\">        ListNode *slow = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class=\"line\">            fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">            slow = slow-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">reverseList</span><span class=\"params\">(ListNode *root)</span></span>&#123;</span><br><span class=\"line\">        ListNode *pre = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        ListNode *cur = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur)&#123;</span><br><span class=\"line\">            ListNode *tmp = cur-&gt;next;</span><br><span class=\"line\">            cur-&gt;next = pre;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mergeList</span><span class=\"params\">(ListNode *l1, ListNode* l2)</span></span>&#123;</span><br><span class=\"line\">        ListNode *tmp1;</span><br><span class=\"line\">        ListNode *tmp2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l1 &amp;&amp; l2)&#123;</span><br><span class=\"line\">            tmp1 = l1-&gt;next;</span><br><span class=\"line\">            l1-&gt;next = l2;</span><br><span class=\"line\">            tmp2 = l2-&gt;next;</span><br><span class=\"line\">            l2-&gt;next = tmp1;</span><br><span class=\"line\">            l1 = tmp1;</span><br><span class=\"line\">            l2 = tmp2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["链表"]},{"title":"LeetCode1579-保证图可完全遍历","url":"/blog/2021/01/27/LeetCode1579-%E4%BF%9D%E8%AF%81%E5%9B%BE%E5%8F%AF%E5%AE%8C%E5%85%A8%E9%81%8D%E5%8E%86/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>Alice 和 Bob 共有一个无向图，其中包含 n 个节点和 3 种类型的边：</p>\n<ul>\n<li>类型 1：只能由 Alice 遍历。</li>\n<li>类型 2：只能由 Bob 遍历。</li>\n<li>类型 3：Alice 和 Bob 都可以遍历。</li>\n</ul>\n<p>给你一个数组 $edges$ ，其中 $edges[i] = [type_i, u_i, v_i]$ 表示节点 $u_i$ 和 $v_i$ 之间存在类型为 $type_i$ 的双向边。请你在保证图仍能够被 Alice和 Bob 完全遍历的前提下，找出可以删除的最大边数。如果从任何节点开始，Alice 和 Bob 都可以到达所有其他节点，则认为图是可以完全遍历的。</p>\n<p>返回可以删除的最大边数，如果 Alice 和 Bob 无法完全遍历图，则返回 -1。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/27/LeetCode1579-保证图可完全遍历/1567.png\" style=\"zoom:120%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>本题和<a href=\"http://www.xingyuzhao.ltd/blog/2021/01/23/LeetCode1319-%E8%BF%9E%E9%80%9A%E7%BD%91%E7%BB%9C%E7%9A%84%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0/#more\">LeetCode1319-连通网络的操作次数</a>很相似，可以说是1319的加强版。这道题需要给两位主角分别建立一个并查集，并且要解决下面三个问题：</p>\n<p><strong>1. 如何判断边重复？</strong></p>\n<p>在进行 <code>union</code> 操作前后，如果 <code>count</code> 变化（减一），代表进行了合并；否则，说明此边重复，可以删掉。</p>\n<p><strong>2. 什么是公共边？</strong></p>\n<p>对于此题来说，$type$ 为 3 的边既可以被 Alice 遍历，也可以被 Bob 遍历。所以此种类型的边就是公共边。</p>\n<p><strong>3. 如何处理公共边？</strong></p>\n<p>这是本题的重点，对 Alice 和 Bob 分别根据公共边进行合并。</p>\n<ul>\n<li>如果先对 Alice 根据公共边合并，当发现边重复时，就需要删掉此边，不会对节点之间的连通性造成任何影响。</li>\n<li>再对 Bob 根据公共边合并时，就不需要删边了，因为上一步已经删去了重复公共边，不需要再一次删除了。两者的联通集是一致的。</li>\n</ul>\n<p>总而言之，<strong>公共边只能删除一次。</strong></p>\n<p>经历上述操作后，再分别对两个人按照自己可以遍历的类型进行合并，同样遇到了重复边可以删掉。将重复公共边总数和非公共边重复总数求和，就是最终结果了。</p>\n<p>当然，如果合并结束后，两个并查集中有一个或多个不止一个联通集，说明无法全部遍历，返回 -1。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>顺序可能不太一致，但不影响最终结果。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">unionFind</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; parent;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; rank;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unionFind(<span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;count = n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            parent.push_back(i);</span><br><span class=\"line\">            rank.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p == parent[p] ? p : parent[p] = find(parent[p]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionElem</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRoot == qRoot) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rank[pRoot] &lt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank[pRoot] &gt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[qRoot] = pRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">            rank[qRoot]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxNumEdgesToRemove</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">unionFind <span class=\"title\">Alice</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">unionFind <span class=\"title\">Bob</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// Alice</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;edge : edges)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> type = edge[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> u = edge[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(type != <span class=\"number\">3</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = Alice.getCount();</span><br><span class=\"line\">            Alice.unionElem(u - <span class=\"number\">1</span>, v - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Alice.getCount() == count)</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;edge : edges)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> type = edge[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> u = edge[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(type != <span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = Alice.getCount();</span><br><span class=\"line\">            Alice.unionElem(u - <span class=\"number\">1</span>, v - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Alice.getCount() == count)</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Bob</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;edge : edges)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> type = edge[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> u = edge[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(type != <span class=\"number\">3</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            Bob.unionElem(u - <span class=\"number\">1</span>, v - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;edge : edges)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> type = edge[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> u = edge[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(type != <span class=\"number\">2</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = Bob.getCount();</span><br><span class=\"line\">            Bob.unionElem(u - <span class=\"number\">1</span>, v - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Bob.getCount() == count)</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Alice.getCount() == <span class=\"number\">1</span> &amp;&amp; Bob.getCount() == <span class=\"number\">1</span> ? cnt : <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["并查集","图论"]},{"title":"LeetCode1631-最小体力消耗路径","url":"/blog/2021/01/29/LeetCode1631-%E6%9C%80%E5%B0%8F%E4%BD%93%E5%8A%9B%E6%B6%88%E8%80%97%E8%B7%AF%E5%BE%84/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>你准备参加一场远足活动。给你一个二维 <code>rows x columns</code> 的地图 <code>heights</code> ，其中 <code>heights[row][col]</code> 表示格子 <code>(row, col)</code> 的高度。一开始你在最左上角的格子 <code>(0, 0)</code> ，且你希望去最右下角的格子 <code>(rows-1, columns-1)</code> （注意下标从 <strong>0</strong> 开始编号）。你每次可以往 <strong>上</strong>，<strong>下</strong>，<strong>左</strong>，<strong>右</strong> 四个方向之一移动，你想要找到耗费 <strong>体力</strong> 最小的一条路径。</p>\n<p>一条路径耗费的 <strong>体力值</strong> 是路径上相邻格子之间 <strong>高度差绝对值</strong> 的 <strong>最大值</strong> 决定的。</p>\n<p>请你返回从左上角走到右下角的最小 <strong>体力消耗值</strong> 。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/29/LeetCode1631-最小体力消耗路径/1631.png\">\n\n<img src=\"/blog/2021/01/29/LeetCode1631-最小体力消耗路径/1631-提示.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>将本题抽象为一个图论模型：</p>\n<ul>\n<li>将每个位置抽象为一个节点，共有 <code>m * n</code> 个节点。</li>\n<li>每个节点与其上下左右构成带权无向图（存在此节点的话），其权值为节点间高度差的绝对值。</li>\n<li>寻找一条从左上角到右下角的最短路径，一条路径的长度定义为所有边权的最大值。</li>\n</ul>\n<p>我们可以设置一个阈值 x，看是否存在一条路径，从左上角到右下角所累加的权值小于等于 x；如果小于等于 x，说明可能存在更小的阈值，使路径存在，并进一步缩小阈值范围。</p>\n<p>本题高度差范围是 <code>[1,1000000]</code>，从 0 到 999999 设置阈值，进行二分搜索。</p>\n<p><strong>对于图论的最短路径问题，考虑使用广度优先搜索（BFS）</strong>。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">minimumEffortPath</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; heights)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = heights.size(); </span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = heights[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = <span class=\"number\">1000000</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt;= right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"built_in\">queue</span>&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; q;</span><br><span class=\"line\">            q.push(&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">            <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">vis</span><span class=\"params\">(m * n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            vis[<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> [x, y] = q.front();</span><br><span class=\"line\">                q.pop();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; ++i)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> nx = x + dx[i];</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> ny = y + dy[i];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; heights.size() &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; heights[<span class=\"number\">0</span>].size() &amp;&amp; !vis[nx * n + ny] &amp;&amp; <span class=\"built_in\">abs</span>(heights[nx][ny] - heights[x][y]) &lt;= mid)&#123;</span><br><span class=\"line\">                        vis[nx * n + ny] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        q.emplace(nx, ny);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vis[m * n - <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                ans = mid;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>官方题解：<a href=\"https://leetcode-cn.com/problems/path-with-minimum-effort/solution/zui-xiao-ti-li-xiao-hao-lu-jing-by-leetc-3q2j/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/path-with-minimum-effort/solution/zui-xiao-ti-li-xiao-hao-lu-jing-by-leetc-3q2j/</a></p>\n","categories":["LeetCode"],"tags":["图论","BFS","二分法"]},{"title":"LeetCode1584-连接所有点的最小费用","url":"/blog/2021/01/19/LeetCode1584-%E8%BF%9E%E6%8E%A5%E6%89%80%E6%9C%89%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给你一个 <code>points</code> 数组，表示 2D 平面上的一些点，其中 <code>points[i] = [xi, yi]</code> 。</p>\n<p>连接点 <code>[xi, yi]</code> 和点 <code>[xj, yj]</code> 的费用为它们之间的 <strong>曼哈顿距离</strong> ：<code>|xi - xj| + |yi - yj|</code> ，其中 <code>|val|</code> 表示 <code>val</code> 的绝对值。</p>\n<p>请你返回将所有点连接的最小总费用。只有任意两点之间 <strong>有且仅有</strong> 一条简单路径时，才认为所有点都已连接。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/19/LeetCode1584-连接所有点的最小费用/1584.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p><code>points</code> 数组中两两节点相连构成一个完全图，根据 <code>Kruskal</code> 算法（并查集）找到完全图中的最小生成树，这棵树上的权值之和就是题目要求的最小费用。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">unionFind</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; parent;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; rank;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unionFind(<span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            parent.push_back(i);</span><br><span class=\"line\">            rank.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p == parent[p] ? p : parent[p] = find(parent[p]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">unionElem</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRoot == qRoot) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rank[pRoot] &lt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank[qRoot] &lt; rank[pRoot])&#123;</span><br><span class=\"line\">            parent[qRoot] = pRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">            rank[qRoot]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> find(p) == find(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v, w;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> weight;</span><br><span class=\"line\">    Edge(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> weight) : v(v), w(w), weight(weight)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">minCostConnectPoints</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> f = [](<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;v1, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;v2) -&gt; <span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(v1[<span class=\"number\">0</span>] - v2[<span class=\"number\">0</span>]) + <span class=\"built_in\">abs</span>(v1[<span class=\"number\">1</span>] - v2[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"function\">unionFind <span class=\"title\">uf</span><span class=\"params\">(points.size())</span></span>;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;Edge&gt; edges;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; points.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; points.size(); ++j)&#123;</span><br><span class=\"line\">                edges.emplace_back(i, j, f(points[i], points[j]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>; <span class=\"comment\">// 记录最小生成树边的个数</span></span><br><span class=\"line\">        <span class=\"comment\">// 每条边按照权值排序</span></span><br><span class=\"line\">        sort(edges.begin(), edges.end(), [](Edge &amp;a, Edge &amp;b)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a.weight &lt; b.weight;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;[v, w, weight] : edges)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(uf.isConnected(v, w)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            res += weight;</span><br><span class=\"line\">            num++;</span><br><span class=\"line\">            uf.unionElem(v, w);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num == points.size() - <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>官方题解：<a href=\"https://leetcode-cn.com/problems/min-cost-to-connect-all-points/solution/lian-jie-suo-you-dian-de-zui-xiao-fei-yo-kcx7/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/min-cost-to-connect-all-points/solution/lian-jie-suo-you-dian-de-zui-xiao-fei-yo-kcx7/</a></p>\n<h4 id=\"Appendix\"><a href=\"#Appendix\" class=\"headerlink\" title=\"Appendix\"></a>Appendix</h4><p>$\\text{Kruskal}$ 算法是一种常见并且好写的最小生成树算法，由 $\\text{Kruskal}$ 发明。该算法的基本思想是根据边的权值从小到大加入边，是一个贪心算法。</p>\n<p>其算法流程为：</p>\n<ol>\n<li><p>将图 $G={V,E}$ 中的所有边按照长度由小到大进行排序，等长的边可以按任意顺序。</p>\n</li>\n<li><p>初始化图 $G’$ 初始化为 ${V,\\varnothing}$，从前向后扫描排序后的边，如果扫描到的边 $e$ 在 $G’$ 中连接了两个不同的连通块,则将它插入 $G’$ 中。</p>\n</li>\n<li><p>最后得到的图 $G’$ 就是图 $G$ 的最小生成树。</p>\n</li>\n</ol>\n","categories":["LeetCode"],"tags":["并查集","图论","最小生成树"]},{"title":"LeetCode188-买卖股票的最佳时机IV","url":"/blog/2020/12/28/LeetCode188-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个整数数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 是一支给定的股票在第 <code>i</code> 天的价格。</p>\n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>k</strong> 笔交易。</p>\n<p><strong>注意</strong>：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/28/LeetCode188-买卖股票的最佳时机IV/188.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>本题是<a href>LeetCode122-买卖股票的最佳时机II</a>的升级版，这道题与其最大的区别在于限制交易次数为 <strong>k</strong> 次，所以选择在何时交易至关重要。</p>\n<p>因为买入卖出至少得两天，所以最大的交易次数不会超过 $prices.size()/2$ 。如果 $k\\geq{prices.size()/2}$ ，那么本题就退化为122题。</p>\n<h5 id=\"定义dp数组\"><a href=\"#定义dp数组\" class=\"headerlink\" title=\"定义dp数组\"></a>定义dp数组</h5><p>需要记录当前还剩下多少次交易次数，还有当天是否持有股票。</p>\n<p>$dp[i][k][0]$ 表示第 $i$ 天交易 $k$ 次且不持有股票可获得的最大收益。</p>\n<p>$dp[i][k][1]$ 表示第 $i$ 天交易 $k$ 次且持有股票可获得的最大收益。</p>\n<h5 id=\"状态转移方程\"><a href=\"#状态转移方程\" class=\"headerlink\" title=\"状态转移方程\"></a>状态转移方程</h5><ul>\n<li><p>第 $i$ 天不持有，前一天不持有或前一天持有今天卖出：<br>$$<br>dp[i][k][0] = max(dp[i - 1][k][0], dp[i - 1][k][1] + prices[i]);<br>$$</p>\n</li>\n<li><p>第 $i$ 天持有，前一天持有或前一天不持有今天买入，买入要减少一次交易次数：<br>$$<br>dp[i][j][1] = max(dp[i - 1][k][1], dp[i - 1][k - 1][0] - prices[i]);<br>$$</p>\n</li>\n</ul>\n<h5 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h5><p>在第一天时，如果买入股票收益为$-prices[0]$ ，没有买入时收益为 $0$。每一笔交易都需要初始化：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 剩余交易i次，获得收益初始化</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; ++i)&#123;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][i][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 在没有进行股票交易时不允许持有股票</span></span><br><span class=\"line\"><span class=\"comment\">// 这个系列中没有用到，记录学习一下</span></span><br><span class=\"line\">dp[<span class=\"number\">-1</span>][k][<span class=\"number\">1</span>] = -INF;</span><br><span class=\"line\">dp[i][<span class=\"number\">0</span>][<span class=\"number\">1</span>] = -INF;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k == <span class=\"number\">0</span> || prices.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k &gt;= prices.size() / <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> maxprofit(prices);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&gt; <span class=\"title\">dp</span><span class=\"params\">(prices.size(), <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;(k + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">2</span>, <span class=\"number\">0</span>)))</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// 最多交易i次，获得的收益</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; ++i)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][i][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = k; j &gt; <span class=\"number\">0</span>; --j)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 第i天不持有，前一天不持有或前一天持有今天卖出</span></span><br><span class=\"line\">                dp[i][j][<span class=\"number\">0</span>] = max(dp[i - <span class=\"number\">1</span>][j][<span class=\"number\">0</span>], dp[i - <span class=\"number\">1</span>][j][<span class=\"number\">1</span>] + prices[i]);</span><br><span class=\"line\">                <span class=\"comment\">// 第i天持有，前一天持有或前一天不持有今天买入</span></span><br><span class=\"line\">                dp[i][j][<span class=\"number\">1</span>] = max(dp[i - <span class=\"number\">1</span>][j][<span class=\"number\">1</span>], dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>][<span class=\"number\">0</span>] - prices[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[prices.size() - <span class=\"number\">1</span>][k][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxprofit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;prices)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> profit0 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> profit1 = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> new0 = max(profit0, profit1 + prices[i]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> new1 = max(profit1, profit0 - prices[i]);</span><br><span class=\"line\">            profit0 = new0;</span><br><span class=\"line\">            profit1 = new1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> profit0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"空间优化\"><a href=\"#空间优化\" class=\"headerlink\" title=\"空间优化\"></a>空间优化</h4><p>由于当天的状态只依赖于前一天，所以可以将三维压缩为二维：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k == <span class=\"number\">0</span> || prices.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k &gt;= prices.size() / <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> maxprofit(prices);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">dp</span><span class=\"params\">(k + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">2</span>))</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// 最多交易i次，获得的收益</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; ++i)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dp[i][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = k; j &gt; <span class=\"number\">0</span>; --j)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 第i天不持有，前一天不持有或前一天持有今天卖出</span></span><br><span class=\"line\">                dp[j][<span class=\"number\">0</span>] = max(dp[j][<span class=\"number\">0</span>], dp[j][<span class=\"number\">1</span>] + prices[i]);</span><br><span class=\"line\">                <span class=\"comment\">// 第i天持有，前一天持有或前一天不持有今天买入</span></span><br><span class=\"line\">                dp[j][<span class=\"number\">1</span>] = max(dp[j][<span class=\"number\">1</span>], dp[j - <span class=\"number\">1</span>][<span class=\"number\">0</span>] - prices[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[k][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxprofit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;prices)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> fit0 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> fit1 = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> new0 = max(fit0, fit1 + prices[i]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> new1 = max(fit1, fit0 - prices[i]);</span><br><span class=\"line\">            fit0 = new0;</span><br><span class=\"line\">            fit1 = new1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fit0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>股票问题系列通解（转载翻译）：<a href=\"https://leetcode-cn.com/circle/article/qiAgHn/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/circle/article/qiAgHn/</a></p>\n<h4 id=\"Appendix\"><a href=\"#Appendix\" class=\"headerlink\" title=\"Appendix\"></a>Appendix</h4><p>结束时持有 0 份股票的收益一定大于持有 1 份股票的收益？</p>\n<p>如果结束时持有 1 份股票，可能有两种情况，一是在最后一天买入，二是在之前买入。 如果是第一种情况，则最后一天选择不买入，收益一定更高，因为不用付出购买股票的钱。 如果是第二种情况，则一定可以在最后一天卖出，卖出操作一定会增加收益。 因此，无论是哪种情况，持有 0 份股票的收益一定大于持有 1 份股票的收益。</p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/\">LeetCode121-买卖股票的最佳时机</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/\">LeetCode122-买卖股票的最佳时机II</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode123-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII/\">LeetCode122-买卖股票的最佳时机III</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode188-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV/\">LeetCode122-买卖股票的最佳时机IV</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode309-%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F/\">LeetCode309-最佳买卖股票时机含冷冻期</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/17/LeetCode714-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9/\">LeetCode714-买卖股票的最佳时机含手续费</a></p>\n","categories":["LeetCode"],"tags":["动态规划","股票问题"]},{"title":"LeetCode17-电话号码的字母组合","url":"/blog/2020/02/16/LeetCode17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。<br>已知数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/02/16/LeetCode17-电话号码的字母组合/1.png\" style=\"zoom:80%;\">\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>字符串的长度不确定，所以用循环直接解决不实际；</p>\n<p>可以由下至上进行递归来求解，以“23”为例，如图：</p>\n<pre class=\"mermaid\">graph TD\nA[2] -->|a| B[3]\nA[2] -->|b| C[3]\nA[2] -->|c| D[3]\nB[3] -->|d| E[ad]\nB[3] -->|f| F[af]\nB[3] -->|g| G[ag]\nC[3] -->|d| H[bd]\nC[3] -->|f| I[bf]\nC[3] -->|g| J[bg]\nD[3] -->|d| K[cd]\nD[3] -->|f| L[cf]\nD[3] -->|g| M[cg]</pre>\n\n<p>记数字2为第0层，那么数字3为第1层，需要一个变量level，记录当前遍历数字的位置。递归表现在：如果选择了’a’，那么就需要再进行三次选择‘d’ ‘f’ ‘g’后才可以输出，再选择’b’，以此类推。即递归到最后一层，输出一次递归结果，全部递归完成，得到最终结果。</p>\n<p>具体算法如下：</p>\n<ul>\n<li>建立一个<strong>map</strong>，用来存储数字与其对应的字符串，当然，这里的数字是char类型。</li>\n<li>递归函数中，首先判断<strong>level</strong>，如果等于<strong>digits</strong>中数字的个数，那么将当前的结果并入<strong>res</strong>，然后返回。</li>\n<li>否则通过<strong>digits</strong>中的数字找到对应的字符串，然后遍历取出整个字符串，将每个字符串都加到当前的组合后面，再调用递归函数。</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">letterCombinations</span><span class=\"params\">(<span class=\"built_in\">string</span> digits)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(digits.empty()) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">string</span>&gt; num_str&#123;&#123;<span class=\"string\">'2'</span>,<span class=\"string\">\"abc\"</span>&#125;,&#123;<span class=\"string\">'3'</span>,<span class=\"string\">\"def\"</span>&#125;,&#123;<span class=\"string\">'4'</span>,<span class=\"string\">\"ghi\"</span>&#125;,&#123;<span class=\"string\">'5'</span>,<span class=\"string\">\"jkl\"</span>&#125;,</span><br><span class=\"line\">                                &#123;<span class=\"string\">'6'</span>,<span class=\"string\">\"mno\"</span>&#125;,&#123;<span class=\"string\">'7'</span>,<span class=\"string\">\"pqrs\"</span>&#125;,&#123;<span class=\"string\">'8'</span>,<span class=\"string\">\"tuv\"</span>&#125;,&#123;<span class=\"string\">'9'</span>,<span class=\"string\">\"wxyz\"</span>&#125;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; res;</span><br><span class=\"line\">        combin(digits,num_str,<span class=\"number\">0</span>,<span class=\"string\">\"\"</span>,res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">combin</span><span class=\"params\">(<span class=\"built_in\">string</span> digits,<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>,<span class=\"built_in\">string</span>&gt; num_str,<span class=\"keyword\">int</span> level,<span class=\"built_in\">string</span> out,<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; &amp;res)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(level == digits.length())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res.push_back(out);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> buf = num_str[digits[level]];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;buf.length();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            combin(digits,num_str,level+<span class=\"number\">1</span>,out+buf[i],res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["递归"]},{"title":"LeetCode200-岛屿数量","url":"/blog/2020/09/20/LeetCode200-%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p>\n<p>岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。</p>\n<p>此外，你可以假设该网格的四条边均被水包围。</p>\n<p><strong>使用并查集解决此问题</strong></p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/09/20/LeetCode200-岛屿数量/示例.png\" style=\"zoom:80%;\">\n\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>在<code>grid</code>中遇到<code>&#39;1&#39;</code>时，搜索其四周（上下左右），如果发现值也为<code>&#39;1&#39;</code>，那么将他们合并，同时将当前位置值置为<code>&#39;0&#39;</code>，直到遍历到最后一个元素。</p>\n<p>并查集进行初始化时，遇到<code>&#39;1&#39;</code>则增加计数值<code>count</code>，在后续的合并操作中，如果两者根节点不同，要进行合并时，计数值<code>count</code>要减1，说明两个节点进行了连接。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">unionFind</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; parent;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; rank;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unionFind(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt; &amp;grid)&#123;</span><br><span class=\"line\">        count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = grid.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = grid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[i][j] == <span class=\"string\">'1'</span>)&#123;</span><br><span class=\"line\">                    parent.push_back(n * i + j);</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> parent.push_back(<span class=\"number\">-1</span>);</span><br><span class=\"line\">                rank.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p == parent[p] ? p : parent[p] = find(parent[p]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionElem</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRoot == qRoot) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 对于根不同的情况，将其相连，计数减1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rank[pRoot] &lt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank[pRoot] &gt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[qRoot] = pRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 随便指一个</span></span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">            rank[qRoot]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(grid.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\">unionFind <span class=\"title\">uf</span><span class=\"params\">(grid)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = grid.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = grid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[i][j] == <span class=\"string\">'1'</span>)&#123;</span><br><span class=\"line\">                    grid[i][j] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; grid[i - <span class=\"number\">1</span>][j] == <span class=\"string\">'1'</span>) uf.unionElem(n * i + j, n * (i - <span class=\"number\">1</span>) + j);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i + <span class=\"number\">1</span> &lt; m &amp;&amp; grid[i + <span class=\"number\">1</span>][j] == <span class=\"string\">'1'</span>) uf.unionElem(n * i + j, n * (i + <span class=\"number\">1</span>) + j);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(j - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; grid[i][j - <span class=\"number\">1</span>] == <span class=\"string\">'1'</span>) uf.unionElem(n * i + j, n * i + j - <span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(j + <span class=\"number\">1</span> &lt; n &amp;&amp; grid[i][j + <span class=\"number\">1</span>] == <span class=\"string\">'1'</span>) uf.unionElem(n * i + j, n * i + j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> uf.getCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["并查集"]},{"title":"LeetCode189-旋转数组","url":"/blog/2021/01/08/LeetCode189-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个数组，将数组中的元素向右移动 <code>k</code> 个位置，其中 <code>k</code> 是非负数。</p>\n<p><strong>进阶</strong>：</p>\n<ul>\n<li>尽可能想出更多的解决方案，<del>至少有三种不同的方法可以解决这个问题</del>。</li>\n<li>你可以使用空间复杂度为 O(1) 的 <strong>原地</strong> 算法解决这个问题吗？</li>\n</ul>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/08/LeetCode189-旋转数组/189.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>根据 <code>k</code> 值，将 <code>nums</code> 数组分为前后两个部分。将后 <code>k</code> 个值截取出来得到的数组，拼接到剩余数组之前即可。空间复杂度为 <code>O(n)</code>。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 99% 9%</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        k %= nums.size(); <span class=\"comment\">// 如果k大于nums的长度，取余之后再进行处理</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">buf1</span><span class=\"params\">(nums.begin() + nums.size() - k, nums.end())</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">buf2</span><span class=\"params\">(nums.begin(), nums.begin() + nums.size() - k)</span></span>;</span><br><span class=\"line\">        buf1.insert(buf1.end(), buf2.begin(), buf2.end());</span><br><span class=\"line\">        nums = buf1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更进一步\"><a href=\"#更进一步\" class=\"headerlink\" title=\"更进一步\"></a>更进一步</h4><p>上述的空间复杂度为 <code>O(n)</code>，可以进一步压缩空间，使空间复杂度降为 <code>O(1)</code>。</p>\n<h5 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>具体思路如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">k = 3;</span><br><span class=\"line\">----&gt;--&gt; 移动后得到 --&gt;----&gt;</span><br><span class=\"line\">可以对原始序列进行如下操作：</span><br><span class=\"line\">----&gt;--&gt; 反转后 &lt;--&lt;----</span><br><span class=\"line\">其中&lt;-- 反转后 --&gt;&lt;----</span><br><span class=\"line\">其中&lt;---- 反转后 --&gt;----&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 库函数 50.50% 84.77%</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        k %= nums.size();</span><br><span class=\"line\">        reverse(nums.begin(), nums.end());</span><br><span class=\"line\">        reverse(nums.begin(), nums.begin() + k);</span><br><span class=\"line\">        reverse(nums.begin() + k, nums.end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 非库函数 50.50% 74.88%</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        k %= nums.size();</span><br><span class=\"line\">        reverse(nums, <span class=\"number\">0</span>, nums.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        reverse(nums, <span class=\"number\">0</span>, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">        reverse(nums, k, nums.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start &lt; end)&#123;</span><br><span class=\"line\">            swap(nums[start], nums[end]);</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">            end--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>虽然速度慢了点（实际上为 <code>O(2n) = O(n)</code> ），不过空间使用较之前还是低了很多。</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>官方题解及其评论区：<a href=\"https://leetcode-cn.com/problems/rotate-array/solution/xuan-zhuan-shu-zu-by-leetcode-solution-nipk/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/rotate-array/solution/xuan-zhuan-shu-zu-by-leetcode-solution-nipk/</a></p>\n","categories":["LeetCode"],"tags":["数组"]},{"title":"LeetCode205-同构字符串","url":"/blog/2020/12/27/LeetCode205-%E5%90%8C%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定两个字符串 <strong><em>s</em></strong> 和 <strong><em>t</em></strong>，判断它们是否是同构的。</p>\n<p>如果 <strong><em>s</em></strong> 中的字符可以被替换得到 <strong><em>t</em></strong> ，那么这两个字符串是同构的。</p>\n<p>所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。</p>\n<p>本题是<a href=\"http://www.xingyuzhao.ltd/blog/2020/12/16/LeetCode290-%E5%8D%95%E8%AF%8D%E8%A7%84%E5%BE%8B/#more\">LeetCode290-单词规律</a>的简化版。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/27/LeetCode205-同构字符串/205.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><h5 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h5><p>与<a href=\"http://www.xingyuzhao.ltd/blog/2020/12/16/LeetCode290-%E5%8D%95%E8%AF%8D%E8%A7%84%E5%BE%8B/#more\">LeetCode290-单词规律</a>基本一致。</p>\n<h5 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h5><p>此题字母大小写均可，数组初始化时为0，每对字符都应唯一映射为同一个数。如果两个数不同，返回<code>false</code>，否则返回<code>true</code>。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><h5 id=\"方法一-1\"><a href=\"#方法一-1\" class=\"headerlink\" title=\"方法一\"></a>方法一</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isIsomorphic</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">char</span>, <span class=\"built_in\">unordered_set</span>&lt;<span class=\"keyword\">char</span>&gt;&gt; map1;</span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">char</span>, <span class=\"built_in\">unordered_set</span>&lt;<span class=\"keyword\">char</span>&gt;&gt; map2;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class=\"line\">            map1[s[i]].insert(t[i]);</span><br><span class=\"line\">            map2[t[i]].insert(s[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map1[s[i]].size() &gt; <span class=\"number\">1</span> || map2[t[i]].size() &gt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"方法二-1\"><a href=\"#方法二-1\" class=\"headerlink\" title=\"方法二\"></a>方法二</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> map1[<span class=\"number\">256</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> map2[<span class=\"number\">256</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isIsomorphic</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map1[s[i]] != map2[t[i]]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            map1[s[i]] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            map2[t[i]] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>官方题解评论区：</p>\n<p><a href=\"https://leetcode-cn.com/problems/isomorphic-strings/solution/tong-gou-zi-fu-chuan-by-leetcode-solutio-s6fd/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/isomorphic-strings/solution/tong-gou-zi-fu-chuan-by-leetcode-solutio-s6fd/</a></p>\n","categories":["LeetCode"],"tags":["字符串","哈希表"]},{"title":"LeetCode228-汇总区间","url":"/blog/2021/01/10/LeetCode228-%E6%B1%87%E6%80%BB%E5%8C%BA%E9%97%B4/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个无重复元素的有序整数数组 <code>nums</code> 。</p>\n<p>返回 <strong>恰好覆盖数组中所有数字</strong> 的 <strong>最小有序</strong> 区间范围列表。也就是说，<code>nums</code> 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 <code>nums</code> 的数字 <code>x</code> 。</p>\n<p>列表中的每个区间范围 <code>[a,b]</code> 应该按如下格式输出：</p>\n<ul>\n<li><code>&quot;a-&gt;b&quot;</code> ，如果 <code>a != b</code></li>\n<li><code>&quot;a&quot;</code> ，如果 <code>a == b</code></li>\n</ul>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/10/LeetCode228-汇总区间/228.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>如果序列满足 <code>nums[i] == nums[i - 1]</code> 代表它们是同一个区间。</p>\n<p>需要记录区间的起始位置的终止位置，使用双指针，<code>i</code> 代表当前区间的起始位置， <code>j</code> 代表当前区间的终止位置。</p>\n<p>遍历结束时，还需要<strong>把最后一个区间加入答案中</strong>，如果最后一个区间的 <code>j - i == 1</code>，说明最后一个区间只有一个数，否则，需要再加入一个新的区间。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">summaryRanges</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.empty()) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; ret;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &lt; nums.size())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[j] == nums[j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j == i + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    ret.push_back(to_string(nums[i]));</span><br><span class=\"line\">                    j++;</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    ret.push_back(to_string(nums[i]) + <span class=\"string\">\"-&gt;\"</span> + to_string(nums[j - <span class=\"number\">1</span>]));</span><br><span class=\"line\">                    i = j;</span><br><span class=\"line\">                    j++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == j - <span class=\"number\">1</span>) ret.push_back(to_string(nums[i]));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i != j - <span class=\"number\">1</span>) ret.push_back(to_string(nums[i]) + <span class=\"string\">\"-&gt;\"</span> + to_string(nums[j - <span class=\"number\">1</span>]));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["双指针"]},{"title":"LeetCode290-单词规律","url":"/blog/2020/12/16/LeetCode290-%E5%8D%95%E8%AF%8D%E8%A7%84%E5%BE%8B/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一种规律 <code>pattern</code> 和一个字符串 <code>str</code> ，判断 <code>str</code> 是否遵循相同的规律。</p>\n<p>这里的 <code>遵循</code> 指完全匹配，例如， <code>pattern</code> 里的每个字母和字符串 <code>str</code> 中的每个非空单词之间存在着双向连接的对应规律。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/16/LeetCode290-单词规律/290.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>字母和单词一一对应时返回true，否则返回false。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">wordPattern</span><span class=\"params\">(<span class=\"built_in\">string</span> pattern, <span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">istringstream</span> <span class=\"title\">istr</span><span class=\"params\">(s)</span></span>;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; str;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> word;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(istr &gt;&gt; word)&#123;</span><br><span class=\"line\">            str.push_back(word);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pattern.size() != str.size()) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">char</span>, <span class=\"built_in\">unordered_set</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; map1;</span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">unordered_set</span>&lt;<span class=\"keyword\">char</span>&gt;&gt; map2;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pattern.size(); ++i)&#123;</span><br><span class=\"line\">            map1[pattern[i]].insert(str[i]);</span><br><span class=\"line\">            map2[str[i]].insert(pattern[i]);</span><br><span class=\"line\">            <span class=\"comment\">// 如果不是一一对应，返回false</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map1[pattern[i]].size() &gt; <span class=\"number\">1</span> || map2[str[i]].size() &gt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["哈希表"]},{"title":"LeetCode239-滑动窗口的最大值","url":"/blog/2021/01/02/LeetCode239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。</p>\n<p>返回滑动窗口中的最大值。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/02/LeetCode239-滑动窗口的最大值/239.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>首先使用优先队列存储 <code>nums</code> 的前 <code>k</code> 个值，队首就是第一个窗口最大的值。</p>\n<p>接着从第 <code>k</code> 个位置开始，将序列入队，每次最大的值都出现在队首。但是<strong>当前的队首不一定是当前窗口中的元素</strong>，此时队列的长度可能大于 <code>k</code>。如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nums = &#123;3,1,1&#125;, k = 2;</span><br><span class=\"line\">1. &#123;3,1&#125; max = 3; // 队列中元素为3,1</span><br><span class=\"line\">2. &#123;1,1&#125; max = 1; // 队列中元素为3,1,1，此时需要将3出队</span><br></pre></td></tr></table></figure>\n\n<p>如果不是当前窗口中的元素，只有可能是上一个窗口中的最大值，它一定是在当前窗口左端点的左侧，就需要将队首出队，直到队首元素在当前窗口内。</p>\n<p>所以优先队列需要同时存储当前序列的值和坐标。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">maxSlidingWindow</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        priority_queue&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; q;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i)&#123;</span><br><span class=\"line\">            q.push(&#123;nums[i], i&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans&#123;q.top().first&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = k; i &lt; nums.size(); ++i)&#123;</span><br><span class=\"line\">            q.push(&#123;nums[i], i&#125;);</span><br><span class=\"line\">            <span class=\"comment\">// 队首元素不在当前窗口内</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(q.top().second &lt;= i - k)&#123;</span><br><span class=\"line\">                q.pop();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans.push_back(q.top().first);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>官方题解：<a href=\"https://leetcode-cn.com/problems/sliding-window-maximum/solution/hua-dong-chuang-kou-zui-da-zhi-by-leetco-ki6m/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/sliding-window-maximum/solution/hua-dong-chuang-kou-zui-da-zhi-by-leetco-ki6m/</a></p>\n","categories":["LeetCode"],"tags":["优先队列"]},{"title":"LeetCode300-最长上升子序列","url":"/blog/2020/05/26/LeetCode300-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/05/26/LeetCode300-最长上升子序列/sl.png\" style=\"zoom:80%;\">\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>这是一道动态规划的经典入门题，这里的子序列不一定是连续的。比如示例中<code>[2, 3, 7, 101]</code>，只要是递增的，就是上升子序列，我需要找到这里面最长的上升子序列的长度。</p>\n<p>动态规划一般是由历史信息推断当前信息的，并且历史信息是是独立的子问题，相互之间不会影响。现在考虑一个dp数组，如果说dp[0]到dp[i-1]都可以得到了，如果可以推出dp[i]，就可以得到dp数组的全部结果。</p>\n<h4 id=\"一、定义dp数组的含义\"><a href=\"#一、定义dp数组的含义\" class=\"headerlink\" title=\"一、定义dp数组的含义\"></a>一、定义dp数组的含义</h4><p>我们可以定义dp[i]表示以nums[i]这个数结尾的最长上升子序列的长度。举两个例子：</p>\n<img src=\"/blog/2020/05/26/LeetCode300-最长上升子序列/ex1.png\" style=\"zoom:80%;\">\n\n<p>根据这个定义，最终结果(子序列的最大长度)就是dp数组中的最大值。</p>\n<h4 id=\"二、状态转移方程\"><a href=\"#二、状态转移方程\" class=\"headerlink\" title=\"二、状态转移方程\"></a>二、状态转移方程</h4><p>这就是动态规划的重头戏了，要思考如何进行状态转移，这里就可以使用数学归纳的思想：</p>\n<p>我们已经知道了 dp[0]到dp[4] 的所有结果，我们如何通过这些已知结果推出 dp[5] 呢？</p>\n<img src=\"/blog/2020/05/26/LeetCode300-最长上升子序列/ex2.png\" style=\"zoom:80%;\">\n\n<p>根据刚才我们对 dp 数组的定义，现在想求 dp[5] 的值，也就是想求以 nums[5] 为结尾的最长递增子序列。</p>\n<p>nums[5] = 7，既然是递增子序列，我们只要找到前面那些结尾比 7 小的子序列，然后把 7 接到最后，就可以形成一个新的递增子序列，而且这个新的子序列长度加一。</p>\n<p>当然，可能形成很多种新的子序列，但是我们只要最长的，把最长子序列的长度作为 dp[5] 的值即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[i] &gt; nums[j]) </span><br><span class=\"line\">        dp[i] = max(dp[i], dp[j] + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"meta\"># dp数组需要初始化为1，因为自己本身也算一个序列</span></span><br><span class=\"line\"># 当i = <span class=\"number\">5</span>时</span><br><span class=\"line\"># nums[<span class=\"number\">5</span>] &gt; nums[<span class=\"number\">2</span>] dp[<span class=\"number\">5</span>] = max&#123;dp[<span class=\"number\">5</span>], dp[<span class=\"number\">2</span>] + <span class=\"number\">1</span>&#125; = max&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125; = <span class=\"number\">2</span></span><br><span class=\"line\"># nums[<span class=\"number\">5</span>] &gt; nums[<span class=\"number\">3</span>] dp[<span class=\"number\">5</span>] = max&#123;dp[<span class=\"number\">5</span>], dp[<span class=\"number\">3</span>] + <span class=\"number\">1</span>&#125; = max&#123;<span class=\"number\">2</span>, <span class=\"number\">2</span> + <span class=\"number\">1</span>&#125; = <span class=\"number\">3</span></span><br><span class=\"line\"># nums[<span class=\"number\">5</span>] &gt; nums[<span class=\"number\">4</span>] dp[<span class=\"number\">5</span>] = max&#123;dp[<span class=\"number\">5</span>], dp[<span class=\"number\">4</span>] + <span class=\"number\">1</span>&#125; = max&#123;<span class=\"number\">3</span>, <span class=\"number\">2</span> + <span class=\"number\">1</span>&#125; = <span class=\"number\">3</span></span><br><span class=\"line\"># 所以dp[<span class=\"number\">5</span>] = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>根据上述的状态转移公式，就可以得到dp数组的所有值，我们再取其中的最大值，就是答案。</p>\n<h4 id=\"三、代码实现\"><a href=\"#三、代码实现\" class=\"headerlink\" title=\"三、代码实现\"></a>三、代码实现</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLIS</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(nums.size(), <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i] &gt; nums[j])</span><br><span class=\"line\">                    dp[i] = max(dp[i],dp[j] + <span class=\"number\">1</span>); </span><br><span class=\"line\">                <span class=\"comment\">//dp[i]是指历史中的最大长度，否则后面的长度+1小于历史最大长度时，会覆盖</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *max_element(dp.begin(), dp.end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>《labuladong的算法小抄》 动态规划设计：最长递增子序列</p>\n","categories":["LeetCode"],"tags":["动态规划"]},{"title":"LeetCode309-最佳买卖股票时机含冷冻期","url":"/blog/2020/12/28/LeetCode309-%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个整数数组，其中第 $i$ 个元素代表了第 $i$ 天的股票价格 。</p>\n<ul>\n<li><p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p>\n</li>\n<li><p>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。<br>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/28/LeetCode309-最佳买卖股票时机含冷冻期/309.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>本题与其他股票问题不同之处在于<strong>卖出之后至少间隔一天才能够买入</strong>，可以多次买入卖出。</p>\n<h5 id=\"定义dp数组\"><a href=\"#定义dp数组\" class=\"headerlink\" title=\"定义dp数组\"></a>定义dp数组</h5><p>$dp[i][0]$ 表示第 $i$ 天不持有股票时的最大收益。</p>\n<p>$dp[i][1]$ 表示第 $i$ 天持有股票时的最大收益。</p>\n<h5 id=\"状态转移方程\"><a href=\"#状态转移方程\" class=\"headerlink\" title=\"状态转移方程\"></a>状态转移方程</h5><ul>\n<li><p>如果当天未持有股票，那么前一天可以未持有股票或者前一天持有股票，当天卖出：<br>$$<br>dp[i][0]=max(dp[i-1][0],dp[i-1][1]+prices[i])<br>$$</p>\n</li>\n<li><p>如果当天持有股票，那么前一天可以持有股票或者前两天未持有股票，当天买入（如果前一天持有且卖出股票，当天就不能买入了；前一天如果未持有且没有卖出股票，就与前两天未持有，当天买入等价了）：<br>$$<br>dp[i][1]=max(dp[i-1][1],dp[i-2][0]-prices[i])<br>$$</p>\n</li>\n</ul>\n<h5 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h5><p>在第一天时，如果买入股票收益为$-prices[0]$ ，没有买入时收益为 $0$。假设有第零天，那么收益应也为 $0$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">dp[<span class=\"number\">-1</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>; <span class=\"comment\">// 用dp_0 = 0代替</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">dp</span><span class=\"params\">(prices.size(), <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">2</span>))</span></span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dp_0 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>] + prices[i]);</span><br><span class=\"line\">            dp[i][<span class=\"number\">1</span>] = max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>], (i - <span class=\"number\">2</span> &lt; <span class=\"number\">0</span> ? dp_0 : dp[i - <span class=\"number\">2</span>][<span class=\"number\">0</span>]) - prices[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[prices.size() - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"空间优化\"><a href=\"#空间优化\" class=\"headerlink\" title=\"空间优化\"></a>空间优化</h5><p>由于当天的状态只依赖于前一天，所以用两个变量来表示当天持有或者未持有的最大收益：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prices.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> profit0 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> profit1 = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> profit = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> new0 = max(profit0, profit1 + prices[i]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> new1 = max(profit1, profit - prices[i]);</span><br><span class=\"line\">            profit = profit0;</span><br><span class=\"line\">            profit0 = new0;</span><br><span class=\"line\">            profit1 = new1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> profit0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>股票问题系列通解（转载翻译）：<a href=\"https://leetcode-cn.com/circle/article/qiAgHn/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/circle/article/qiAgHn/</a></p>\n<h4 id=\"Appendix\"><a href=\"#Appendix\" class=\"headerlink\" title=\"Appendix\"></a>Appendix</h4><p>结束时持有 0 份股票的收益一定大于持有 1 份股票的收益？</p>\n<p>如果结束时持有 1 份股票，可能有两种情况，一是在最后一天买入，二是在之前买入。 如果是第一种情况，则最后一天选择不买入，收益一定更高，因为不用付出购买股票的钱。 如果是第二种情况，则一定可以在最后一天卖出，卖出操作一定会增加收益。 因此，无论是哪种情况，持有 0 份股票的收益一定大于持有 1 份股票的收益。</p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/\">LeetCode121-买卖股票的最佳时机</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/\">LeetCode122-买卖股票的最佳时机II</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode123-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII/\">LeetCode122-买卖股票的最佳时机III</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode188-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV/\">LeetCode122-买卖股票的最佳时机IV</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode309-%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F/\">LeetCode309-最佳买卖股票时机含冷冻期</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/17/LeetCode714-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9/\">LeetCode714-买卖股票的最佳时机含手续费</a></p>\n","categories":["LeetCode"],"tags":["动态规划","股票问题"]},{"title":"LeetCode387-字符串中的第一个唯一字符","url":"/blog/2020/12/23/LeetCode387-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/23/LeetCode387-字符串中的第一个唯一字符/387.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>用一个哈希表记录一下每个字母出现的次数，返回第一个出现次数为1的字母位置即可。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">firstUniqChar</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt[<span class=\"number\">26</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;ch : s)</span><br><span class=\"line\">            cnt[ch - <span class=\"string\">'a'</span>]++;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cnt[s[i] - <span class=\"string\">'a'</span>] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                pos = i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;      </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["字符串","哈希表"]},{"title":"LeetCode316-去除重复字母","url":"/blog/2020/12/20/LeetCode316-%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AF%8D/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给你一个字符串 <code>s</code> ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 <strong>返回结果的字典序最小</strong>（要求不能打乱其他字符的相对位置）。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/20/LeetCode316-去除重复字母/316.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>对于一个字符串来说，如果 $s[i]&gt;s[i+1]$ ，去除此时的 $s[i]$ 可以使剩下的字符串字典序最小。我们将 $s[i]$ 称为<strong>关键字符</strong>。</p>\n<p>从前往后遍历字符串。假定在 $s[i-1]$ 之前所有的<strong>关键字符</strong>都已经去除，那么在扫描 $s[i]$ 时，新出现的<strong>关键字符</strong>只能出现在 $s[i]$ 或者其后的位置。</p>\n<p>所以用栈来维护去除<strong>关键字符</strong>后得到的字符串。如果栈顶字符大于 $s[i]$ ，说明栈顶字符应当被去除，此时新的栈顶字符就与 $s[i]$ 相邻（保持相对位置）。重复此操作，直到栈为空或者栈顶字符不大于 $s[i]$ 。</p>\n<p>还需要满足 $s$ 中的每个字符都出现在新字符串中且只出现一次，所以还需要考虑：</p>\n<ul>\n<li>如果字符 $s[i]$ 已经存在于栈中，则不再将此字符加入栈，所以需要记录字符是否被使用过</li>\n<li>弹出栈顶字符时，如果后面再没有此字符（此字符剩余数量为0），则不能弹出，所以需要记录每个字符出现的次数；如果可以弹出，需要将此字符再次置为未使用的状态</li>\n</ul>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">removeDuplicateLetters</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt[<span class=\"number\">26</span>] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">// 记录字符使用次数</span></span><br><span class=\"line\">        <span class=\"built_in\">bitset</span>&lt;26&gt; vis; <span class=\"comment\">// 记录字符是否被使用</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;ch : s) cnt[ch - <span class=\"string\">'a'</span>]++;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">char</span>&gt; st;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;ch : s)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果字符没被使用</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!vis[ch - <span class=\"string\">'a'</span>])&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果栈不为空且栈顶字符大于当前字符，需要看是否弹出</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span>(!st.empty() &amp;&amp; st.top() &gt; ch)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果此字符串剩余次数不为0，可以弹出，并且此字符置为「未使用」</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cnt[st.top() - <span class=\"string\">'a'</span>] &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                        vis[st.top() - <span class=\"string\">'a'</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        st.pop();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 当前字符入栈，并且置为「已使用」</span></span><br><span class=\"line\">                vis[ch - <span class=\"string\">'a'</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                st.push(ch);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 当前字符被使用了一次</span></span><br><span class=\"line\">            cnt[ch - <span class=\"string\">'a'</span>]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取出栈中字符并输出</span></span><br><span class=\"line\">        <span class=\"built_in\">string</span> res;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!st.empty())&#123;</span><br><span class=\"line\">            res += st.top();</span><br><span class=\"line\">            st.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reverse(res.begin(), res.end());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>官方题解：</p>\n<p><a href=\"https://leetcode-cn.com/problems/remove-duplicate-letters/solution/qu-chu-zhong-fu-zi-mu-by-leetcode-soluti-vuso/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/remove-duplicate-letters/solution/qu-chu-zhong-fu-zi-mu-by-leetcode-soluti-vuso/</a></p>\n","categories":["LeetCode"],"tags":["贪心算法","单调栈"]},{"title":"LeetCode330-按要求补齐数组","url":"/blog/2020/12/29/LeetCode330-%E6%8C%89%E8%A6%81%E6%B1%82%E8%A1%A5%E9%BD%90%E6%95%B0%E7%BB%84/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个已排序的正整数数组 $nums$，和一个正整数 $n$ 。从 <code>[1, n]</code> 区间内选取任意个数字补充到 $nums$ 中，使得 <code>[1, n]</code> 区间内的任何数字都可以用 $nums$ 中某几个数字的和来表示。请输出满足上述要求的最少需要补充的数字个数。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/29/LeetCode330-按要求补齐数组/330.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>如果区间 $[1,x)$ 的所有数都被覆盖了：</p>\n<ul>\n<li>如果$nums[i]\\in[1,x)$，那么区间 $[1+nums[i],x+nums[i])$ 中所有数也会被覆盖。由于 $nums[i]\\geq1$ ，则此时 $x\\in[1+nums[i],x+nums[i])$，覆盖区间可以更新为 $[1,x+nums[i])$。</li>\n<li>如果 $nums[i]$ 恰好等于 $x$ ，那么覆盖区间变为 $[1,x+nums[i])$。不需要补充 $x$ 。</li>\n<li>否则，补充 $x$ ，则区间 $[1,x]$ 全部覆盖；并且可以得到覆盖区间 $[1+x,x+x)=[x+1,2x)$。两者取交集得到此时覆盖数字区间 $[1,2x)$，此时覆盖的数字最多（如果取小于 $x$ 的数，覆盖区间会变小，这是不希望看到的， $x$ 不能取两次，每个数字只能取一次）。</li>\n<li>当 $x&gt;n$ 时，就可以结束了。</li>\n</ul>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">minPatches</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始区间为空，表示已经覆盖</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> times = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x &lt;= n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &lt; nums.size() &amp;&amp; nums[index] &lt; x)&#123;</span><br><span class=\"line\">                x += nums[index++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(index &lt; nums.size() &amp;&amp; nums[index] == x)&#123;</span><br><span class=\"line\">                x += nums[index++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                x &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                times++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> times;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>官方题解：<a href=\"https://leetcode-cn.com/problems/patching-array/solution/an-yao-qiu-bu-qi-shu-zu-by-leetcode-solu-klp1/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/patching-array/solution/an-yao-qiu-bu-qi-shu-zu-by-leetcode-solu-klp1/</a></p>\n","categories":["LeetCode"],"tags":["贪心算法","数学"]},{"title":"LeetCode365-水壶问题","url":"/blog/2020/12/25/LeetCode365-%E6%B0%B4%E5%A3%B6%E9%97%AE%E9%A2%98/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>有两个容量分别为 <code>x</code> 升和 <code>y</code> 升的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 <code>z</code> 升的水？</p>\n<p>如果可以，最后请用以上水壶中的一或两个来盛放取得的 <code>z</code> 升水。</p>\n<p>你允许：</p>\n<ul>\n<li>装满任意一个水壶</li>\n<li>清空任意一个水壶</li>\n<li>从一个水壶向另外一个水壶倒水，直到装满或者倒空</li>\n</ul>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/25/LeetCode365-水壶问题/365.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>这道题实际上是一个数学问题，需要有先验知识——<a href=\"https://baike.baidu.com/item/%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/5186593?fromtitle=%E8%B4%9D%E7%A5%96%E5%AE%9A%E7%90%86&fromid=5185441\" target=\"_blank\" rel=\"noopener\">贝祖定理</a>：若 $a, b$ 是整数，且$gcd(a,b)=d$，那么对于任意的整数 $x$$，y$，$ax+by$ 都一定是 $d$ 的倍数，特别地，一定存在整数 $x$,  $y$，使 $ax+by=d$ 成立。$gcd(a,b)$ 用来求 $a, b$ 的最大公约数，称为辗转相除法。</p>\n<p>实际上，每次操作只会让桶里的水增加<code>x</code>或增加<code>y</code>，减少<code>x</code>或减少<code>y</code>，两个桶不可能同时有水且不满，观察所有的操作都至少有一个桶是空的或满的。如果往一个不满的桶里加水或将其倒空是没有意义的，这是因为：</p>\n<ul>\n<li>向有水且不满的桶加水是没有意义的：<ul>\n<li>另一个桶满，加水等价于从初始状态给两个桶加满水</li>\n<li>另一个桶空，加水等价于将不满的桶加满</li>\n</ul>\n</li>\n<li>将有水且不满的桶倒掉是没有意义的：<ul>\n<li>另一个桶满，倒水等价于从初始状态给另一个桶加满水</li>\n<li>另一个桶空，倒水等价于两个桶都没水，回到初始状态</li>\n</ul>\n</li>\n</ul>\n<p>所以每次操作只会给水的总量带来<code>x</code>或<code>y</code>的变化量，所以目标为找到一组 $a, b$ ，满足：<br>$$<br>ax+by=z<br>$$<br>根据贝祖定理，当且仅当<code>z</code>是  $a, b$ 最大公约数倍数时，有解。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a &lt; b) swap(a, b);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b == <span class=\"number\">0</span> ? a : gcd(b, a % b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">canMeasureWater</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> z)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x + y &lt; z) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == <span class=\"number\">0</span> || y == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> z == <span class=\"number\">0</span> || x + y == z;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(z % gcd(x, y) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>官方题解：</p>\n<p><a href=\"https://leetcode-cn.com/problems/water-and-jug-problem/solution/shui-hu-wen-ti-by-leetcode-solution/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/water-and-jug-problem/solution/shui-hu-wen-ti-by-leetcode-solution/</a></p>\n<h4 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h4><p>要满足$z\\le{x+y}$，且这样的 $a, b$ 存在，目标就可以达成，是因为：</p>\n<ul>\n<li><p>若 $a\\ge0, b\\ge0$时，可以达成</p>\n</li>\n<li><p>若 $a&lt;0$ ，那么执行以下操作：</p>\n<ul>\n<li>将<code>y</code>壶倒满</li>\n<li>将<code>y</code>壶中水倒入<code>x</code>壶</li>\n<li>如果<code>y</code>不为空，那么<code>x</code>肯定是满的，把<code>x</code><strong>倒空</strong>，再把<code>y</code>剩下的倒入<code>x</code>壶</li>\n</ul>\n<p>重复以上操作直到某一步<code>x</code>壶进行了 $a$ 次倒空，<code>y</code>壶进行了 $b$ 次倒水操作。</p>\n</li>\n<li><p>若 $b&lt;0$，方法同上，<code>x</code>与<code>y</code>互换。</p>\n</li>\n</ul>\n","categories":["LeetCode"],"tags":["数学"]},{"title":"LeetCode376-摆动序列","url":"/blog/2020/12/12/LeetCode376-%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。</p>\n<p>例如， <code>[1,7,4,9,2,5]</code> 是一个摆动序列，因为差值 <code>(6,-3,5,-7,3)</code> 是正负交替出现的。相反, <code>[1,4,7,2,5]</code> 和 <code>[1,7,4,5,5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p>\n<p>给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/12/LeetCode376-摆动序列/376.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>可以找每次的拐点进行计数，最后再加上首尾两个点即可，比如序列$[1,7,4,9,2,5]$，有4个拐点，加上首尾一共6个点：</p>\n<img src=\"/blog/2020/12/12/LeetCode376-摆动序列/1.png\" style=\"zoom:80%;\">\n\n<p>需要考虑特殊情况：</p>\n<ol>\n<li>连续几个相同的数恰好都是拐点，如$[1,12,12,12,1]$：</li>\n</ol>\n<img src=\"/blog/2020/12/12/LeetCode376-摆动序列/2.png\" style=\"zoom:80%;\">\n\n<ol start=\"2\">\n<li>输入的序列没有拐点且全部是同一个数，如$[1,1,1]$：</li>\n</ol>\n<img src=\"/blog/2020/12/12/LeetCode376-摆动序列/3.png\" style=\"zoom:80%;\">\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">wiggleMaxLength</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> guaidian = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.size() - <span class=\"number\">1</span>; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i - <span class=\"number\">1</span>] &gt; nums[i] &amp;&amp; nums[i + <span class=\"number\">1</span>] &gt; nums[i])&#123;</span><br><span class=\"line\">                guaidian++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[i - <span class=\"number\">1</span>] &lt; nums[i] &amp;&amp; nums[i + <span class=\"number\">1</span>] &lt; nums[i])&#123;</span><br><span class=\"line\">                guaidian++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 这一步是为了去除相同的点，如果nums[i]与nums[i + 1]相同，</span></span><br><span class=\"line\">            <span class=\"comment\">// 那么就让nums[i]等于nums[i - 1]，</span></span><br><span class=\"line\">            <span class=\"comment\">// 可以保证nums[i + 1]与改变之后的nums[i]不同。</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i + <span class=\"number\">1</span> &lt; nums.size() - <span class=\"number\">1</span> &amp;&amp; nums[i] == nums[i + <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                nums[i] = nums[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(guaidian == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> f = unique(nums.begin(), nums.end());</span><br><span class=\"line\">            <span class=\"comment\">// 输入的序列全部都是同一个数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f - <span class=\"number\">1</span> == nums.begin())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> guaidian + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["贪心算法"]},{"title":"LeetCode435-无重叠区间","url":"/blog/2020/12/31/LeetCode435-%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p>\n<p><strong>注意</strong>:</p>\n<p>可以认为区间的终点总是大于它的起点。<br>区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/31/LeetCode435-无重叠区间/435.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>首先对二维数组排序，对其中的每个一维数组，先按照元素的第一个升序排列，如果第一个元素相同，再按照第二个升序排列。</p>\n<p>如此一来，为了使移除的区间数最小，那么就需要<strong>从重叠的区间中选出右端点最小的一个</strong>，那样就可以尽可能留下更多不重叠的空间（所以说只按照第二个元素升序排列也是可以的）。</p>\n<p>排序后，如果前一个数组的第二个元素在第二个数组范围之内，就留下前一个数组，用它把第二个数组覆盖；如果前一个数组第二个元素大于第二个数组的后一个元素，那么留下第二个数组，不用进行覆盖，但是前一个数组是需要移除的。这两种情况下，都需要移除操作。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">eraseOverlapIntervals</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class=\"line\">        sort(intervals.begin(), intervals.end(), [](<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;v1, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;v2) -&gt; <span class=\"keyword\">bool</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v1[<span class=\"number\">0</span>] &lt; v2[<span class=\"number\">0</span>])</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(v1[<span class=\"number\">0</span>] == v2[<span class=\"number\">0</span>])</span><br><span class=\"line\">                <span class=\"keyword\">return</span> v1[<span class=\"number\">1</span>] &lt; v2[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// sort(intervals.begin(), intervals.end());</span></span><br><span class=\"line\">        <span class=\"comment\">// for(auto &amp;v1 : intervals)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     for(auto &amp;v2 : v1)</span></span><br><span class=\"line\">        <span class=\"comment\">//         cout &lt;&lt; v2 &lt;&lt; \" \";</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; intervals.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(intervals[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>] &gt; intervals[i][<span class=\"number\">0</span>] &amp;&amp; intervals[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>] &lt;= intervals[i][<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                intervals[i][<span class=\"number\">0</span>] = intervals[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">                intervals[i][<span class=\"number\">1</span>] = intervals[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(intervals[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>] &gt; intervals[i][<span class=\"number\">0</span>] &amp;&amp; intervals[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>] &gt; intervals[i][<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>C++ STL sort作用于二维vector 效果和应用：</p>\n<p><a href=\"https://blog.csdn.net/y625658683/article/details/104154089\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/y625658683/article/details/104154089</a></p>\n<h4 id=\"Appendix\"><a href=\"#Appendix\" class=\"headerlink\" title=\"Appendix\"></a>Appendix</h4><p>对于二维数组，<code>sort</code>是把<code>vector&lt;int&gt;</code>作为一个一维数组对象，整体进行比较和排序。</p>\n<p>默认比较两个<code>int</code>向量的规则是：</p>\n<p>从第一个元素开始比，第一个元素小的，整个向量就小，如果第一个元素一样，再比较第二个，第二个元素小的，整个向量小，依此类推。<code>sort</code>默认按从小到大排序。</p>\n","categories":["LeetCode"],"tags":["贪心算法"]},{"title":"LeetCode389-找不同","url":"/blog/2020/12/18/LeetCode389-%E6%89%BE%E4%B8%8D%E5%90%8C/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定两个字符串 <strong><em>s</em></strong> 和 <strong><em>t</em></strong>，它们只包含小写字母。</p>\n<p>字符串 <strong><em>t</em></strong> 由字符串 <strong><em>s</em></strong> 随机重排，然后在随机位置添加一个字母。</p>\n<p>请找出在 <strong><em>t</em></strong> 中被添加的字母。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/18/LeetCode389-找不同/389.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>用一个长为26的数组记录在 <strong><em>t</em></strong> 中所有字母的出现次数，然后再去遍历 <strong><em>s</em></strong> ，对每次遇到的字母对应的次数减一，最后再遍历这个数组，如果有出现次数为1的字母，那么这就是 <strong><em>t</em></strong> 中被添加的字母。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">findTheDifference</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> <span class=\"built_in\">map</span>[<span class=\"number\">26</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;ch : t)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">map</span>[ch - <span class=\"string\">'a'</span>]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;ch : s)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">map</span>[ch - <span class=\"string\">'a'</span>]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">map</span>[i] == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">char</span>(i + <span class=\"string\">'a'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">char</span>(<span class=\"string\">' '</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["哈希表"]},{"title":"LeetCode399-除法求值","url":"/blog/2021/01/06/LeetCode399-%E9%99%A4%E6%B3%95%E6%B1%82%E5%80%BC/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给你一个变量对数组 <code>equations</code> 和一个实数值数组 <code>values</code> 作为已知条件，其中 <code>equations[i] = [Ai, Bi]</code> 和 <code>values[i]</code> 共同表示等式 <code>Ai / Bi = values[i]</code> 。每个 <code>Ai</code> 或 <code>Bi</code> 是一个表示单个变量的字符串。</p>\n<p>另有一些以数组 <code>queries</code> 表示的问题，其中 <code>queries[j] = [Cj, Dj]</code> 表示第 <code>j</code> 个问题，请你根据已知条件找出 <code>Cj / Dj = ?</code> 的结果作为答案。</p>\n<p>返回 所有问题的答案 。如果存在某个无法确定的答案，则用 <code>-1.0</code> 替代这个答案。</p>\n<p><strong>注意</strong>：输入总是有效的。你可以假设除法运算中不会出现除数为 <code>0</code> 的情况，且不存在任何矛盾的结果。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/06/LeetCode399-除法求值/399.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>首先得理解题目意思：</p>\n<ul>\n<li><code>equations</code>和<code>values</code>：<code>equations</code>中每个一维序列表示一对数进行相除（前 / 后），得到的结果就是<code>values</code>中相应位置的值，以上作为已知条件。</li>\n<li><code>queries</code>：包含两个元素，目的是要我们求：第一个元素 / 第二个元素 = ？</li>\n</ul>\n<p>我们可以将其抽象为一个<strong>带权图</strong>问题，对于<code>queries</code>中的两个元素 <code>x</code>, <code>y</code> ，是否有一条路径可以从 <code>x</code> 到 <code>y</code> ，并求出经过这条路径的消耗是多少。由于两个元素的比值是一个常量，所以<strong>如果有多条路径，消耗是一样的</strong>，选其中一条就可以。</p>\n<p>以示例1为例，对于<code>a/c</code>，可以由<code>a/b * b/c</code>得到，也就是<code>a-&gt;b</code>与<code>b-&gt;c</code>两条路径的权值相乘得到，所以路径上的消耗，就是<strong>所走过的每条路径的权值之积</strong>。</p>\n<p>由于每个基本元素类型都是<code>string</code>，所以先对所有的元素映射到数字域，方便查找：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将equations中的string映射到0，1，2，3...</span></span><br><span class=\"line\"><span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; <span class=\"built_in\">map</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;s : equations)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;ch : s)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(!<span class=\"built_in\">map</span>.count(ch)) <span class=\"built_in\">map</span>[ch] = cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下一步就是建图，使用邻接表，并且路径之间是<strong>双向</strong>的，权值<strong>互为倒数</strong>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; G;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt;&gt; W;</span><br><span class=\"line\">G = <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;(<span class=\"built_in\">map</span>.size());</span><br><span class=\"line\">W = <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt;&gt;(<span class=\"built_in\">map</span>.size());</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; equations.size(); ++i)&#123;</span><br><span class=\"line\">    G[<span class=\"built_in\">map</span>[equations[i][<span class=\"number\">0</span>]]].push_back(<span class=\"built_in\">map</span>[equations[i][<span class=\"number\">1</span>]]);</span><br><span class=\"line\">    W[<span class=\"built_in\">map</span>[equations[i][<span class=\"number\">0</span>]]].push_back(values[i]);</span><br><span class=\"line\">    G[<span class=\"built_in\">map</span>[equations[i][<span class=\"number\">1</span>]]].push_back(<span class=\"built_in\">map</span>[equations[i][<span class=\"number\">0</span>]]);</span><br><span class=\"line\">    W[<span class=\"built_in\">map</span>[equations[i][<span class=\"number\">1</span>]]].push_back(<span class=\"number\">1</span> / values[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>建好图之后，就可以用<strong>深度优先搜索（DFS）</strong>和<strong>回溯算法</strong>来找路了，需要用一个数组记录走过的节点，防止重复走过，还需要一个变量<code>flag</code>表示起点与终点之间是否存在路径：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>; <span class=\"comment\">// 初始为0，表示起点与终点之间没有路径。设置为全局变量，在函数中不用调用。</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; vis;</span><br><span class=\"line\">vis = <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt;(<span class=\"built_in\">map</span>.size());</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; querie : queries) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s1 = querie[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s2 = querie[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 如果两个元素相同并且存在于map中，结果就是1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1 == s2 &amp;&amp; <span class=\"built_in\">map</span>.count(s1)) &#123;</span><br><span class=\"line\">        res.push_back(<span class=\"number\">1.0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有一个元素不存在于map中，结果就是-1，因为没有这条路径</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">map</span>.count(s1) || !<span class=\"built_in\">map</span>.count(s2)) &#123;</span><br><span class=\"line\">        res.push_back(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将起点标记为已使用</span></span><br><span class=\"line\">    vis[<span class=\"built_in\">map</span>[s1]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 参数：图，权值，标记数组，起点，终点，当前计算结果（初始为1）</span></span><br><span class=\"line\">    dfs(G, W, vis, <span class=\"built_in\">map</span>[s1], <span class=\"built_in\">map</span>[s2], <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 使用过后，再次标记为未使用</span></span><br><span class=\"line\">    vis[<span class=\"built_in\">map</span>[s1]] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 没有路径，结果为-1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">0</span>) res.push_back(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 已经有路径，将flag置为0，结果已经在DFS中记录过，所以不用再次记录了</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DFS+回溯：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;G, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt;&gt; &amp;W, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; &amp;vis, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">double</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(start == end)&#123;</span><br><span class=\"line\">        res.push_back(val);</span><br><span class=\"line\">        <span class=\"comment\">// 有路径，flag为1</span></span><br><span class=\"line\">        flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[start].size(); ++i)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果flag已经为1了，说明找到一条路径了，就不需要再找了</span></span><br><span class=\"line\">        <span class=\"comment\">// 剩下的就是一般的回溯算法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[G[start][i]] || flag == <span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[G[start][i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        val *= W[start][i];</span><br><span class=\"line\">        dfs(G, W, vis, G[start][i], end, val);</span><br><span class=\"line\">        val /= W[start][i];</span><br><span class=\"line\">        vis[G[start][i]] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt; res;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt; <span class=\"title\">calcEquation</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt;&amp; equations, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt;&amp; values, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; G;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt;&gt; W;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; vis;</span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; <span class=\"built_in\">map</span>;</span><br><span class=\"line\">        <span class=\"comment\">// set&lt;pair&lt;int, int&gt;&gt; set;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;s : equations)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;ch : s)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!<span class=\"built_in\">map</span>.count(ch)) <span class=\"built_in\">map</span>[ch] = cnt++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; map.size();</span></span><br><span class=\"line\">        <span class=\"comment\">// 建图</span></span><br><span class=\"line\">        G = <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;(<span class=\"built_in\">map</span>.size());</span><br><span class=\"line\">        W = <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt;&gt;(<span class=\"built_in\">map</span>.size());</span><br><span class=\"line\">        vis = <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt;(<span class=\"built_in\">map</span>.size());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; equations.size(); ++i)&#123;</span><br><span class=\"line\">            G[<span class=\"built_in\">map</span>[equations[i][<span class=\"number\">0</span>]]].push_back(<span class=\"built_in\">map</span>[equations[i][<span class=\"number\">1</span>]]);</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; map[equations[i][0]] &lt;&lt; \" \" &lt;&lt; map[equations[i][1]];</span></span><br><span class=\"line\">            W[<span class=\"built_in\">map</span>[equations[i][<span class=\"number\">0</span>]]].push_back(values[i]);</span><br><span class=\"line\">            G[<span class=\"built_in\">map</span>[equations[i][<span class=\"number\">1</span>]]].push_back(<span class=\"built_in\">map</span>[equations[i][<span class=\"number\">0</span>]]);</span><br><span class=\"line\">            W[<span class=\"built_in\">map</span>[equations[i][<span class=\"number\">1</span>]]].push_back(<span class=\"number\">1</span> / values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// for(auto &amp;g : G)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     for(auto &amp;gg : g)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//         cout &lt;&lt; gg &lt;&lt; \" \";</span></span><br><span class=\"line\">        <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//     cout &lt;&lt; \"    \";</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// for(auto &amp;w : W)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     for(auto &amp;ww : w)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//         cout &lt;&lt; ww &lt;&lt; \" \";</span></span><br><span class=\"line\">        <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//     cout &lt;&lt; \"    \";</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;querie : queries)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> s1 = querie[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"built_in\">string</span> s2 = querie[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s1 == s2 &amp;&amp; <span class=\"built_in\">map</span>.count(s1))&#123;</span><br><span class=\"line\">                res.push_back(<span class=\"number\">1.0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"built_in\">map</span>.count(s1) || !<span class=\"built_in\">map</span>.count(s2))&#123;</span><br><span class=\"line\">                res.push_back(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            vis[<span class=\"built_in\">map</span>[s1]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            dfs(G, W, vis, <span class=\"built_in\">map</span>[s1], <span class=\"built_in\">map</span>[s2], <span class=\"number\">1</span>);</span><br><span class=\"line\">            vis[<span class=\"built_in\">map</span>[s1]] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>) res.push_back(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// int count = queries.size() - res.size();</span></span><br><span class=\"line\">        <span class=\"comment\">// while(count--)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     res.insert(res.begin(), -1.0);</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;G, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt;&gt; &amp;W, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; &amp;vis, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">double</span> val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start == end)&#123;</span><br><span class=\"line\">            res.push_back(val);</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; val &lt;&lt; \" \";</span></span><br><span class=\"line\">            flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[start].size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vis[G[start][i]] || flag == <span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            vis[G[start][i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            val *= W[start][i];</span><br><span class=\"line\">            dfs(G, W, vis, G[start][i], end, val);</span><br><span class=\"line\">            val /= W[start][i];</span><br><span class=\"line\">            vis[G[start][i]] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"后续补充\"><a href=\"#后续补充\" class=\"headerlink\" title=\"后续补充\"></a>后续补充</h4><p>可以使用并查集解决。</p>\n","categories":["LeetCode"],"tags":["图论","DFS","回溯算法"]},{"title":"LeetCode455-分发饼干","url":"/blog/2020/12/25/LeetCode455-%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p>\n<p>对每个孩子 <code>i</code>，都有一个胃口值 <code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j]</code> &gt;= <code>g[i]</code>，我们可以将这个饼干 <code>j</code> 分配给孩子 <code>i</code> ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/25/LeetCode455-分发饼干/455.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>先将两个数组分别排序，使用两个指针分别指向两个数组的首元素，当饼干值满足胃口值时，两个指针后移；否则只需要将饼干数组的指针进行后移，直到满足胃口值或到达数组末尾。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findContentChildren</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; g, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class=\"line\">        sort(g.begin(), g.end());</span><br><span class=\"line\">        sort(s.begin(), s.end());</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt; g.size() &amp;&amp; j &lt; s.size())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[j] &gt;= g[i])&#123;</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["贪心算法","双指针"]},{"title":"LeetCode49-字母异位词分组","url":"/blog/2020/12/14/LeetCode49-%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/14/LeetCode49-字母异位词分组/49.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>主要是理解哈希表的 $key$ 和 $value$ 表示什么数或者集合。对于字母构造相同的几个<code>string</code>，它们进行排序后的结果是一致的，所以可以将排序后的结果作为哈希表的 $key$，而对应的 $value$ 来存储排序后等于此 $key$ 的所有<code>string</code>。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; <span class=\"title\">groupAnagrams</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; <span class=\"built_in\">map</span>;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; strs.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> str = strs[i];</span><br><span class=\"line\">            sort(str.begin(), str.end());</span><br><span class=\"line\">            <span class=\"built_in\">map</span>[str].push_back(strs[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;m : <span class=\"built_in\">map</span>)</span><br><span class=\"line\">            res.push_back(m.second);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更进一步\"><a href=\"#更进一步\" class=\"headerlink\" title=\"更进一步\"></a>更进一步</h4><h5 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p><strong>唯一分解定理</strong>：任何一个大于1的<strong>自然数</strong>N,如果N不为<strong>质数</strong>，那么N可以唯一分解成<strong>有限个质数</strong>的乘积。</p>\n<p>用质数表示26个字母，把字符串的各个字母相乘，这样可保证字母异位词的乘积必定是相等的。并且每个乘积只能是由这几个质数相乘得到。</p>\n<h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; <span class=\"title\">groupAnagrams</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">double</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; <span class=\"built_in\">map</span>;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; res;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> value[<span class=\"number\">26</span>]=&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">13</span>,<span class=\"number\">17</span>,<span class=\"number\">19</span>,<span class=\"number\">23</span>,<span class=\"number\">29</span>,<span class=\"number\">31</span>,<span class=\"number\">37</span>,<span class=\"number\">41</span>,<span class=\"number\">43</span>,<span class=\"number\">47</span>,<span class=\"number\">53</span>,<span class=\"number\">59</span>,<span class=\"number\">61</span>,<span class=\"number\">67</span>,<span class=\"number\">71</span>,<span class=\"number\">73</span>,<span class=\"number\">79</span>,<span class=\"number\">83</span>,<span class=\"number\">89</span>,<span class=\"number\">97</span>,<span class=\"number\">101</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; strs.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> v = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;ch : strs[i])&#123;</span><br><span class=\"line\">                v *= value[ch - <span class=\"string\">'a'</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">map</span>[v].push_back(strs[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;m : <span class=\"built_in\">map</span>)</span><br><span class=\"line\">            res.push_back(m.second);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>评论区<a href=\"https://leetcode-cn.com/problems/group-anagrams/comments/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/group-anagrams/comments/</a></p>\n","categories":["LeetCode"],"tags":["哈希表"]},{"title":"LeetCode509-斐波那契数","url":"/blog/2021/01/04/LeetCode509-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>斐波那契数，通常用 <code>F(n)</code> 表示，形成的序列称为 <strong>斐波那契数列</strong> 。该数列由 <code>0</code> 和 <code>1</code> 开始，后面的每一项数字都是前面两项数字的和。也就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">F(0) = 0，F(1) = 1</span><br><span class=\"line\">F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1</span><br></pre></td></tr></table></figure>\n\n<p>给你 <code>n</code> ，请计算 <code>F(n)</code> 。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/04/LeetCode509-斐波那契数/509.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>这个算是动态规划的入门题目。给定 $F(0)$ 和 $F(1)$ 之后，后面的数都是前面两个数之和。比如 $F(2)=F(0)+F(1)$，$F(3)=F(1)+F(2)$…</p>\n<p>基于此，其实已经告诉了我们状态转移方程：<br>$$<br>dp[i]=dp[i-1]+dp[i-2]\\quad i\\geq2<br>$$<br>当 $i=0,1$ 时，函数值已经给定：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">            dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>实际上只用三个变量就可以表示每种状态：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 最终结果</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> fin = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// dp[i - 2]</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> fir = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// dp[i - 1]</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sec = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">            fin = fir + sec;</span><br><span class=\"line\">            fir = sec;</span><br><span class=\"line\">            sec = fin;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["动态规划"]},{"title":"LeetCode48-旋转图像","url":"/blog/2020/12/19/LeetCode48-%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个 $n × n$ 的二维矩阵表示一个图像。</p>\n<p>将图像顺时针旋转 90 度。</p>\n<p>说明：</p>\n<p>你必须在<strong>原地</strong>旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong>使用另一个矩阵来旋转图像。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/19/LeetCode48-旋转图像/48.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>不好意思，一开始我还是用了新的数组。</p>\n<p>从最后一列往前，从第一行往后，每一列都是由相应的行复制过来，如下图（示例二）：</p>\n<img src=\"/blog/2020/12/19/LeetCode48-旋转图像/48_思路.png\" style=\"zoom:80%;\">\n\n<p>新建数组保存原始数组的拷贝，然后再根据原始数组拷贝来修改原始数组。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> scale = matrix.size();</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> matrixHelper = matrix;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>; <span class=\"comment\">// 表示当前遍历到拷贝数组的第pos行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = scale - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; --j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; scale; ++i)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 前面的i表示原始数组的行，后面的i表示拷贝数组的列</span></span><br><span class=\"line\">                matrix[i][j] = matrixHelper[pos][i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pos++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度和空间复杂度都是$O(N^2)$。</p>\n<h4 id=\"更进一步\"><a href=\"#更进一步\" class=\"headerlink\" title=\"更进一步\"></a>更进一步</h4><h5 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>仔细观察旋转后的图：</p>\n<img src=\"/blog/2020/12/19/LeetCode48-旋转图像/48_思路.png\" style=\"zoom:80%;\">\n\n<p>对于矩阵中第 $i$ 行的第 $j$ 个元素，在旋转后，它出现在倒数第 $i $ 列的第 $j$ 个位置。即：<br>$$<br>matrix_{new}[col][n-row-1]=matrix[row][col]<br>$$<br>这样可以得到以下代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = matrix.size();</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> matrixHelper = matrix;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)&#123;</span><br><span class=\"line\">                matrix[j][n - i - <span class=\"number\">1</span>] = matrixHelper[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这样也不是原地修改，但是可以得到上面那个重要等式。</p>\n<p>如果对矩阵先进行水平轴翻转，再进行主对角线翻转，也可以得到旋转后的矩阵，以示例二为例：</p>\n<ol>\n<li>水平翻转：</li>\n</ol>\n<p>$$<br>\\left[<br>\\begin{matrix}<br>    5 &amp; 1 &amp; 9 &amp; 11 \\\\<br>    2 &amp; 4 &amp; 8 &amp; 10 \\\\<br>    13 &amp; 3 &amp; 6 &amp; 7 \\\\<br>    15 &amp; 14 &amp; 12 &amp; 16<br>    \\end{matrix}<br>    \\right]\\stackrel{\\Large水平翻转}{\\huge\\longrightarrow}<br>\\left[<br>\\begin{matrix}<br>    15 &amp; 14 &amp; 12 &amp; 16\\\\<br>    13 &amp; 3 &amp; 6 &amp; 7 \\\\<br>    2 &amp; 4 &amp; 8 &amp; 10 \\\\<br>    5 &amp; 1 &amp; 9 &amp; 11<br>    \\end{matrix}<br>    \\right]<br>$$</p>\n<p>$$<br>matrix[row][col]=matrix[n-row-1][col]<br>$$</p>\n<ol start=\"2\">\n<li>主对角线翻转：</li>\n</ol>\n<p>$$<br>\\left[<br>\\begin{matrix}<br>    15 &amp; 14 &amp; 12 &amp; 16 \\\\<br>    13 &amp; 3 &amp; 6 &amp; 7 \\\\<br>    2 &amp; 4 &amp; 8 &amp; 10 \\\\<br>    5 &amp; 1 &amp; 9 &amp; 11<br>    \\end{matrix}<br>    \\right]\\stackrel{\\Large主对角线翻转}{\\huge\\longrightarrow}<br>\\left[<br>\\begin{matrix}<br>    15 &amp; 13 &amp; 2 &amp; 5 \\\\<br>    14 &amp; 3 &amp; 4 &amp; 1 \\\\<br>    12 &amp; 6 &amp; 8 &amp; 9 \\\\<br>    16 &amp; 7 &amp; 10 &amp; 11<br>    \\end{matrix}<br>    \\right]<br>$$</p>\n<p>$$<br>matrix[row][col]=matrix[col][row]<br>$$</p>\n<p>综合以上两式，可以得到：<br>$$<br>matrix[row][col]\\stackrel{\\large水平翻转}{\\large\\longrightarrow}matrix[n-row-1][col]<br>$$</p>\n<p>$$<br>matrix[n-row-1][col]\\stackrel{\\large主对角线翻转}{\\large\\longrightarrow}matrix[col][n-row-1]<br>$$</p>\n<p>即：<br>$$<br>matrix[row][col]=matrix_{new}[col][n-row-1]<br>$$<br>这就与之前得到的重要等式相同了。</p>\n<h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = matrix.size();</span><br><span class=\"line\">        <span class=\"comment\">// 水平翻转</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n / <span class=\"number\">2</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                swap(matrix[i][j], matrix[n - i - <span class=\"number\">1</span>][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 主对角线翻转</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; ++j) &#123;</span><br><span class=\"line\">                swap(matrix[i][j], matrix[j][i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>官方题解：</p>\n<p><a href=\"https://leetcode-cn.com/problems/rotate-image/solution/xuan-zhuan-tu-xiang-by-leetcode-solution-vu3m/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/rotate-image/solution/xuan-zhuan-tu-xiang-by-leetcode-solution-vu3m/</a></p>\n","categories":["LeetCode"],"tags":["数组"]},{"title":"LeetCode547-省份数量","url":"/blog/2021/01/07/LeetCode547-%E7%9C%81%E4%BB%BD%E6%95%B0%E9%87%8F/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>有 <code>n</code> 个城市，其中一些彼此相连，另一些没有相连。如果城市 <code>a</code> 与城市 <code>b</code> 直接相连，且城市 <code>b</code> 与城市 <code>c</code> 直接相连，那么城市 <code>a</code> 与城市 <code>c</code> 间接相连。</p>\n<p><strong>省份</strong> 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p>\n<p>给你一个 <code>n x n</code> 的矩阵 <code>isConnected</code> ，其中 <code>isConnected[i][j] = 1</code> 表示第 <code>i</code> 个城市和第 <code>j</code> 个城市直接相连，而 <code>isConnected[i][j] = 0</code> 表示二者不直接相连。</p>\n<p>返回矩阵中 <strong>省份</strong> 的数量。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/07/LeetCode547-省份数量/547.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>此题的核心问题是<strong>节点之间是否相连</strong>。如果找到了这个核心点，就可以想到两种解决方案。一种是图论中，计算<strong>连通分量</strong>的个数；另一种是并查集，找到大家的<strong>公共祖先</strong>的个数。</p>\n<p>考虑到我们并不需要知道节点与节点之间<strong>如何连接</strong>，只需要知道节点与节点之间<strong>是否连接</strong>，所以使用<strong>并查集</strong>来解决这个问题就足够了。</p>\n<p>并查集的相关知识可参考<a href=\"%5Bhttp://www.xingyuzhao.ltd/blog/2020/09/06/%E5%B9%B6%E6%9F%A5%E9%9B%86-Union-Find/\">这里</a>，建议先看！</p>\n<p>输入矩阵的长或者宽（其实就是一个邻接矩阵）的大小就是城市的个数，所以对于并查集的初始化，我们只需要设置长度与城市个数相等的<code>parent</code>数组即可，并且指向自身，同时可以初始化当前祖先的总数，即城市的个数。</p>\n<p>在遍历<code>isconnected</code>矩阵时，遇到<code>isconnected[i][j]</code>为 1 时，代表<code>i, j</code>两节点相连，进行<code>union(i, j)</code>操作。同时祖先数减去 1 。否则不相连，不进行任何操作。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">unionFind</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; parent;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; rank;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unionFind(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;grid)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = grid.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)&#123;</span><br><span class=\"line\">            parent.push_back(i);</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            rank.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p == parent[p] ? p : parent[p] = find(parent[p]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionElem</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRoot == qRoot)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 根不同，将其相连，计数减1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rank[pRoot] &lt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank[pRoot] &gt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[qRoot] = pRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot; <span class=\"comment\">// 随便指一个</span></span><br><span class=\"line\">            rank[qRoot]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findCircleNum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; isConnected)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isConnected.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\">unionFind <span class=\"title\">uf</span><span class=\"params\">(isConnected)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = isConnected.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = isConnected[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isConnected[i][j] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    uf.unionElem(i, j);</span><br><span class=\"line\">                &#125;         </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> uf.getCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["并查集"]},{"title":"LeetCode605-种花问题","url":"/blog/2021/01/01/LeetCode605-%E7%A7%8D%E8%8A%B1%E9%97%AE%E9%A2%98/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p>\n<p>给你一个整数数组  <code>flowerbed</code> 表示花坛，由若干 <code>0</code> 和 <code>1</code> 组成，其中 <code>0</code> 表示没种植花，<code>1</code> 表示种植了花。另有一个数 <code>n</code> ，能否在不打破种植规则的情况下种入 <code>n</code> 朵花？能则返回 <code>true</code> ，不能则返回 <code>false</code>。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/01/LeetCode605-种花问题/605.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>除了首尾位置，只要当前位置的前一个位置和下一个位置没有种花，那么当前位置就可以种花。</p>\n<p>对于首尾位置，只有其相邻位置没有种花，在它的位置就可以种花。</p>\n<p><strong>当前位置如果没有种花，才需要考虑上述问题</strong>。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">canPlaceFlowers</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; flowerbed, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flowerbed.size() == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> flowerbed[<span class=\"number\">0</span>] == <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; flowerbed.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span> &amp;&amp; flowerbed[i] == <span class=\"number\">0</span> &amp;&amp; flowerbed[i + <span class=\"number\">1</span>] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                flowerbed[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                n--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == flowerbed.size() - <span class=\"number\">1</span> &amp;&amp; flowerbed[i] == <span class=\"number\">0</span> &amp;&amp; flowerbed[i - <span class=\"number\">1</span>] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                flowerbed[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                n--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i != <span class=\"number\">0</span> &amp;&amp; i != flowerbed.size() - <span class=\"number\">1</span> &amp;&amp; flowerbed[i] == <span class=\"number\">0</span> &amp;&amp; flowerbed[i - <span class=\"number\">1</span>] != <span class=\"number\">1</span> &amp;&amp; flowerbed[i + <span class=\"number\">1</span>] != <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                flowerbed[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                n--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["贪心算法"]},{"title":"LeetCode62-不同路径","url":"/blog/2020/12/09/LeetCode62-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p>与此类似：<a href=\"http://www.xingyuzhao.ltd/blog/2020/07/26/LeetCode63-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84%E2%85%A1/\">LeetCode-不同路径Ⅱ</a>，<a href=\"http://www.xingyuzhao.ltd/blog/2020/07/18/LeetCode97-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/#more\">LeetCode97-交错字符串</a>，<a href=\"https://leetcode-cn.com/problems/dungeon-game/\" target=\"_blank\" rel=\"noopener\">LeetCode174-地下城游戏</a>。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/09/LeetCode62-不同路径/62.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>机器人只能往右或者往下，考虑动态规划（如果四个方向都可以走就不可以用动态规划了，得用DFS或者BFS），对于机器人所在的行和列，都只有一条路径可以到达，初始化为1。而除此之外的位置都是可以由其上边和其左边到达，以此类推得到可以到达最终位置的路径总数。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uniquePaths</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">dp</span><span class=\"params\">(m, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(n, <span class=\"number\">1</span>))</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; m; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; n; ++j)&#123;</span><br><span class=\"line\">                dp[i][j] = dp[i][j - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["动态规划"]},{"title":"LeetCode63-不同路径Ⅱ","url":"/blog/2020/07/26/LeetCode63-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84%E2%85%A1/","content":"<p>本题与<a href=\"http://www.xingyuzhao.ltd/blog/2020/07/18/LeetCode97-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/#more\"><strong>97交错字符串</strong></a>，<a href=\"https://leetcode-cn.com/problems/dungeon-game/\" target=\"_blank\" rel=\"noopener\"><strong>174-地下城游戏</strong></a>分析与解法相似</p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/07/26/LeetCode63-不同路径Ⅱ/question\" style=\"zoom:80%;\">\n\n<img src=\"/blog/2020/07/26/LeetCode63-不同路径Ⅱ/question1\" style=\"zoom:;\">\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>对于输入为二维数组的题目中出现了只能向下或者向右移动的字眼，一般来说考虑动态规划。这道题的不同之处是设置了障碍物，如果遇到了1则表示<strong>不可达</strong>，假如<code>m = 2, n = 2</code>，并且无障碍物，我们可以得到下图：</p>\n<img src=\"/blog/2020/07/26/LeetCode63-不同路径Ⅱ/solution1\" style=\"zoom:80%;\">\n\n<p>那么对于<code>(0,1)</code>和<code>(1,0)</code>位置，都只有一条通路可达：</p>\n<img src=\"/blog/2020/07/26/LeetCode63-不同路径Ⅱ/solution2\" style=\"zoom:80%;\">\n\n<p>最后对于末尾处<code>(1,1)</code>，它的上边和左边可以到达，所以到达它的路径为<code>1 + 1 = 2</code>条：</p>\n<img src=\"/blog/2020/07/26/LeetCode63-不同路径Ⅱ/solution3\" style=\"zoom:80%;\">\n\n<p>通过观察我们发现，在不遮挡的情况下，可以到达当前位置的路径数就是当前位置的上边和左边路径数的总和。</p>\n<p>对于存在障碍物的情况，我们直接令到达它的路径数为0，这样也就满足的题目的要求。</p>\n<h4 id=\"定义dp数组\"><a href=\"#定义dp数组\" class=\"headerlink\" title=\"定义dp数组\"></a>定义dp数组</h4><p>根据上述分析，<code>dp[i][j]</code>表示有多少条路径可以到达<code>(i,j)</code>，如果网格中此处值为1，也就是有障碍的情况下，<code>dp[i][j] = 0</code>。表示无法到达，路径数为0。</p>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>在<strong>交错字符串</strong>中使用的是从前往后遍历的思想，这里换一种思路，从后往前进行遍历。对于最后一个位置<code>dp[m-1][n-1]</code>，如果第<code>m - 1</code>行或者<code>n - 1</code>列其他位置可以到达最后位置，则为1，否则为0，只要在网格中往回走遇到了1，在那之后<code>dp</code>数组的值都为0。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[m][n];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">\t\tdp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 最后一行到end初始化为1</span></span><br><span class=\"line\"><span class=\"comment\">// 注意有有一个为1，后面都被阻挡</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = n - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; obstacleGrid[m - <span class=\"number\">1</span>][j] == <span class=\"number\">0</span>; --j)&#123;</span><br><span class=\"line\">\tdp[m - <span class=\"number\">1</span>][j] = <span class=\"number\">1</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 最后一列到end初始化为1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = m - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span> &amp;&amp; obstacleGrid[i][n - <span class=\"number\">1</span>] == <span class=\"number\">0</span>; --i)&#123;</span><br><span class=\"line\">\tdp[i][n - <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"状态转移方程\"><a href=\"#状态转移方程\" class=\"headerlink\" title=\"状态转移方程\"></a>状态转移方程</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(obstacleGrid[i][j] == <span class=\"number\">0</span>)</span><br><span class=\"line\">    dp[i][j] = dp[i+<span class=\"number\">1</span>][j] + dp[i][j+<span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uniquePathsWithObstacles</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = obstacleGrid.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = obstacleGrid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"comment\">// 从后往前必须long long</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[m][n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 最后一行到end初始化为1</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意有有一个为1，后面都被阻挡</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = n - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; obstacleGrid[m - <span class=\"number\">1</span>][j] == <span class=\"number\">0</span>; --j)&#123;</span><br><span class=\"line\">                dp[m - <span class=\"number\">1</span>][j] = <span class=\"number\">1</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 最后一列到end初始化为1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = m - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span> &amp;&amp; obstacleGrid[i][n - <span class=\"number\">1</span>] == <span class=\"number\">0</span>; --i)&#123;</span><br><span class=\"line\">                dp[i][n - <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = m - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; --i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = n - <span class=\"number\">2</span>; j &gt;= <span class=\"number\">0</span>; --j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(obstacleGrid[i][j] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i + <span class=\"number\">1</span>][j] + dp[i][j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><a href=\"https://leetcode-cn.com/problems/unique-paths-ii/solution/jian-dan-dpbi-xu-miao-dong-by-sweetiee/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/unique-paths-ii/solution/jian-dan-dpbi-xu-miao-dong-by-sweetiee/</a></p>\n","categories":["LeetCode"],"tags":["动态规划"]},{"title":"LeetCode649-Dota2参议院","url":"/blog/2020/12/11/LeetCode649-Dota2%E5%8F%82%E8%AE%AE%E9%99%A2/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>Dota2 的世界里有两个阵营：<code>Radiant</code>(天辉)和 <code>Dire</code>(夜魇)</p>\n<p>Dota2 参议院由来自两派的参议员组成。现在参议院希望对一个 Dota2 游戏里的改变作出决定。他们以一个基于轮为过程的投票进行。在每一轮中，每一位参议员都可以行使两项权利中的一项：</p>\n<ol>\n<li><code>禁止一名参议员的权利</code>：</li>\n</ol>\n<p>参议员可以让另一位参议员在这一轮和随后的几轮中丧失所有的权利。</p>\n<ol start=\"2\">\n<li><code>宣布胜利</code>：</li>\n</ol>\n<p>如果参议员发现有权利投票的参议员都是同一个阵营的，他可以宣布胜利并决定在游戏中的有关变化。</p>\n<a id=\"more\"></a>\n\n<p>给定一个字符串代表每个参议员的阵营。字母 “R” 和 “D” 分别代表了 <code>Radiant</code>（天辉）和 <code>Dire</code>（夜魇）。然后，如果有 <code>n</code> 个参议员，给定字符串的大小将是 <code>n</code>。</p>\n<p>以轮为基础的过程从给定顺序的第一个参议员开始到最后一个参议员结束。这一过程将持续到投票结束。所有失去权利的参议员将在过程中被跳过。</p>\n<p>假设每一位参议员都足够聪明，会为自己的政党做出最好的策略，你需要预测哪一方最终会宣布胜利并在 Dota2 游戏中决定改变。输出应该是 <code>Radiant</code> 或 <code>Dire</code>。</p>\n<img src=\"/blog/2020/12/11/LeetCode649-Dota2参议院/649.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>只想到了暴力法解决。首先记录$senate$中R和D出现次数，再用一个长与$senate$相同的$bool$数组来记录当前字母是否被<strong>消灭</strong>了，初始化都为0，代表没有被<strong>消灭</strong>。遍历$senate$，如果遇到了R，就从R开始找第一个D的位置，直到下一轮循环到它之前的位置；对于D也是一样。这样保证它们能行使自己的权力，除非自己的阵营已经获胜了。</p>\n<p><strong>消灭的策略是：尽量消灭自己后面的对手，因为前面的对手已经使用过权利了，而后序的对手依然可以使用权利消灭自己的同伴。</strong></p>\n<p>这样做的时间复杂度会很高，用时1452ms。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">predictPartyVictory</span><span class=\"params\">(<span class=\"built_in\">string</span> senate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> R_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> D_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = senate.size();</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">isUsed</span><span class=\"params\">(senate.size(), <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;ch : senate)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ch == <span class=\"string\">'R'</span>) R_cnt++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> D_cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(R_cnt != <span class=\"number\">0</span> &amp;&amp; D_cnt != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; senate.size(); ++i)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isUsed[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(senate[i] == <span class=\"string\">'R'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m = i + <span class=\"number\">1</span>; m &lt; i + len; ++m)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> j = m % len;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(senate[j] == <span class=\"string\">'D'</span> &amp;&amp; isUsed[j] == <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">                            isUsed[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                            D_cnt--;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m = i + <span class=\"number\">1</span>; m &lt; i + len; ++m)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> j = m % len;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(senate[j] == <span class=\"string\">'R'</span> &amp;&amp; isUsed[j] == <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">                            isUsed[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                            R_cnt--;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(R_cnt == <span class=\"number\">0</span> || D_cnt == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R_cnt != <span class=\"number\">0</span> ? <span class=\"string\">\"Radiant\"</span> : <span class=\"string\">\"Dire\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更进一步\"><a href=\"#更进一步\" class=\"headerlink\" title=\"更进一步\"></a>更进一步</h4><h5 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>使用一个变量来记录当前参议员之前有几个对手，从而判断自己是否被消灭了。</p>\n<p>这里使用$count&gt;0$表示<strong>R在D前面，R可以消灭D</strong>，用$count&lt;0$表示<strong>D在R前面，D可以消灭R</strong>。</p>\n<p>执行用时：4ms。</p>\n<h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">predictPartyVictory</span><span class=\"params\">(<span class=\"built_in\">string</span> senate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> R = <span class=\"literal\">true</span>, D = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(R &amp;&amp; D)&#123;</span><br><span class=\"line\">            R = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            D = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; senate.size(); ++i)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果没被完全消灭，本轮循环结束R和D都为true</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(senate[i] == <span class=\"string\">'R'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(count &lt; <span class=\"number\">0</span>) senate[i] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> R = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果被消灭了计数加一，代表抵挡了一次攻击</span></span><br><span class=\"line\">                    <span class=\"comment\">// 如果没有被消灭，代表有多了一次消灭敌方机会</span></span><br><span class=\"line\">                    <span class=\"comment\">// 无论如何都是需要++的，下面的--同</span></span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(senate[i] == <span class=\"string\">'D'</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">0</span>) senate[i] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> D = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    count--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R != <span class=\"number\">0</span> ? <span class=\"string\">\"Radiant\"</span> : <span class=\"string\">\"Dire\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p><a href=\"https://leetcode-cn.com/problems/dota2-senate/solution/649-dota2-can-yi-yuan-tan-xin-suan-fa-ji-siha/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/dota2-senate/solution/649-dota2-can-yi-yuan-tan-xin-suan-fa-ji-siha/</a></p>\n","categories":["LeetCode"],"tags":["贪心算法"]},{"title":"LeetCode684-冗余连接","url":"/blog/2021/01/13/LeetCode684-%E5%86%97%E4%BD%99%E8%BF%9E%E6%8E%A5/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>在本问题中, 树指的是一个连通且无环的无向图。</p>\n<p>输入一个图，该图由一个有着N个节点 (节点值不重复1, 2, …, N) 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。</p>\n<p>结果图是一个以边组成的二维数组。每一个边的元素是一对 <code>[u, v]</code>，满足 <code>u &lt; v</code>，表示连接顶点 <code>u</code> 和 <code>v</code> 的无向图的边。</p>\n<p>返回一条可以删去的边，使得结果图是一个有着N个节点的树。如果有多个答案，则返回二维数组中最后出现的边。答案边 <code>[u, v]</code> 应满足相同的格式 <code>u &lt; v</code>。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/13/LeetCode684-冗余连接/684.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>并查集中使用 <code>count</code> 记录当前还有多少个根节点，如果<strong>上一次的根节点数等于本次的根节点数</strong>，说明本次的合并无效，记录当前坐标即可。一次遍历结束后，找到了不需要进行合并的最后一个边。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">unionFind</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; parent;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; rank;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unionFind(<span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;count = n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            parent.push_back(i);</span><br><span class=\"line\">            rank.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p == parent[p] ? p : parent[p] = find(parent[p]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionElem</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRoot == qRoot) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rank[pRoot] &lt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank[pRoot] &gt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[qRoot] = pRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">            rank[qRoot]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count--; <span class=\"comment\">// 合并一次，根节点数减1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">findRedundantConnection</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">unionFind <span class=\"title\">uf</span><span class=\"params\">(edges.size())</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre; <span class=\"comment\">// 上一次根节点数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index; <span class=\"comment\">// 不需要合并的最后一个边的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; edges.size(); ++i)&#123;</span><br><span class=\"line\">            pre = uf.getCount();</span><br><span class=\"line\">            uf.unionElem(edges[i][<span class=\"number\">0</span>] - <span class=\"number\">1</span>, edges[i][<span class=\"number\">1</span>] - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 上次根节点数等于本次合并后根节点数，更新index</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pre == uf.getCount()) index = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> edges[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["并查集","图论"]},{"title":"LeetCode701-二叉搜索树中的插入操作","url":"/blog/2020/10/09/LeetCode701-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据保证，新值和原始二叉搜索树中的任意节点值都不同。</p>\n<p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回任意有效的结果。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/10/09/LeetCode701-二叉搜索树中的插入操作/示例.png\" style=\"zoom:80%;\">\n\n<ul>\n<li>给定的树上的节点数介于 0 和 10^4 之间</li>\n<li>每个节点都有一个唯一整数值，取值范围从 0 到 10^8</li>\n<li>-10^8 &lt;= val &lt;= 10^8</li>\n<li>新值和原始二叉搜索树中的任意节点值都不同</li>\n</ul>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>二叉搜索树满足父节点值大于其左孩子的值小于其右孩子的值，即当前节点大于以它为根节点的左子树的所有值，并且小于其右子树的所有值。根据这个性质，只需要判断<code>val</code>与当前节点的值的大小关系来寻找插入位置。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">TreeNode* <span class=\"title\">insertIntoBST</span><span class=\"params\">(TreeNode* root, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!root) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TreeNode(val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val &lt; root-&gt;val)</span><br><span class=\"line\">            root-&gt;left = insertIntoBST(root-&gt;left, val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val &gt; root-&gt;val)</span><br><span class=\"line\">            root-&gt;right = insertIntoBST(root-&gt;right, val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["二叉搜索树"]},{"title":"LeetCode714-买卖股票的最佳时机含手续费","url":"/blog/2020/12/17/LeetCode714-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个整数数组 $prices$，其中第$i$个元素代表了第$i$天的股票价格 ；非负整数 $fee$ 代表了交易股票的手续费用。</p>\n<p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p>\n<p>返回获得利润的最大值。</p>\n<p>注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/17/LeetCode714-买卖股票的最佳时机含手续费/714.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><h5 id=\"定义-dp-数组\"><a href=\"#定义-dp-数组\" class=\"headerlink\" title=\"定义$dp$数组\"></a>定义$dp$数组</h5><p>使用两个数组$dp1[i]$和$dp2[i]$分别表示当天持有股票or当天不持有股票时的最大收益。</p>\n<h5 id=\"状态转移方程\"><a href=\"#状态转移方程\" class=\"headerlink\" title=\"状态转移方程\"></a>状态转移方程</h5><ul>\n<li>$dp1[i]$表示第$i$天未持有的最大收益，由上一天未持有或者上一天持有当天卖出得到：</li>\n</ul>\n<p>$$<br>dp1[i] = max(dp1[i - 1], dp2[i - 1] + prices[i] - fee)<br>$$</p>\n<ul>\n<li>$dp2[i]$表示第$i$天持有的最大收益，由上一天持有或者上一天不持有今天买入得到：</li>\n</ul>\n<p>$$<br>dp2[i] = max(dp2[i - 1], dp1[i - 1] - prices[i])<br>$$</p>\n<h5 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h5><ul>\n<li>第一天未持有股票时，收益为0，$dp1[0] = 0$。</li>\n<li>第一天持有股票时，收益为当天买入所需要的钱，$dp2[0] = -prices[0]$。</li>\n</ul>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices, <span class=\"keyword\">int</span> fee)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dp1</span><span class=\"params\">(prices.size())</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dp2</span><span class=\"params\">(prices.size())</span></span>;</span><br><span class=\"line\">        dp1[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp2[<span class=\"number\">0</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            dp1[i] = max(dp1[i - <span class=\"number\">1</span>], dp2[i - <span class=\"number\">1</span>] + prices[i] - fee);</span><br><span class=\"line\">            dp2[i] = max(dp2[i - <span class=\"number\">1</span>], dp1[i - <span class=\"number\">1</span>] - prices[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp1[prices.size() - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"更进一步\"><a href=\"#更进一步\" class=\"headerlink\" title=\"更进一步\"></a>更进一步</h5><p>注意到$dp1[i]$和$dp2[i]$只会从$dp1[i-1]$和$dp2[i-1]$转移而来，所以用两个变量$sell$以及$buy$分别表示$dp1[i]$和$dp2[i]$，空间复杂度降为$O(1)$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices, <span class=\"keyword\">int</span> fee)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sell = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> buy = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = sell;</span><br><span class=\"line\">            sell = max(sell, buy + prices[i] - fee);</span><br><span class=\"line\">            buy = max(buy, sell - prices[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sell;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>评论区：<a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/comments/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/comments/</a></p>\n<p>官方题解：<a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/solution/mai-mai-gu-piao-de-zui-jia-shi-ji-han-sh-rzlz/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/solution/mai-mai-gu-piao-de-zui-jia-shi-ji-han-sh-rzlz/</a></p>\n<p>股票问题系列通解（转载翻译）：<a href=\"https://leetcode-cn.com/circle/article/qiAgHn/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/circle/article/qiAgHn/</a></p>\n<h4 id=\"Appendix\"><a href=\"#Appendix\" class=\"headerlink\" title=\"Appendix\"></a>Appendix</h4><p>结束时持有 0 份股票的收益一定大于持有 1 份股票的收益？</p>\n<p>如果结束时持有 1 份股票，可能有两种情况，一是在最后一天买入，二是在之前买入。 如果是第一种情况，则最后一天选择不买入，收益一定更高，因为不用付出购买股票的钱。 如果是第二种情况，则一定可以在最后一天卖出，卖出操作一定会增加收益。 因此，无论是哪种情况，持有 0 份股票的收益一定大于持有 1 份股票的收益。</p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/\">LeetCode121-买卖股票的最佳时机</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/\">LeetCode122-买卖股票的最佳时机II</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode123-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII/\">LeetCode122-买卖股票的最佳时机III</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode188-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV/\">LeetCode122-买卖股票的最佳时机IV</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/28/LeetCode309-%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F/\">LeetCode309-最佳买卖股票时机含冷冻期</a></p>\n<p><a href=\"http://www.xingyuzhao.ltd/blog/2020/12/17/LeetCode714-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9/\">LeetCode714-买卖股票的最佳时机含手续费</a></p>\n","categories":["LeetCode"],"tags":["动态规划","股票问题"]},{"title":"LeetCode718-最长重复子数组","url":"/blog/2020/07/03/LeetCode718-%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%90%E6%95%B0%E7%BB%84/","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给两个整数数组 <code>A</code> 和 <code>B</code> ，返回两个数组中公共的、长度最长的子数组的长度。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/07/03/LeetCode718-最长重复子数组/示例.png\" style=\"zoom: 80%;\">\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>题目的意思很好理解，如示例所示，公共的子数组除了单一的数值<code>[1],[2],[3]</code>，也有<code>[2,1],[3,2,1]</code>这些数组，其中最长的就是<code>[3,2,1]</code>这个数组，长度为3。像题目出现<strong>最长，最短</strong>之类的字都可以考虑用动态规划去解决。</p>\n<h4 id=\"一、定义dp数组的含义\"><a href=\"#一、定义dp数组的含义\" class=\"headerlink\" title=\"一、定义dp数组的含义\"></a>一、定义dp数组的含义</h4><p>数组A长5，数组B长5，我们假设存在一个<code>6×6</code>的<code>dp</code>矩阵，使得矩阵坐标从1开始，同时保证边界位置上的计算，并初始化所有值为0。<strong>矩阵表示固定A的值时，到B数组的当前值与到A固定值的公共数组长度</strong>：</p>\n<img src=\"/blog/2020/07/03/LeetCode718-最长重复子数组/index.png\">\n\n<p>我们固定A数组，然后去遍历B数组。假如<code>A[i]=B[j]</code>时，公共数组的长度在上一次长度的基础上+1，否则不变，在后续分析中可以看到。</p>\n<p>比如说<code>A[0]=1</code>，此时遍历B数组，<code>B[0]=3</code>，两个值不等。因为我们建立数组时候起始坐标是从1开始的，所以<code>dp[1][1] = 0</code>。继续遍历B数组，可以得到以下结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dp[1][2] = 0</span><br><span class=\"line\">dp[1][3] = 1</span><br><span class=\"line\">dp[1][4] = 0</span><br><span class=\"line\">dp[1][5] = 0</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2020/07/03/LeetCode718-最长重复子数组/index1.png\">\n\n<p>接下来改变A值，<code>A[1]=2</code>，可以得到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dp[2][1] = 0</span><br><span class=\"line\">dp[2][2] = 1</span><br><span class=\"line\">dp[2][3] = 0</span><br><span class=\"line\">dp[2][4] = 0</span><br><span class=\"line\">dp[2][5] = 0</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2020/07/03/LeetCode718-最长重复子数组/index2.png\">\n\n<p>同理<code>A[2]=3</code>：</p>\n<img src=\"/blog/2020/07/03/LeetCode718-最长重复子数组/index3.png\">\n\n<p>当<code>A[3]=2,B[1]=2</code>时，此时满足<code>value(A)==value(B)</code>，所以<code>dp[4][2] = dp[3][1] + 1 = 2 </code>，如图：</p>\n<img src=\"/blog/2020/07/03/LeetCode718-最长重复子数组/index4.png\">\n\n<p>当<code>A[4]=1,B[2]=1</code>时，此时满足<code>value(A)==value(B)</code>，所以<code>dp[5][3] = dp[4][2] + 1 = 3</code>，如图：</p>\n<img src=\"/blog/2020/07/03/LeetCode718-最长重复子数组/index5.png\">\n\n<p>遍历完一次B数组后更新最大长度，所以最后最大的公共数组长度就是3。</p>\n<h4 id=\"二、状态转移方程\"><a href=\"#二、状态转移方程\" class=\"headerlink\" title=\"二、状态转移方程\"></a>二、状态转移方程</h4><p>根据上述分析，可以得到：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(A[i<span class=\"number\">-1</span>] == B[j<span class=\"number\">-1</span>])</span><br><span class=\"line\">    dp[i][j] = dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>] + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三、代码实现\"><a href=\"#三、代码实现\" class=\"headerlink\" title=\"三、代码实现\"></a>三、代码实现</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findLength</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; A, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; B)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> **dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>*[A.size()+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; A.size() + <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">            dp[i] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[B.size()+<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; A.size() + <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; B.size() + <span class=\"number\">1</span>; j++)&#123;</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 从前往后</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= A.size(); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= B.size(); j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(A[i<span class=\"number\">-1</span>] == B[j<span class=\"number\">-1</span>]) dp[i][j] = dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                res = max(res, dp[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["动态规划"]},{"title":"LeetCode721-合并账户","url":"/blog/2021/01/18/LeetCode721-%E5%90%88%E5%B9%B6%E8%B4%A6%E6%88%B7/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个列表 <code>accounts</code>，每个元素 <code>accounts[i]</code> 是一个字符串列表，其中第一个元素 <code>accounts[i][0]</code> 是 名称 <em>(name)*，其余元素是 *emails</em> 表示该账户的邮箱地址。</p>\n<p>现在，我们想合并这些账户。如果两个账户都有一些共同的邮箱地址，则两个账户必定属于同一个人。请注意，即使两个账户具有相同的名称，它们也可能属于不同的人，因为人们可能具有相同的名称。一个人最初可以拥有任意数量的账户，但其所有账户都具有相同的名称。</p>\n<p>合并账户后，按以下格式返回账户：每个账户的第一个元素是名称，其余元素是按顺序排列的邮箱地址。账户本身可以以任意顺序返回。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/18/LeetCode721-合并账户/721.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>根据邮箱之间的连通性可以找到同一名字下的所有邮箱地址。可以将字符串映射到数字域方便建立并查集，同时需要建立反向哈希表，可以从数字得到字符串（数字必须唯一）。</p>\n<p><strong>算法如下</strong>：</p>\n<ul>\n<li><p>使用并查集将同一名字下的邮箱地址进行合并。</p>\n</li>\n<li><p>再次遍历 <code>accounts</code>，找到每个邮箱地址对应的根节点，根据根节点建立节点间的连通关系。</p>\n</li>\n<li><p>从根节点邮箱找到对应的名字，然后再根据上一步的连通关系找到所有邮箱。</p>\n</li>\n</ul>\n<p>细节详见代码。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">unionFind</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; parent;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; rank;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unionFind(<span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            parent.push_back(i);</span><br><span class=\"line\">            rank.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p == parent[p] ? p : parent[p] = find(parent[p]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionElem</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(qRoot == pRoot) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rank[pRoot] &lt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank[pRoot] &gt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[qRoot] = pRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">            rank[qRoot]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; <span class=\"title\">accountsMerge</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt;&amp; accounts)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; <span class=\"built_in\">map</span>; <span class=\"comment\">// 建立邮箱对名字的映射</span></span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; stoi; <span class=\"comment\">// 将邮箱映射为数字，方便并查集处理</span></span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"built_in\">string</span>&gt; itos; <span class=\"comment\">// 将上面的数字映射为邮箱，反向映射</span></span><br><span class=\"line\">        <span class=\"comment\">// 邮箱与数字之间的相互映射</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;account : accounts)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; account.size(); ++i)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!stoi.count(account[i]))&#123;</span><br><span class=\"line\">                    stoi[account[i]] = cnt;</span><br><span class=\"line\">                    itos[cnt++] = account[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 邮箱对名字的映射</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;account : accounts)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; account.size(); ++i)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!<span class=\"built_in\">map</span>.count(account[i]))&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">map</span>[account[i]] = account[<span class=\"number\">0</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 建立并查集，对同一名字下的所有邮箱进行合并</span></span><br><span class=\"line\">        <span class=\"comment\">// 使不同的accounts之间，有相同的名字时必定在一个集合中</span></span><br><span class=\"line\">        <span class=\"function\">unionFind <span class=\"title\">uf</span><span class=\"params\">(stoi.size())</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;account : accounts)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; account.size(); ++i)&#123;</span><br><span class=\"line\">                uf.unionElem(stoi[account[i]], stoi[account[i - <span class=\"number\">1</span>]]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 找到邮箱对应的根节点，建立根节点与所有相连节点的映射</span></span><br><span class=\"line\">        <span class=\"comment\">// 此处根节点是数字，下一步需要转换为相应的邮箱（itos），再根据邮箱得到名字（map）</span></span><br><span class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; fin;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;account : accounts)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; account.size(); ++i)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 找到当前邮箱的根节点</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> root = uf.find(stoi[account[i]]);</span><br><span class=\"line\">                <span class=\"comment\">// 根据根节点建立连通关系</span></span><br><span class=\"line\">                fin[root].insert(account[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&gt; res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> m = fin.begin(); m != fin.end(); ++m)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; buf;</span><br><span class=\"line\">            <span class=\"comment\">// 根节点数字-&gt;根节点字符串-&gt;根节点对应的名字</span></span><br><span class=\"line\">            buf.push_back(<span class=\"built_in\">map</span>[itos[m-&gt;first]]);</span><br><span class=\"line\">            <span class=\"comment\">// 将根节点相连通的所有邮箱加入答案中，set已经进行排序</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> vec = <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;(m-&gt;second.begin(), m-&gt;second.end());</span><br><span class=\"line\">            buf.insert(buf.end(), vec.begin(), vec.end());</span><br><span class=\"line\">            res.push_back(buf);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["并查集","图论"]},{"title":"LeetCode738-单调递增的数字","url":"/blog/2020/12/15/LeetCode738-%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个非负整数 <code>N</code>，找出小于或等于 <code>N</code> 的最大的整数，同时这个整数需要满足其各个位数上的数字是单调递增。（当且仅当每个相邻位数上的数字 <code>x</code> 和 <code>y</code> 满足 <code>x &lt;= y</code> 时，我们称这个整数是单调递增的。）</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/15/LeetCode738-单调递增的数字/738.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>这种思路太繁琐，不想看的话直接转至<strong>更进一步</strong>。</p>\n<hr>\n<p>输入是一个非负整数，所以第一步要将其转换成可以遍历的形式，可以先将整数转换为字符串序列。</p>\n<p>从<strong>输入序列</strong>的第一个数开始，一个一个数的建立起<strong>答案序列</strong>。</p>\n<ol>\n<li><strong>输入序列单调不减</strong>，答案序列的当前值最大可以取到输入序列的当前值。如输入为1234，那么答案序列的第一个位置最大可以取到1，继续遍历，取到当前位置最大值时，一直会大于等于上一个取到的值，所以最终可以得到答案1234：</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> nums; <span class=\"comment\">// 输入序列</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> res; <span class=\"comment\">// 答案序列</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> pre = <span class=\"number\">-1</span>; <span class=\"comment\">// 初始化为-1，保证第一个值可以取到</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> cur;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.size(); ++i)&#123;</span><br><span class=\"line\">    cur = nums[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur &gt;= pre)&#123;</span><br><span class=\"line\">        res += to_string(cur);</span><br><span class=\"line\">        pre = nums[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>输入序列非单调不减</strong>，如果当前值小于上一个可以取到的最大值，就需要回退，直到当前值不小于上一个可以取到的最大值。如输入332。<ol>\n<li>当取到2时小于上一个取到的值3，上一个值减去1作为当前值（得到2），<code>res</code>出栈一次，如果出栈后<code>res</code>为空，那么存下当前值并退出。否则，上一个值取<code>res</code>末尾的值（第一个3）。</li>\n<li>当前值为2，上一个值为第一个3，由于2小于3，那么再将上一个值减1作为当前值得到2），出栈一次，遍历回退一次，那么当前值变为2，此时<code>res</code>为空，记录2并且退出遍历。</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>使用一个<code>flag</code>标记是否回退。</li>\n<li>如果<code>res == &quot;0&quot;</code>，说明第一个数为0，此时答案长度为输入序列的长度减去1，全部为9；否则，就在<code>res</code>后补充9直到和输入序列长度相同。</li>\n</ul>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">monotoneIncreasingDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> nums = to_string(N);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> res;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; nums.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                cur = nums[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cur &gt;= pre)&#123;</span><br><span class=\"line\">                    res += to_string(cur);</span><br><span class=\"line\">                    pre = nums[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    pre--;</span><br><span class=\"line\">                    res.pop_back();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(res.empty())&#123;</span><br><span class=\"line\">                        res += to_string(pre);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    cur = pre;</span><br><span class=\"line\">                    pre = res.back() - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                    i--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cur &gt;= pre)&#123;</span><br><span class=\"line\">                    res += to_string(cur);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                pre--;</span><br><span class=\"line\">                res.pop_back();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res.empty())&#123;</span><br><span class=\"line\">                    res += to_string(pre);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                cur = pre;</span><br><span class=\"line\">                pre = res.back() - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                i--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> resVal;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res == <span class=\"string\">\"0\"</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = nums.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">buf</span><span class=\"params\">(n, <span class=\"string\">'9'</span>)</span></span>;</span><br><span class=\"line\">            resVal = stoi(buf, <span class=\"number\">0</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = res.size(); j &lt; nums.size(); ++j)&#123;</span><br><span class=\"line\">                res += <span class=\"string\">'9'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            resVal = stoi(res, <span class=\"number\">0</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这种思路实现起来太繁琐了（我是sb）。</p>\n<h4 id=\"更进一步\"><a href=\"#更进一步\" class=\"headerlink\" title=\"更进一步\"></a>更进一步</h4><h5 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>局部最优：遇到<code>nums[i - 1] &gt; nums[i]</code>的情况，让<code>nums[i - 1]--</code>，然后<code>nums[i]</code>值为9，可以保证这两位变成最大单调不减整数。</p>\n<p>全局最优：尽量使<code>nums[i - 1]--</code>靠后，这样做可以使整数尽可能的大，因为越后面减去1，对整数的损失越小，所以从后往前遍历。</p>\n<h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">monotoneIncreasingDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> nums = to_string(N);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag = nums.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = nums.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">1</span>; --i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i - <span class=\"number\">1</span>] &gt; nums[i])&#123;</span><br><span class=\"line\">                nums[i - <span class=\"number\">1</span>]--;</span><br><span class=\"line\">                flag = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(flag; flag &lt; nums.size(); ++flag)&#123;</span><br><span class=\"line\">            nums[flag] = <span class=\"string\">'9'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stoi(nums, <span class=\"number\">0</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>题解：</p>\n<p><a href=\"https://leetcode-cn.com/problems/monotone-increasing-digits/solution/738-dan-diao-di-zeng-de-shu-zi-tan-xin-s-vq4r/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/monotone-increasing-digits/solution/738-dan-diao-di-zeng-de-shu-zi-tan-xin-s-vq4r/</a></p>\n","categories":["LeetCode"],"tags":["贪心算法"]},{"title":"LeetCode739-每日温度","url":"/blog/2020/06/13/LeetCode739-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/","content":"<p>这次主要学习一下单调栈这种数据结构，同时用此数据结构解决739题</p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>请根据每日 气温 列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p>\n<p>例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</p>\n<p>提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h3><p>先学习一下单调栈这种数据结构，单调栈就是栈的基础上使用一定的逻辑，使栈中的元素单调递增或者递减，一般只处理一种典型的问题，叫做<strong>下一个更大的元素</strong>，这个问题是说：给你一个数组，返回一个等长的数组，对应索引存储着下一个更大元素，如果没有更大的元素，就存 -1。举例如下：给你一个数组 [2,1,2,4,3]，你返回数组 [4,2,4,-1,-1]。</p>\n<p>可以这样思考，把数组元素想象成人，如何求2的下一个更大的元素呢？如果2的下一个人比2还低或者一样高，那么就会被2遮挡住，直到第一个比他高的人，他挡不住了，就是答案。</p>\n<img src=\"/blog/2020/06/13/LeetCode739-每日温度/人.jpg\" style=\"zoom: 30%;\">\n\n<p>代码实现如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">nextGreaterElement</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(nums.size())</span></span>; <span class=\"comment\">// 存放答案的数组</span></span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = nums.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123; <span class=\"comment\">// 倒着往栈里放</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!s.empty() &amp;&amp; s.top() &lt;= nums[i]) &#123; <span class=\"comment\">// 判定个子高矮，nums在s之前</span></span><br><span class=\"line\">            s.pop(); <span class=\"comment\">// 矮个起开，反正也被挡着了。。。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans[i] = s.empty() ? <span class=\"number\">-1</span> : s.top(); <span class=\"comment\">// 这个元素身后的第一个高个</span></span><br><span class=\"line\">        s.push(nums[i]); <span class=\"comment\">// 入栈</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2020/06/13/LeetCode739-每日温度/栈.png\" style=\"zoom: 80%;\">\n\n<p>以上图是栈中元素的变化情况，只有当新的高个子来临，才会有出栈的操作。</p>\n<h3 id=\"分析及代码实现\"><a href=\"#分析及代码实现\" class=\"headerlink\" title=\"分析及代码实现\"></a>分析及代码实现</h3><p>上面已经把单调栈阐述了一遍，本题唯一的区别是要返回还需要多少天，而不是那天的温度，所以要用栈来存储一下温度的坐标，根据当前温度的坐标与栈顶温度坐标的差作为返回值。</p>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dailyTemperatures</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; T)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(T.size())</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; s; <span class=\"comment\">// 这里放元素索引，而不是元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = T.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!s.empty() &amp;&amp; T[s.top()] &lt;= T[i]) &#123;</span><br><span class=\"line\">            s.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans[i] = s.empty() ? <span class=\"number\">0</span> : (s.top() - i); <span class=\"comment\">// 得到索引间距</span></span><br><span class=\"line\">        s.push(i); <span class=\"comment\">// 加入索引，而不是元素</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"扩展：如何处理循环数组\"><a href=\"#扩展：如何处理循环数组\" class=\"headerlink\" title=\"扩展：如何处理循环数组\"></a>扩展：如何处理循环数组</h3><p>同样是<strong>下一个更大的元素</strong>，现在假设给你的数组是个环形的，如何处理？</p>\n<p>给你一个数组 [2,1,2,4,3]，你返回数组 [4,2,4,-1,4]。拥有了环形属性，最后一个元素 3 绕了一圈后找到了比自己大的元素 4 。通过取模运算符%就可以模拟环形数组的效果。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; arr&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n = arr.length(), index = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; arr[index % n] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    index++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一种方法是将数组翻倍，然后进行取模运算，节省空间的做法是直接将循环的坐标变成之前的2倍，代码看起来更容易理解，如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">nextGreaterElements</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.size();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">res</span><span class=\"params\">(n)</span></span>; <span class=\"comment\">// 存放结果</span></span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">    <span class=\"comment\">// 假装这个数组长度翻倍了</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span> * n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!s.empty() &amp;&amp; s.top() &lt;= nums[i % n])</span><br><span class=\"line\">            s.pop();</span><br><span class=\"line\">        res[i % n] = s.empty() ? <span class=\"number\">-1</span> : s.top();</span><br><span class=\"line\">        s.push(nums[i % n]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>《labuladong的算法小抄》 单调栈</p>\n","categories":["LeetCode"],"tags":["单调栈"]},{"title":"LeetCode746-使用最小花费爬楼梯","url":"/blog/2020/12/21/LeetCode746-%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>数组的每个索引作为一个阶梯，第<code>i</code>个阶梯对应着一个非负数的体力花费值 <code>cost[i]</code>(索引从0开始)。</p>\n<p>每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。</p>\n<p>您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/21/LeetCode746-使用最小花费爬楼梯/746.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>像这种爬楼梯问题考虑动态规划，当前状态花费 $dp[i]$ 可以由上一次 $dp[i-1]$ 或者上上次 $dp[i-2]$ 中的最小花费得到（对应爬一层台阶和爬两层台阶），其次当前状态还有体力消耗 $cost[i]$，所以可以定义状态转移方程：<br>$$<br>dp[i]=min(dp[i-1],dp[i-2])+cost[i]<br>$$<br>当楼梯只有两阶时，假定有第三阶，那么到达第三阶的花费就为0，初始化如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">dp[<span class=\"number\">0</span>] = cost[<span class=\"number\">0</span>];</span><br><span class=\"line\">dp[<span class=\"number\">1</span>] = cost[<span class=\"number\">1</span>];</span><br><span class=\"line\">cost.push_back(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">minCostClimbingStairs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(cost.size() + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        cost.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = cost[<span class=\"number\">0</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = cost[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; dp.size(); ++i)&#123;</span><br><span class=\"line\">            dp[i] = min(dp[i - <span class=\"number\">1</span>], dp[i - <span class=\"number\">2</span>]) + cost[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[dp.size() - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["动态规划"]},{"title":"LeetCode830-较大分组的位置","url":"/blog/2021/01/05/LeetCode830-%E8%BE%83%E5%A4%A7%E5%88%86%E7%BB%84%E7%9A%84%E4%BD%8D%E7%BD%AE/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>在一个由小写字母构成的字符串 <code>s</code> 中，包含由一些连续的相同字符所构成的分组。</p>\n<p>例如，在字符串 <code>s = &quot;abbxxxxzyy&quot;</code> 中，就含有 <code>&quot;a&quot;</code>, <code>&quot;bb&quot;</code>, <code>&quot;xxxx&quot;</code>, <code>&quot;z&quot;</code> 和 <code>&quot;yy&quot;</code> 这样的一些分组。</p>\n<p>分组可以用区间 <code>[start, end]</code> 表示，其中 <code>start</code> 和 <code>end</code> 分别表示该分组的起始和终止位置的下标。上例中的 <code>&quot;xxxx&quot;</code> 分组用区间表示为 <code>[3,6]</code> 。</p>\n<p>我们称所有包含大于或等于三个连续字符的分组为 <strong>较大分组</strong> 。</p>\n<p>找到每一个 <strong>较大分组</strong> 的区间，<strong>按起始位置下标递增顺序排序后</strong>，返回结果。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/05/LeetCode830-较大分组的位置/830.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>寻找每个重复字符出现的起始位置和终止位置，如果长度大于等于3，记录一下结果就可以了。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">largeGroupPositions</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; res;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch = s[i];</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt; s.size())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 此位置的前一个位置就是上一个重复字符的终止位置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i] != ch)&#123;</span><br><span class=\"line\">                ch = s[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> - start + <span class=\"number\">1</span> &gt;= <span class=\"number\">3</span>) res.push_back(&#123;start, i - <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">                <span class=\"comment\">// 更新起始位置</span></span><br><span class=\"line\">                start = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 字符重复</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> - start + <span class=\"number\">1</span> &gt;= <span class=\"number\">3</span>) res.push_back(&#123;start, i - <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["数组"]},{"title":"LeetCode778-水位上升的游泳池中游泳","url":"/blog/2021/01/30/LeetCode778-%E6%B0%B4%E4%BD%8D%E4%B8%8A%E5%8D%87%E7%9A%84%E6%B8%B8%E6%B3%B3%E6%B1%A0%E4%B8%AD%E6%B8%B8%E6%B3%B3/","content":"<h4 id=\"本题描述\"><a href=\"#本题描述\" class=\"headerlink\" title=\"本题描述\"></a>本题描述</h4><p>在一个 N x N 的坐标方格 <code>grid</code> 中，每一个方格的值 <code>grid[i][j]</code> 表示在位置 <code>(i,j)</code> 的平台高度。</p>\n<p>现在开始下雨了。当时间为 <code>t</code> 时，此时雨水导致水池中任意位置的水位为 <code>t</code> 。你可以从一个平台游向四周相邻的任意一个平台，但是前提是此时水位必须同时淹没这两个平台。假定你可以瞬间移动无限距离，也就是默认在方格内部游动是不耗时的。当然，在你游泳的时候你必须待在坐标方格里面。</p>\n<p>你从坐标方格的左上平台 (0，0) 出发。最少耗时多久你才能到达坐标方格的右下平台 <code>(N-1, N-1)</code>？</p>\n<p>本题与<a href>LeetCode1631-最小体力消耗路径</a>基本一致。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/30/LeetCode778-水位上升的游泳池中游泳/778.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>将本题抽象为一个图论模型：</p>\n<ul>\n<li>将每个位置抽象为一个节点，共有 <code>n * n</code> 个节点。</li>\n<li>每个节点与其上下左右构成带权无向图（存在此节点的话）。</li>\n<li>当存在一条从左上角到右下角的路径时，所需要的最小时间 T。</li>\n</ul>\n<p>设置一个时间阈值 t，如果存在一条路径可以由左上角到右下角，那么可以继续缩短时间 t。直到找到最短的时间。本题高度范围是 <code>[0, N*N - 1]</code>，从 0 到 N*N - 1 设置阈值，进行二分搜索。</p>\n<ul>\n<li>如果当前高度大于 t，说明此路不通，需要跳过。</li>\n<li>当前高度小于等于 t，并且其四个方向也存在小于等于 t 的高度，才可以继续搜索。</li>\n</ul>\n<p><strong>对于图论的最短路径问题，考虑使用广度优先搜索（BFS）</strong>。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">swimInWater</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = grid.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = n * n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt;= right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"built_in\">queue</span>&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; q;</span><br><span class=\"line\">            q.emplace(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">vis</span><span class=\"params\">(n * n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            vis[<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> [x, y] = q.front();</span><br><span class=\"line\">                q.pop();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[x][y] &gt; mid) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; ++i)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> nx = x + dx[i];</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> ny = y + dy[i];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; n &amp;&amp; !vis[nx * n + ny] &amp;&amp; grid[nx][ny] &lt;= mid)&#123;</span><br><span class=\"line\">                        vis[nx * n + ny] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        q.emplace(nx, ny);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vis[n * n - <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                ans = mid;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["图论","BFS","二分法"]},{"title":"LeetCode837-新21点","url":"/blog/2020/06/06/LeetCode837-%E6%96%B021%E7%82%B9/","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：</p>\n<p>爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。 每次抽取都是独立的，其结果具有相同的概率。</p>\n<p>当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/06/06/LeetCode837-新21点/示例.png\" style=\"zoom:80%;\">\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>这道题一看不太明白什么意思，看过港片的都知道，在牌面加起来不大于21点时候，谁的牌面最大，谁就能获胜。这道题其实是求爱丽丝获胜的概率，不过点数为N，可以把规则复述一下：</p>\n<ol>\n<li>她可以从<code>[1,W]</code>的牌中任意取一张，可以无限重复取，也就是说取到范围中某张牌的概率一直是<code>1/W</code>；</li>\n<li>如果她手上的牌总额小于K时，她就会继续抽牌，大于等于K时就停止抽牌；</li>\n<li>停止抽牌后，和N进行比较，当小于等于N时，她就获胜了，求获胜的概率。</li>\n</ol>\n<h4 id=\"定义dp数组的含义\"><a href=\"#定义dp数组的含义\" class=\"headerlink\" title=\"定义dp数组的含义\"></a>定义dp数组的含义</h4><p>定义<code>dp[x]</code>为她手上牌面为x时，能获胜的概率。因为每次从<code>[1,W]</code>中抽取的机会都是均等的，所以<code>dp[x] =1/W * (dp[x+1] + dp[x+2] + ... + dp[x+W]) </code>。x最多可以到<code>K-1</code>，因为x等于K时会停止抽牌，所以当抽牌结束后，她可能达到的最大牌面是<code>K-1+W</code>，开始时她的牌面为0，所以用长度为K+W的dp数组就够了，最后<code>dp[0]</code>，也就是爱丽丝还没有抽牌时的胜率就是最终答案。</p>\n<h4 id=\"状态转移方程\"><a href=\"#状态转移方程\" class=\"headerlink\" title=\"状态转移方程\"></a>状态转移方程</h4><p>其实上一步已经提到了状态转移方程：<code>dp[x] =1/W * (dp[x+1] + dp[x+2] + ... + dp[x+W]) </code>，但是dp数组具体应该怎么算呢，可以把它看成一个填格子的游戏，如下图：</p>\n<img src=\"/blog/2020/06/06/LeetCode837-新21点/image1.png\" style=\"zoom:80%;\">\n\n<p>将格子分为两个部分，在橘黄色的格子中，爱丽丝是可以抽牌的，而在蓝色的格子中是不可以的。我们每次需要W个格子的结果进行状态转移。</p>\n<p>在蓝色的格子中，对于<code>[K,K+W-1]</code>中小于等于N的值，相应的<code>dp[i]</code>概率就是1，反之为0，在初始化时候进行。</p>\n<img src=\"/blog/2020/06/06/LeetCode837-新21点/image2.png\" style=\"zoom:80%;\">\n\n<p>接下来，从K-1处根据状态转移方程进行dp数组的计算。在计算K-2处概率值时，在上一步用一个中间变量<code>sumw</code>保存<code>[K,K+W-1]</code>的概率之和，这样新的概率和<code>sumw = sumw - dp[K-1+W] + dp[K-1]</code>，提高效率。这样从最右边橘黄色格子一直填到最左边，就是最后的结果dp[0]。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">new21Game</span><span class=\"params\">(<span class=\"keyword\">int</span> N, <span class=\"keyword\">int</span> K, <span class=\"keyword\">int</span> W)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(K + W, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> sumw = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = K; i &lt;= K + W - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt;= N) dp[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            sumw += dp[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = K<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            dp[i] = (<span class=\"keyword\">double</span>)<span class=\"number\">1</span> / W * sumw; <span class=\"comment\">//概率可能是小数，需要强制类型转换</span></span><br><span class=\"line\">            sumw = sumw - dp[i+W] + dp[i]; </span><br><span class=\"line\">            <span class=\"comment\">//这里就是减去最右边概率dp[i+W]，加上最左边概率dp[i]</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://leetcode-cn.com/problems/new-21-game/solution/huan-you-bi-zhe-geng-jian-dan-de-ti-jie-ma-tian-ge/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/new-21-game/solution/huan-you-bi-zhe-geng-jian-dan-de-ti-jie-ma-tian-ge/</a></p>\n","categories":["LeetCode"],"tags":["动态规划"]},{"title":"LeetCode839-相似字符串组","url":"/blog/2021/01/31/LeetCode839-%E7%9B%B8%E4%BC%BC%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%84/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>如果交换字符串 <code>X</code> 中的两个不同位置的字母，使得它和字符串 Y 相等，那么称 <code>X</code> 和 <code>Y</code> 两个字符串相似。如果这两个字符串本身是相等的，那它们也是相似的。</p>\n<p>例如，<code>&quot;tars&quot;</code> 和 <code>&quot;rats&quot;</code> 是相似的 (交换 <code>0</code> 与 <code>2</code> 的位置)； <code>&quot;rats&quot;</code> 和 <code>&quot;arts&quot;</code> 也是相似的，但是 <code>&quot;star&quot;</code> 不与 <code>&quot;tars&quot;</code>，<code>&quot;rats&quot;</code>，或 <code>&quot;arts&quot;</code> 相似。</p>\n<p>总之，它们通过相似性形成了两个关联组：<code>{&quot;tars&quot;, &quot;rats&quot;, &quot;arts&quot;}</code> 和 <code>{&quot;star&quot;}</code>。注意，<code>&quot;tars&quot;</code> 和 <code>&quot;arts&quot;</code> 是在同一组中，即使它们并不相似。形式上，对每个组而言，要确定一个单词在组中，只需要这个词和该组中至少一个单词相似。</p>\n<p>给你一个字符串列表 <code>strs</code>。列表中的每个字符串都是 <code>strs</code> 中其它所有字符串的一个字母异位词。请问 <code>strs</code> 中有多少个相似字符串组？</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/31/LeetCode839-相似字符串组/839.png\">\n\n<p><strong>备注：</strong></p>\n<p>​    字母异位词（anagram），一种把某个字符串的字母的位置（顺序）加以改换所形成的新词。</p>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>本题如果理解了题目的意思，就不难。</p>\n<p><strong>给你一个字符串列表 <code>strs</code>。列表中的每个字符串都是 <code>strs</code> 中其它所有字符串的一个字母异位词</strong>。再结合备注可知：所有的字符串都是由<strong>相同的字母</strong>组成，无非就是字母顺序不一样罢了。</p>\n<p>题目要求<strong>相似</strong>的字符串为一组，何为相似？有两种情况：</p>\n<ol>\n<li>两个字符串相同。</li>\n<li>其中一个字符串交换一对字母后与另一字符串相同。</li>\n</ol>\n<p><strong>如何操作</strong>？</p>\n<p>使用一个变量统计两个字符串对应位置字母不相同的个数。如果计数等于 0 或者 2，说明这两个字符串是相似的，使用并查集进行合并即可。</p>\n<p>返回合并后的连通集数就是最终答案。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>暴力遍历即可。35% 99%</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">unionFind</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; parent;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unionFind(<span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;count = n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            parent.push_back(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p == parent[p] ? p : parent[p] = find(parent[p]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionElem</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRoot == qRoot) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        parent[pRoot] = qRoot;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numSimilarGroups</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = strs.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = strs[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"function\">unionFind <span class=\"title\">uf</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; len; ++k)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(strs[i][k] != strs[j][k])</span><br><span class=\"line\">                        cnt++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 对比完一个后，如果只有两个字母不同，说明在同一个分组里面</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cnt == <span class=\"number\">2</span> || cnt == <span class=\"number\">0</span>) uf.unionElem(i, j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> uf.getCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["并查集","图论"]},{"title":"LeetCode84-柱状图中最大的矩形","url":"/blog/2020/12/26/LeetCode84-%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定 <em>n</em> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p>\n<p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/26/LeetCode84-柱状图中最大的矩形/84.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>找到当前高度下的最大矩形面积，然后从所有得到的面积中挑出最大的那一个就是能够勾勒出来矩形的最大面积，如下：</p>\n<ol>\n<li>第1个高度，当前面积为2。</li>\n</ol>\n<img src=\"/blog/2020/12/26/LeetCode84-柱状图中最大的矩形/示例-1.png\">\n\n<ol start=\"2\">\n<li>第2个高度，当前面积为6。</li>\n</ol>\n<img src=\"/blog/2020/12/26/LeetCode84-柱状图中最大的矩形/示例-2.png\">\n\n<ol start=\"3\">\n<li>第3个高度，当前面积为10。</li>\n</ol>\n<img src=\"/blog/2020/12/26/LeetCode84-柱状图中最大的矩形/示例-3.png\">\n\n<ol start=\"4\">\n<li>第4个高度，当前面积为6。</li>\n</ol>\n<img src=\"/blog/2020/12/26/LeetCode84-柱状图中最大的矩形/示例-4.png\">\n\n<ol start=\"5\">\n<li>第5个高度，当前面积为8。</li>\n</ol>\n<img src=\"/blog/2020/12/26/LeetCode84-柱状图中最大的矩形/示例-5.png\">\n\n<ol start=\"6\">\n<li>第6个高度，当前面积为3。</li>\n</ol>\n<img src=\"/blog/2020/12/26/LeetCode84-柱状图中最大的矩形/示例-6.png\">\n\n<p>综上，面积最大出现在第三个高度，此时面积为5。</p>\n<p>我们需要找到当前高度下可以构成矩形的左边界和右边界，再去计算矩形的面积，使用单调栈来实现：</p>\n<ul>\n<li><p>计算高度：如果当前高度小于栈顶元素，此时的栈顶就是上一次高度的最大值（准确一点，是上一次高度最大值的坐标），将其记录并出栈，这时候就可以计算上一个高度面积的最大值了，直到遇到栈顶元素小于等于当前元素或者栈为空，在此之前会一直计算高度</p>\n</li>\n<li><p>寻找边界：当前遍历到的坐标 $i$ 就是右边界，左边界就是 $st.top()+1$（对于示例，当遍历到第二个2时，坐标为4，作为<strong>右边界</strong>；经过一系列的出栈操作，栈中<strong>最后剩下</strong>的元素坐标为1，而<strong>左边界</strong>就应该是<strong>1+1​</strong>而不是1），<strong>如果栈为空，那么左边界就是0</strong>。如下图：</p>\n</li>\n</ul>\n<img src=\"/blog/2020/12/26/LeetCode84-柱状图中最大的矩形/示例-边界.png\">\n\n<p>所以为了提供坐标6，还需要给高度矩阵后面续上一个0。</p>\n<p>由于找到了下一个小于栈顶高度的值时才会计算面积，所以对于示例，最后得到的结果及顺序如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">坐标</th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">高度</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">当前坐标最大面积</td>\n<td align=\"center\">2</td>\n<td align=\"center\">6</td>\n<td align=\"center\">10</td>\n<td align=\"center\">6</td>\n<td align=\"center\">8</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">面积出现的顺序</td>\n<td align=\"center\">1</td>\n<td align=\"center\">6</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n<td align=\"center\">5</td>\n<td align=\"center\">4</td>\n</tr>\n</tbody></table>\n<p>即，真正得到的面积结果为<code>2, 6, 10, 3, 8, 6</code>。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">largestRectangleArea</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class=\"line\">        heights.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mArea = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; heights.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> area = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!st.empty() &amp;&amp; heights[i] &lt; heights[st.top()])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = st.top();</span><br><span class=\"line\">                st.pop();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> right = i;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> left = st.empty() ? <span class=\"number\">0</span> : st.top() + <span class=\"number\">1</span>;</span><br><span class=\"line\">                area = heights[v] * (right - left);</span><br><span class=\"line\">                mArea = max(mArea, area);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            st.push(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mArea;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>CSDN：<a href=\"https://blog.csdn.net/Zolewit/article/details/88863970\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Zolewit/article/details/88863970</a></p>\n","categories":["LeetCode"],"tags":["贪心算法","单调栈"]},{"title":"LeetCode842-将数组拆分成斐波那契序列","url":"/blog/2020/12/08/LeetCode842-%E5%B0%86%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%86%E6%88%90%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%BA%8F%E5%88%97/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个数字字符串 <code>S</code>，比如 <code>S = &quot;123456579&quot;</code>，我们可以将它分成斐波那契式的序列 <code>[123, 456, 579]​</code>。</p>\n<p>形式上，斐波那契式序列是一个非负整数列表 <code>F​</code>，且满足：</p>\n<ul>\n<li><code>0 &lt;= F[i] &lt;= 2^31 - 1​</code>，（也就是说，每个整数都符合 32 位有符号整数类型）</li>\n<li><code>F.length &gt;= 3​</code>；</li>\n<li>对于所有的 <code>0 &lt;= i &lt; F.length - 2​</code>，都有 ​<code>F[i] + F[i+1] = F[i+2]​</code>成立。</li>\n</ul>\n<p><strong>另外，请注意，将字符串拆分成小块时，每个块的数字一定不要以零开头，除非这个块是数字 0 本身。</strong></p>\n<p>返回从 <code>S</code> 拆分出来的任意一组斐波那契式的序列块，如果不能拆分则返回 <code>[]</code>。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/08/LeetCode842-将数组拆分成斐波那契序列/842.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>不断地截取字符串，看当前字符串对应的数能不能和之前的两个数构成斐波那契序列，如果可以就继续找下一个，不行的话就进行回退。截取完最后一个字符后，如果截取到的数字的个数大于等于3，则说明此数组可以拆分成斐波那契序列。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">splitIntoFibonacci</span><span class=\"params\">(<span class=\"built_in\">string</span> S)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.empty()) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; buf;</span><br><span class=\"line\">        backTrack(S, buf, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">backTrack</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;S, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;buf, <span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(buf.size() &gt;= <span class=\"number\">3</span> &amp;&amp; index == S.size())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = index; i &lt; S.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不能以0开头</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(S[index] == <span class=\"string\">'0'</span> &amp;&amp; i &gt; index)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 取从index开始到i的字符串并转换为数字</span></span><br><span class=\"line\">            <span class=\"built_in\">string</span> s = S.substr(index, i - index + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">long</span> num = stol(s, <span class=\"number\">0</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 如果取出的数大于INT_MAX直接终止</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num &gt; INT_MAX) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = buf.size();</span><br><span class=\"line\">            <span class=\"comment\">// 如果截取的数字大于前两个数字之后，直接终止，因为后面只会越取越大</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(len &gt;= <span class=\"number\">2</span> &amp;&amp; num &gt; (<span class=\"keyword\">long</span>)buf[len - <span class=\"number\">1</span>] + (<span class=\"keyword\">long</span>)buf[len - <span class=\"number\">2</span>]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 刚开始时buf里不到2个数时，将num加入buf中</span></span><br><span class=\"line\">            <span class=\"comment\">// 或者buf已经有2个及以上的数了，如果num等于buf的后两个数之和，加入buf中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(len &lt;= <span class=\"number\">1</span> || num == (<span class=\"keyword\">long</span>)buf[len - <span class=\"number\">1</span>] + (<span class=\"keyword\">long</span>)buf[len - <span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">                buf.push_back(num);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(backTrack(S, buf, i + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 如果没找到，就将当前的num移除掉</span></span><br><span class=\"line\">                buf.pop_back();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p><a href=\"https://leetcode-cn.com/problems/split-array-into-fibonacci-sequence/solution/javahui-su-suan-fa-tu-wen-xiang-jie-ji-b-vg5z/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/split-array-into-fibonacci-sequence/solution/javahui-su-suan-fa-tu-wen-xiang-jie-ji-b-vg5z/</a></p>\n","categories":["LeetCode"],"tags":["贪心算法","回溯算法"]},{"title":"LeetCode86-分隔链表","url":"/blog/2021/01/03/LeetCode86-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给你一个链表和一个特定值 <code>x</code> ，请你对链表进行分隔，使得所有小于 <code>x</code> 的节点都出现在大于或等于 <code>x</code> 的节点之前。</p>\n<p>你应当保留两个分区中每个节点的初始相对位置。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/03/LeetCode86-分隔链表/86.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>将链表一分为二，为小于 <code>x</code> 的部分和大于等于 <code>x</code> 的部分分别建立一个新链表，然后再将小链表的表尾连接至大链表的表头即可。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">partition</span><span class=\"params\">(ListNode* head, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!head) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        ListNode *dummyNodeSmall = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode *dummyNodeLarge = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode *small = dummyNodeSmall;</span><br><span class=\"line\">        ListNode *large = dummyNodeLarge;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> iter = head; iter != <span class=\"literal\">nullptr</span>; iter = iter-&gt;next)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(iter-&gt;val &lt; x)&#123;</span><br><span class=\"line\">                small-&gt;next = iter;</span><br><span class=\"line\">                small = small-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                large-&gt;next = iter;</span><br><span class=\"line\">                large = large-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        large-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        small-&gt;next = dummyNodeLarge-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummyNodeSmall-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>官方题解：<a href=\"https://leetcode-cn.com/problems/partition-list/solution/fen-ge-lian-biao-by-leetcode-solution-7ade/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/partition-list/solution/fen-ge-lian-biao-by-leetcode-solution-7ade/</a></p>\n","categories":["LeetCode"],"tags":["链表"]},{"title":"LeetCode860-柠檬水找零","url":"/blog/2020/12/10/LeetCode860-%E6%9F%A0%E6%AA%AC%E6%B0%B4%E6%89%BE%E9%9B%B6/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>在柠檬水摊上，每一杯柠檬水的售价为 <code>5</code> 美元。</p>\n<p>顾客排队购买你的产品，（按账单 <code>bills</code> 支付的顺序）一次购买一杯。</p>\n<p>每位顾客只买一杯柠檬水，然后向你付 <code>5</code> 美元、<code>10</code> 美元或 <code>20</code> 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 <code>5</code> 美元。</p>\n<p>注意，一开始你手头没有任何零钱。</p>\n<p>如果你能给每位顾客正确找零，返回 <code>true</code> ，否则返回 <code>false</code> 。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/10/LeetCode860-柠檬水找零/860.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>每位顾客付款只有5、10、20美元的选项：</p>\n<ul>\n<li><p>收到5元时记录5元零钱的个数；</p>\n</li>\n<li><p>收到10元时需要找零5元并记录10元的个数；</p>\n</li>\n<li><p>收到20元需要找零15元，但不用记录20元个数，因为不会发生找零20元的情况。</p>\n</li>\n</ul>\n<p><em>收到20元找零时应首先选10元零钱，10元用完后再选5元的。比如找零15元，如果只剩下两张5元，一张10元，先从5元开始无法刚好找零15（5+5+10）。</em></p>\n<p><em>需要找零的总数必须大于等于当前用到的零钱的面值，详见代码。</em></p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">lemonadeChange</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; bills)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> <span class=\"built_in\">map</span>[<span class=\"number\">11</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bills.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(bills[i] == <span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">map</span>[<span class=\"number\">5</span>]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;   </span><br><span class=\"line\">                <span class=\"keyword\">int</span> val = bills[i] - <span class=\"number\">5</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">10</span>; j &gt;= <span class=\"number\">5</span>; j /= <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 需要找零的总数必须大于等于当前用到的零钱的面值，val &gt;= j</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(<span class=\"built_in\">map</span>[j] != <span class=\"number\">0</span> &amp;&amp; val &gt; <span class=\"number\">0</span> &amp;&amp; val &gt;= j)&#123;</span><br><span class=\"line\">                        val -= j;</span><br><span class=\"line\">                        <span class=\"built_in\">map</span>[j]--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(val == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(bills[i] &lt;= <span class=\"number\">10</span>) <span class=\"built_in\">map</span>[bills[i]]++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(val != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["LeetCode"],"tags":["贪心算法"]},{"title":"LeetCode85-最大矩形","url":"/blog/2020/12/26/LeetCode85-%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>给定一个仅包含 <code>0</code> 和 <code>1</code> 、大小为 <code>rows x cols</code> 的二维二进制矩阵，找出只包含 <code>1</code> 的最大矩形，并返回其面积。</p>\n<p>本题与<a href=\"https://leetcode-cn.com/problems/largest-rectangle-in-histogram/\" target=\"_blank\" rel=\"noopener\">LeetCode84-柱状图中最大的矩形</a>基本一致。</p>\n <a id=\"more\"></a>\n\n<img src=\"/blog/2020/12/26/LeetCode85-最大矩形/85.png\" style=\"zoom:80%;\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>如图，使坐标值竖向移动，求出每个坐标轴下的矩形最大面积，再从中取最大值就是最大的矩形：</p>\n<img src=\"/blog/2020/12/26/LeetCode85-最大矩形/坐标轴.png\" style=\"zoom:80%;\">\n\n<p>很明显在图三中得到最大矩形，面积为6。求当前坐标轴下的最大矩形面积与<a href=\"https://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/c-dan-diao-zhan-si-lu-qing-xi-you-tu-you-ip3c/\" target=\"_blank\" rel=\"noopener\">LeetCode84-柱状图中最大的矩形</a>方法一致。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maximalRectangle</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(matrix.empty()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; preHeights;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matrix.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; heights;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; matrix[<span class=\"number\">0</span>].size(); ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    heights.push_back(matrix[i][j] - <span class=\"string\">'0'</span>);    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(matrix[i][j] == <span class=\"string\">'1'</span>) </span><br><span class=\"line\">                        heights.push_back(preHeights[j] + matrix[i][j] - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        heights.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            preHeights = heights;</span><br><span class=\"line\">            res = max(res, maxArea(heights));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;heights)</span></span>&#123;</span><br><span class=\"line\">        heights.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mArea = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; heights.size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> area = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!st.empty() &amp;&amp; heights[i] &lt; heights[st.top()])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = st.top();</span><br><span class=\"line\">                st.pop();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> right = i;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> left = st.empty() ? <span class=\"number\">0</span> : st.top() + <span class=\"number\">1</span>;</span><br><span class=\"line\">                area = heights[v] * (right - left);</span><br><span class=\"line\">                mArea = max(mArea, area);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            st.push(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mArea;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>评论区：<a href=\"https://leetcode-cn.com/problems/maximal-rectangle/comments/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/maximal-rectangle/comments/</a></p>\n","categories":["LeetCode"],"tags":["贪心算法","单调栈"]},{"title":"LeetCode877-石子游戏","url":"/blog/2020/05/28/LeetCode877-%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F/","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>亚历克斯和李用几堆石子在做游戏。偶数堆石子排成一行，每堆都有正整数颗石子 piles[i] 。</p>\n<p>游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。</p>\n<p>亚历克斯和李轮流进行，亚历克斯先开始。 每回合，玩家从行的开始或结束处取走整堆石头。 这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。</p>\n<p>假设亚历克斯和李都发挥出最佳水平，当亚历克斯赢得比赛时返回 true ，当李赢得比赛时返回 false 。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/05/28/LeetCode877-石子游戏/877.png\" style=\"zoom:80%;\">\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>这个题其实一定是先手获胜，为了更具有一般性，假设<strong>石头的堆数可以是任意正整数</strong>，那么就能打破先手必定获胜的局面了，比如<code>piles = [1, 100, 3]</code>，先手不管拿1还是3，能够决胜的100都会被后手拿走，后手获胜。</p>\n<p><strong>博弈问题的难点在于，两个人要轮流进行选择，而且都很精明，应该如何编程表示这个过程呢？</strong>首先明确 dp 数组的含义，只要找到「状态」和「选择」，一切就水到渠成了。</p>\n<h4 id=\"一、定义-dp-数组的含义\"><a href=\"#一、定义-dp-数组的含义\" class=\"headerlink\" title=\"一、定义 dp 数组的含义\"></a>一、定义 dp 数组的含义</h4><p>先看一下dp数组的最终样子，再介绍其含义</p>\n<img src=\"/blog/2020/05/28/LeetCode877-石子游戏/dp.png\" style=\"zoom:50%;\">\n\n<p>定义dp数组是二维的，并且每个单元包含first和second两个属性，将这两个属性简写为fir和sec。如按上图的数据，我们说 <code>dp[1][3].fir = 10</code>，<code>dp[0][1].sec = 3</code>。</p>\n<p><strong>以下是对 dp 数组含义的解释：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">dp[i][j].fir 表示，对于 piles[i...j] 这部分石头堆，先手能获得的最高分数。</span><br><span class=\"line\">dp[i][j].sec 表示，对于 piles[i...j] 这部分石头堆，后手能获得的最高分数。</span><br><span class=\"line\"></span><br><span class=\"line\">举例理解一下，假设 piles = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]，索引从 <span class=\"number\">0</span> 开始</span><br><span class=\"line\">dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>].fir = <span class=\"number\">9</span> 意味着：面对石头堆 [<span class=\"number\">3</span>, <span class=\"number\">9</span>]，先手最终能够获得 <span class=\"number\">9</span> 分。</span><br><span class=\"line\">dp[<span class=\"number\">1</span>][<span class=\"number\">3</span>].sec = <span class=\"number\">2</span> 意味着：面对石头堆 [<span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]，后手最终能够获得 <span class=\"number\">2</span> 分。</span><br></pre></td></tr></table></figure>\n\n<p>我们想求的答案是先手和后手最终分数哪个更大，按照这个定义也就是 <code>dp[0][n-1].fir</code>和<code>dp[0][n-1].sec</code>哪个更大。</p>\n<h4 id=\"二、状态转移方程\"><a href=\"#二、状态转移方程\" class=\"headerlink\" title=\"二、状态转移方程\"></a>二、状态转移方程</h4><p>要写状态转移方程，需要找到所有<strong>状态</strong>和每个状态可以做出的<strong>选择</strong>，然后择优。</p>\n<p>根据前面对 dp 数组的定义，<strong>状态</strong>显然有三个：<strong>开始的索引 i，结束的索引 j，当前轮到的人。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">dp[i][j][fir <span class=\"keyword\">or</span> sec]</span><br><span class=\"line\">其中：</span><br><span class=\"line\"><span class=\"number\">0</span> &lt;= i &lt; piles.length</span><br><span class=\"line\">i &lt;= j &lt; piles.length</span><br></pre></td></tr></table></figure>\n\n<p>对于这个问题的每个状态，可以做的<strong>选择</strong>有两个：<strong>选择最左边的那堆石头，或者选择最右边的那堆石头。</strong></p>\n<p>这道题的难点在于，两人是交替进行选择的，也就是说先手的选择会对后手有影响，这怎么表达出来呢？根据我们对 dp 数组的定义，很容易解决这个难点，<strong>写出状态转移方程：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">dp[i][j].fir = max(piles[i] + dp[i+<span class=\"number\">1</span>][j].sec, piles[j] + dp[i][j<span class=\"number\">-1</span>].sec)</span><br><span class=\"line\">left = piles[i] + dp[i+<span class=\"number\">1</span>][j].sec <span class=\"comment\">//选择最左边的石头堆</span></span><br><span class=\"line\">right = piles[j] + dp[i][j<span class=\"number\">-1</span>].sec <span class=\"comment\">//选择最右边的石头堆</span></span><br><span class=\"line\"># 解释：我作为先手，面对 piles[i...j] 时，有两种选择：</span><br><span class=\"line\"># 要么我选择最左边的那一堆石头，然后面对 piles[i+<span class=\"number\">1.</span>..j]</span><br><span class=\"line\"># 在上一轮中，我是作为后手的；</span><br><span class=\"line\"># 要么我选择最右边的那一堆石头，然后面对 piles[i...j<span class=\"number\">-1</span>]</span><br><span class=\"line\"># 在上一轮中，我是作为后手的。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> 先手选择左边:</span><br><span class=\"line\">    dp[i][j].sec = dp[i+<span class=\"number\">1</span>][j].fir</span><br><span class=\"line\"><span class=\"keyword\">if</span> 先手选择右边:</span><br><span class=\"line\">    dp[i][j].sec = dp[i][j<span class=\"number\">-1</span>].fir</span><br><span class=\"line\"># 解释：我作为后手，要等先手先选择，有两种情况：</span><br><span class=\"line\"># 如果先手选择了最左边那堆，给我剩下了 piles[i+<span class=\"number\">1.</span>..j]</span><br><span class=\"line\"># 此时轮到我，我变成了先手；</span><br><span class=\"line\"># 如果先手选择了最右边那堆，给我剩下了 piles[i...j<span class=\"number\">-1</span>]</span><br><span class=\"line\"># 此时轮到我，我变成了先手。</span><br><span class=\"line\">根据 dp 数组的定义，我们也可以找出base <span class=\"keyword\">case</span>，也就是最简单的情况：</span><br><span class=\"line\"></span><br><span class=\"line\">dp[i][j].fir = piles[i]</span><br><span class=\"line\">dp[i][j].sec = <span class=\"number\">0</span></span><br><span class=\"line\">其中 <span class=\"number\">0</span> &lt;= i == j &lt; n</span><br><span class=\"line\"># 解释：i 和 j 相等就是说面前只有一堆石头 piles[i]，i != j时可以不需要初始化</span><br><span class=\"line\"># 那么显然先手的得分为 piles[i]</span><br><span class=\"line\"># 后手没有石头拿了，得分为 <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2020/05/28/LeetCode877-石子游戏/dp1.png\" style=\"zoom:50%;\">\n\n<p>这里需要注意一点，我们发现 base case 是斜着的，而且我们推算<code>dp[i][j]</code>时需要用到<code>dp[i+1][j]</code>和<code>dp[i][j-1]</code>:</p>\n<img src=\"/blog/2020/05/28/LeetCode877-石子游戏/dp2.png\" alt=\"dp2\" style=\"zoom:50%;\">\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 举例：若i = <span class=\"number\">0</span>, j = <span class=\"number\">1</span></span><br><span class=\"line\"># dp[i][j].fir = <span class=\"built_in\">max</span>(piles[i] + dp[i+<span class=\"number\">1</span>][j].sec, piles[j] + dp[i][j<span class=\"number\">-1</span>].sec)</span><br><span class=\"line\">dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>].fir = <span class=\"built_in\">max</span>(piles[<span class=\"number\">0</span>] + dp[<span class=\"number\">1</span>][<span class=\"number\">1</span>].sec, piles[<span class=\"number\">1</span>] + dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>].sec)</span><br><span class=\"line\">    \t\t = <span class=\"built_in\">max</span>(<span class=\"number\">3</span> + <span class=\"number\">0</span>, <span class=\"number\">9</span> + <span class=\"number\">0</span>) = <span class=\"number\">9</span></span><br><span class=\"line\"># 先手选择右边第一堆</span><br><span class=\"line\"># <span class=\"keyword\">if</span> 先手选择右边: dp[i][j].sec = dp[i][j<span class=\"number\">-1</span>].fir</span><br><span class=\"line\">dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>].sec = dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>].fir = <span class=\"number\">3</span></span><br><span class=\"line\">dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = &#123;<span class=\"number\">9</span>, <span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以说算法不能简单的一行一行遍历 dp 数组，<strong>而要斜着遍历数组：</strong></p>\n<img src=\"/blog/2020/05/28/LeetCode877-石子游戏/dp3.png\" style=\"zoom:50%;\">\n\n<p>如何斜着遍历二维数组是个问题，这里我不是很会，只是有个框架，具体的细节还需要再消化消化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 遍历的是橘黄色的部分</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">2</span>; l &lt;= n; l++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - l; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = l + i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">/*操作段*/</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三、代码实现\"><a href=\"#三、代码实现\" class=\"headerlink\" title=\"三、代码实现\"></a>三、代码实现</h4><p>实现fir和sec这个单元可以用pair容器，也可以用<code>dp[n][n][2]</code>这种三维数组，我在这里使用了结构体。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pair</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> fir;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sec;</span><br><span class=\"line\">        Pair() &#123;&#125;;</span><br><span class=\"line\">        Pair(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;fir = a;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;sec = b;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">stoneGame</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; piles)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = piles.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        Pair** dp = <span class=\"keyword\">new</span> Pair*[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            dp[i] = <span class=\"keyword\">new</span> Pair[n];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            dp[i][i].fir = piles[i];</span><br><span class=\"line\">            dp[i][i].sec = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">2</span>; l &lt;= n; l++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - l; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j = l + i - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span> left = dp[i+<span class=\"number\">1</span>][j].sec + piles[i];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> right = dp[i][j<span class=\"number\">-1</span>].sec + piles[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(left &gt; right)&#123;</span><br><span class=\"line\">                    dp[i][j].fir = left;</span><br><span class=\"line\">                    dp[i][j].sec = dp[i+<span class=\"number\">1</span>][j].fir;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i][j].fir = right;</span><br><span class=\"line\">                    dp[i][j].sec = dp[i][j<span class=\"number\">-1</span>].fir;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dp[<span class=\"number\">0</span>][n<span class=\"number\">-1</span>].fir &gt; dp[<span class=\"number\">0</span>][n<span class=\"number\">-1</span>].sec) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>《labuladong的算法小抄》 动态规划之博弈问题</p>\n","categories":["LeetCode"],"tags":["动态规划"]},{"title":"LeetCode959-由斜杠划分区域","url":"/blog/2021/01/25/LeetCode959-%E7%94%B1%E6%96%9C%E6%9D%A0%E5%88%92%E5%88%86%E5%8C%BA%E5%9F%9F/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>在由 1 x 1 方格组成的 N x N 网格 <code>grid</code> 中，每个 1 x 1 方块由 <code>/</code>、<code>\\</code> 或空格构成。这些字符会将方块划分为一些共边的区域。</p>\n<p>（请注意，反斜杠字符是转义的，因此 <code>\\</code> 用 <code>&quot;\\\\&quot;</code> 表示。）。</p>\n<p>返回区域的数目。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/25/LeetCode959-由斜杠划分区域/959.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>输入 <code>grid</code> 的长度 <code>n</code> 就是网格的<strong>边长</strong>。比如示例中 <code>grid</code> 的长度为2，那么就是对 $2\\times2$ 的网格中的每一小格，通过字符确定如何划分这一小格。</p>\n<p>将一个小格分为<strong>4</strong>个部分，分别为 <code>0,1,2,3</code>，如下：</p>\n<img src=\"/blog/2021/01/25/LeetCode959-由斜杠划分区域/959_1.png\">\n\n<ul>\n<li><p>如果输入字符为 <code>&quot;/&quot;</code> ，则将 <code>0-1</code> 与 <code>3-2</code> 分别连接。</p>\n</li>\n<li><p>如果输入字符为 <code>&quot;\\\\&quot;</code> ，则将 <code>0-3</code> 与 <code>1-2</code> 分别连接。</p>\n</li>\n<li><p>如果输入字符为 <code> &quot; &quot;</code>，则将 <code>0-1-2-3</code> 全部连接。</p>\n</li>\n</ul>\n<p>左右相邻的两个小格需要将左边的 <code>1</code> 与右边的 <code>3</code> 相连：</p>\n<img src=\"/blog/2021/01/25/LeetCode959-由斜杠划分区域/959_2.png\" style=\"zoom:80%;\">\n\n<p>上下相邻的两个小格需要将上面的 <code>2</code>  与下边的 <code>0</code> 相连：</p>\n<img src=\"/blog/2021/01/25/LeetCode959-由斜杠划分区域/959_3.png\">\n\n<p>除了第一行和第一列，其他的行和列都需要考虑上述两种相邻的情况。</p>\n<p>合并结束后，连通集的个数就是区域的数目。</p>\n<p>以示例4为例：</p>\n<ul>\n<li>仅对于每个字符合并：</li>\n</ul>\n<img src=\"/blog/2021/01/25/LeetCode959-由斜杠划分区域/959_4.png\">\n\n<ul>\n<li>对行和列相邻的小格进行合并：</li>\n</ul>\n<img src=\"/blog/2021/01/25/LeetCode959-由斜杠划分区域/959_5.png\">\n\n<p>如上图所示，区域一共有5个。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">unionFind</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; parent;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; rank;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unionFind(<span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;count = n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            parent.push_back(i);</span><br><span class=\"line\">            rank.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p == parent[p] ? p : parent[p] = find(parent[p]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionElem</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRoot == qRoot) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rank[pRoot] &lt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank[pRoot] &gt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[qRoot] = pRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">            rank[qRoot]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">genCount</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>: </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">regionsBySlashes</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = grid.size();</span><br><span class=\"line\">        <span class=\"function\">unionFind <span class=\"title\">uf</span><span class=\"params\">(<span class=\"number\">4</span> * n * n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> start = <span class=\"number\">4</span> * (i * n + j); <span class=\"comment\">// 0号位置</span></span><br><span class=\"line\">                <span class=\"keyword\">switch</span>(grid[i][j])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">' '</span>:</span><br><span class=\"line\">                        uf.unionElem(start, start + <span class=\"number\">1</span>);</span><br><span class=\"line\">                        uf.unionElem(start + <span class=\"number\">1</span>, start + <span class=\"number\">2</span>);</span><br><span class=\"line\">                        uf.unionElem(start + <span class=\"number\">2</span>, start + <span class=\"number\">3</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>:</span><br><span class=\"line\">                        uf.unionElem(start, start + <span class=\"number\">3</span>);</span><br><span class=\"line\">                        uf.unionElem(start + <span class=\"number\">1</span>, start + <span class=\"number\">2</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'\\\\'</span>:</span><br><span class=\"line\">                        uf.unionElem(start, start + <span class=\"number\">1</span>);</span><br><span class=\"line\">                        uf.unionElem(start + <span class=\"number\">2</span>, start + <span class=\"number\">3</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 连接同一列2-0</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">0</span>) uf.unionElem(start, start - <span class=\"number\">4</span> * n + <span class=\"number\">2</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 连接同一行1-3</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j &gt; <span class=\"number\">0</span>) uf.unionElem(start + <span class=\"number\">3</span>, start - <span class=\"number\">3</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> uf.genCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>评论区：<a href=\"https://leetcode-cn.com/problems/regions-cut-by-slashes/comments/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/regions-cut-by-slashes/comments/</a></p>\n","categories":["LeetCode"],"tags":["并查集","图论"]},{"title":"LeetCode947-移除最多的同行或同列石头","url":"/blog/2021/01/15/LeetCode947-%E7%A7%BB%E9%99%A4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%90%8C%E8%A1%8C%E6%88%96%E5%90%8C%E5%88%97%E7%9F%B3%E5%A4%B4/","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p><code>n</code> 块石头放置在二维平面中的一些整数坐标点上。每个坐标点上最多只能有一块石头。</p>\n<p>如果一块石头的 <strong>同行或者同列</strong> 上有其他石头存在，那么就可以移除这块石头。</p>\n<p>给你一个长度为 <code>n</code> 的数组 <code>stones</code> ，其中 <code>stones[i] = [xi, yi]</code> 表示第 <code>i</code> 块石头的位置，返回 <strong>可以移除的石子</strong> 的最大数量。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2021/01/15/LeetCode947-移除最多的同行或同列石头/947.png\">\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>这个题的意思是：某行或者某列上最多只能存在一个石头，求移除的石头总数。</p>\n<p>对于 <code>stones</code> 中任意两个位置，如果相对应的位置有一个相等，说明两个位置存在<strong>相同的</strong>行或者列，可以合并为一个集合。根据上述条件，使用双重循环将 <code>stones</code> 两两结合，最终合并的次数就是移除的石头个数，可以由 <code>stones</code> 的长度减去并查集中连通分量个数得到。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">unionFind</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; parent;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; rank;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unionFind(<span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;count = n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            parent.push_back(i);</span><br><span class=\"line\">            rank.push_back(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p == parent[p] ? p : parent[p] = find(parent[p]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionElem</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRoot == qRoot) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rank[pRoot] &lt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank[pRoot] &gt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[qRoot] = pRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">            rank[qRoot]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">removeStones</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; stones)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = stones.size();</span><br><span class=\"line\">        <span class=\"function\">unionFind <span class=\"title\">uf</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; ++j)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(stones[i][<span class=\"number\">0</span>] == stones[j][<span class=\"number\">0</span>] || stones[i][<span class=\"number\">1</span>] == stones[j][<span class=\"number\">1</span>])</span><br><span class=\"line\">                    uf.unionElem(i, j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stones.size() - uf.getCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度为 <code>O(n^2)</code>。</p>\n<h4 id=\"更进一步\"><a href=\"#更进一步\" class=\"headerlink\" title=\"更进一步\"></a>更进一步</h4><p>如果将 <code>stones</code> 中的位置与其相应的行或者列绑定，那么可以将二维降为一维，将行和列当作一个数字，降低了时间复杂度。</p>\n<ul>\n<li>当遍历到点 <code>[x,y]</code> 时，直接将 <code>x</code> 和 <code>y</code> 进行合并，表示该行和该列的点属于同一个并查集（根节点相同）。</li>\n<li><code>x</code> 和 <code>y</code> 的值可能相等，相等时不能进行合并（一维情况下，行与列需要区分开），根据题目范围，将 <code>y</code> 加上10001，两者不会重合。</li>\n</ul>\n<h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">unionFind</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; parent, rank;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    unionFind():count(<span class=\"number\">0</span>)&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当不存在p时，创建p并且指向自身，根节点数加1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!parent.count(p))&#123;</span><br><span class=\"line\">            parent[p] = p;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p == parent[p] ? p : parent[p] = find(parent[p]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unionElem</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRoot == qRoot) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rank[pRoot] &lt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank[pRoot] &gt; rank[qRoot])&#123;</span><br><span class=\"line\">            parent[qRoot] = pRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">            rank[qRoot]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">removeStones</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; stones)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = stones.size();</span><br><span class=\"line\">        unionFind uf;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;stone : stones)&#123;</span><br><span class=\"line\">            uf.unionElem(stone[<span class=\"number\">0</span>], stone[<span class=\"number\">1</span>] + <span class=\"number\">10001</span>); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stones.size() - uf.getCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>题解：<a href=\"https://leetcode-cn.com/problems/most-stones-removed-with-same-row-or-column/solution/tu-jie-bing-cha-ji-by-yexiso-nbcz/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/most-stones-removed-with-same-row-or-column/solution/tu-jie-bing-cha-ji-by-yexiso-nbcz/</a></p>\n","categories":["LeetCode"],"tags":["并查集","图论"]},{"title":"Sublime Text3安装Emmet插件遇到的问题及解决","url":"/blog/2019/09/16/Sublime-text3%E5%AE%89%E8%A3%85Emmet%E6%8F%92%E4%BB%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>最近对前端的知识准备进行一个入门，首先学习一下html文档的写法，第一步就是选择一个合适的开发工具。<a id=\"more\"></a>当然，html文件也可以用记事本的方式进行编写，不过在尝试了记事本编写之后还是放弃了，缩进或者格式都得自己来，无疑是给自己徒增烦恼。</p>\n<p>在进行一番查看之后，选择了Sublime Text3这款工具来编写html文件，这款工具目前也比较流行，具体的好处就是可以带很多插件，提高你写代码的效率。这里附上ST3的下载网址：</p>\n<p><a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\">http://www.sublimetext.com/3</a></p>\n<h1 id=\"为什么使用Emmet这个插件？\"><a href=\"#为什么使用Emmet这个插件？\" class=\"headerlink\" title=\"为什么使用Emmet这个插件？\"></a>为什么使用Emmet这个插件？</h1><p>在没有安装Emmet之前，Sublime Text的使用貌似和记事本没有什么不同，也是得自己写结构，区别就是颜色好看了些，而安装了Emmet之后就不同了，如果你从事Web前端开发的话，对该插件一定不会陌生。它使用仿CSS选择器的语法来生成代码，大大提高了HTML/CSS代码编写的速度，可以直接使用 !+tab 快速得到一个标准的html5文档，如下图所示：</p>\n<img src=\"/blog/2019/09/16/Sublime-text3安装Emmet插件遇到的问题及解决/ST界面.png\" style=\"zoom:50%;\">\n\n<h1 id=\"安装Emmet插件\"><a href=\"#安装Emmet插件\" class=\"headerlink\" title=\"安装Emmet插件\"></a>安装Emmet插件</h1><p>这里已经默认你安装了Package Control，这个组件是用来安装/删除插件和其他一些功能要用到的（目前我就用到了安装和删除两个功能）。</p>\n<h2 id=\"自动安装法\"><a href=\"#自动安装法\" class=\"headerlink\" title=\"自动安装法\"></a>自动安装法</h2><p>这个方法就是看你运气，不过过程一定是正确的，但由于各种原因（墙、网络之类的）安装不成功的大有人在，所以先写一下自动安装法。</p>\n<ol>\n<li>在Sublime Text3的主页面按<strong>CTRL+SHIFT+P</strong>打开Package Control</li>\n<li>输入<strong>install</strong>，选择第一个回车</li>\n<li>这时候会让你选择需要安装的插件，你输入<strong>Emmet</strong>，选择第一个回车即可</li>\n<li>左下角会显示下载PyV8，在提示<strong>PyV8 binary successfully loaded</strong>即安装完成</li>\n<li>重启Sublime Text3，安装完成！</li>\n</ol>\n<p>当然，一般人像我运气一样的，这样是成功不了的（坏笑）。</p>\n<h2 id=\"手动安装法\"><a href=\"#手动安装法\" class=\"headerlink\" title=\"手动安装法\"></a>手动安装法</h2><h3 id=\"1-安装PyV8\"><a href=\"#1-安装PyV8\" class=\"headerlink\" title=\"1.安装PyV8\"></a>1.安装PyV8</h3><p>在你安装Emmet时，你可能出现下面这种错误提示：</p>\n<p><strong><em>Sublime Text Error while loading PyV8 binary: exit code 1 Try to manually install Pyv8 form <a href=\"https://github.com/emetio/pyv8-binaries\" target=\"_blank\" rel=\"noopener\">https://github.com/emetio/pyv8-binaries</a></em></strong></p>\n<p>出现这种情况的原因就是下载PyV8这个包不成功，那么你就得手动去下载，这个里也把网址给你了，如下：<a href=\"https://github.com/emmetio/pyv8-binaries\" target=\"_blank\" rel=\"noopener\">https://github.com/emmetio/pyv8-binaries</a> 选择合适你电脑的版本去下载，这个必须记住，不然可能会用不了，我第一次就犯了这个错误。因为我电脑装了python3.7，所以我选择了 <strong>pyv8-win64-p3</strong>，我把下载地址也贴出来，不过因为gtihub是国外的网站，所以下载会很慢，链接如下：</p>\n<p><a href=\"https://github.com/emmetio/pyv8-binaries/raw/master/pyv8-win64-p3.zip\" target=\"_blank\" rel=\"noopener\">https://github.com/emmetio/pyv8-binaries/raw/master/pyv8-win64-p3.zip</a></p>\n<p>下载好了之后，对它进行解压，得到下面这个文件：</p>\n<img src=\"/blog/2019/09/16/Sublime-text3安装Emmet插件遇到的问题及解决/pyv8.png\" style=\"zoom:80%;\">\n\n<p>接下来按照以下的步骤做就ok了：</p>\n<ol>\n<li>打开Sublime Text</li>\n<li>依次选择首选项 -&gt; 浏览插件目录（我的汉化了，不然是Preferences -&gt;Browse Packages）</li>\n<li>新建PyV8文件夹</li>\n<li>在PyV8文件夹把上图中的文件复制过来</li>\n<li>重启Sublime Text</li>\n</ol>\n<p>现在你就可以在ST3中使用Emmet的功能了，不过还有运气不好的人，还是不能用，比如说我，那么继续往下看。</p>\n<h3 id=\"2-手动安装Emmet\"><a href=\"#2-手动安装Emmet\" class=\"headerlink\" title=\"2.手动安装Emmet\"></a>2.手动安装Emmet</h3><p>如果你还是无法使用Emmet，但是你在首选项菜单中的Package Settings还能看到Emmet的身影，然而那只是个空壳，继续进入插件目录，你会发现没有与Emmet相关的文件夹的存在，那么你就需要自己手动安装Emmet。下载地址如下（下载也比较慢，但是只有200k左右）：</p>\n<p><a href=\"https://codeload.github.com/sergeche/emmet-sublime/zip/master\" target=\"_blank\" rel=\"noopener\">https://codeload.github.com/sergeche/emmet-sublime/zip/master</a></p>\n<p>下载好了之后，继续进入插件目录（首选项 -&gt; 浏览插件目录），把解压后的文件放进去，如图：</p>\n<img src=\"/blog/2019/09/16/Sublime-text3安装Emmet插件遇到的问题及解决/emmet.png\" style=\"zoom:50%;\">\n\n<p>接下来你再重启ST就行了，需要注意的是，如果你没有装PyV8，那么你打开ST之后它会自动再一次下载这个包，同样可能出现1中的问题，那么你可以先把PyV8装好，再手动安装Emmet，重启之后就大功告成，终于装好啦！我属于运气最差的那种，不好的都让我遇到了，刚接触花了几个小时才弄明白，虽然最后成功了，我还是流下了没有技术的眼泪。。。</p>\n","categories":["前端"]},{"title":"Verilog基础2","url":"/blog/2020/07/14/Verilog%E5%9F%BA%E7%A1%802/","content":"<h2 id=\"Verilog基础\"><a href=\"#Verilog基础\" class=\"headerlink\" title=\"Verilog基础\"></a>Verilog基础</h2><p>学习verilog基础语法2</p>\n<a id=\"more\"></a>\n\n<h3 id=\"第五章-FPGA基本实践\"><a href=\"#第五章-FPGA基本实践\" class=\"headerlink\" title=\"第五章 FPGA基本实践\"></a>第五章 FPGA基本实践</h3><h4 id=\"流水灯实践\"><a href=\"#流水灯实践\" class=\"headerlink\" title=\"流水灯实践\"></a>流水灯实践</h4><figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> v1(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,\t\t\t<span class=\"comment\">// 时钟输入</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> rst,\t\t\t<span class=\"comment\">// 复位信号</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] led\t<span class=\"comment\">// LED输出</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"><span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] ledtemp = <span class=\"number\">8'b0000_0001</span>;\t<span class=\"comment\">// led初始值</span></span><br><span class=\"line\"><span class=\"keyword\">reg</span> [<span class=\"number\">23</span>:<span class=\"number\">0</span>] divclk_cnt = <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// 24位计数值</span></span><br><span class=\"line\"><span class=\"keyword\">reg</span> divclk = <span class=\"number\">0</span>;\t\t\t\t\t\t<span class=\"comment\">// 低频时钟</span></span><br><span class=\"line\"><span class=\"keyword\">assign</span> led = ledtemp;\t<span class=\"comment\">// 实现将寄存器变量值赋给LED输出</span></span><br><span class=\"line\">\t<span class=\"keyword\">parameter</span> halfduty_cntvalue = <span class=\"number\">12500000</span>;</span><br><span class=\"line\"><span class=\"keyword\">always</span> @ ( <span class=\"keyword\">posedge</span> clk )\t\t\t<span class=\"comment\">// 把系统时钟分频50Mhz/25000000 = 2Hz</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( divclk_cnt == halfduty_cntvalue)\t<span class=\"comment\">// 计数满后翻转</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\t\tdivclk = ~divclk;</span><br><span class=\"line\">\t\t\tdivclk_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\t\tdivclk_cnt = divclk_cnt + <span class=\"number\">1'b1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">always</span> @ ( <span class=\"keyword\">posedge</span> divclk )</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( !rst )</span><br><span class=\"line\">\t\t<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\t\tledtemp = <span class=\"number\">8'b0000_0001</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( ledtemp[<span class=\"number\">7</span>] == <span class=\"number\">1</span> )</span><br><span class=\"line\">\t\tledtemp = <span class=\"number\">8'b0000_0001</span>;\t\t<span class=\"comment\">// 瀹炵幇寰幆绉讳綅</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tledtemp = ledtemp &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<p>仿真代码：</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> sim3;</span><br><span class=\"line\"><span class=\"keyword\">reg</span> clk;</span><br><span class=\"line\"><span class=\"keyword\">reg</span> rst;</span><br><span class=\"line\"><span class=\"keyword\">wire</span> led;</span><br><span class=\"line\"></span><br><span class=\"line\">v1 uut( clk, rst, led );</span><br><span class=\"line\"><span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">    clk = <span class=\"number\">0</span>;</span><br><span class=\"line\">    rst = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">always</span> #<span class=\"number\">10</span> clk = ~clk; <span class=\"comment\">// 每隔10ns反转，周期是20ns，频率也就是50MHz</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<p>仿真图如下：</p>\n<img src=\"/blog/2020/07/14/Verilog基础2/image1\">\n\n<p>从<strong>ledtemp</strong>可以看出进行了左移的操作</p>\n<img src=\"/blog/2020/07/14/Verilog基础2/image2\">\n\n<p>完成一次循环之后回到<strong>00000001</strong></p>\n","categories":["FPGA"]},{"title":"Verilog基础1","url":"/blog/2020/07/14/Verilog%E5%9F%BA%E7%A1%801/","content":"<h2 id=\"Verilog基础\"><a href=\"#Verilog基础\" class=\"headerlink\" title=\"Verilog基础\"></a>Verilog基础</h2><p>学习verilog基础语法1</p>\n<a id=\"more\"></a>\n\n<h2 id=\"第二章-基本语法\"><a href=\"#第二章-基本语法\" class=\"headerlink\" title=\"第二章 基本语法\"></a>第二章 基本语法</h2><h4 id=\"数据类型及变量\"><a href=\"#数据类型及变量\" class=\"headerlink\" title=\"数据类型及变量\"></a>数据类型及变量</h4><p>查找表<strong>LUT</strong></p>\n<ol>\n<li>线网型变量wire<ol>\n<li>信号间连接作用，只能将其连接到某处而不能进行赋值</li>\n<li>没有时序限定，与其它块语句并行执行</li>\n<li>不保存状态，值随时可以改变，不受时钟信号限制</li>\n<li>input和output默认位wire</li>\n<li>wire是组合逻辑的赋值，在时序控制always<strong>块外</strong>并使用<strong>assign</strong>进行赋值</li>\n</ol>\n</li>\n<li>寄存器类型reg<ol>\n<li>值可以改变</li>\n<li>常用来表示时序控制always块内的指定信号</li>\n</ol>\n</li>\n<li>符号常量parameter</li>\n</ol>\n<h4 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h4><ol>\n<li><p>连续赋值语句<strong>assign</strong></p>\n<p>assign语句用于对wire型变量赋值，例如<code>assign c = a &amp; b</code>，a，b是wire型变量或寄存器变量，c必须是wire型变量或其他线网型变量。</p>\n</li>\n<li><p>过程赋值语句**<code>=</code>和<code>&lt;=</code>**</p>\n<ol>\n<li>用于对reg型变量赋值，在过程块中使用过程赋值语句</li>\n<li>非阻塞(<code>&lt;=</code>)：多条非阻塞赋值在过程块中同时完成赋值操作，多条语句相当于同时执行</li>\n<li>阻塞(<code>=</code>)：在一个块语句中，如果有多条阻塞赋值语句，在前面的赋值语句没有完成之前，后面的语句就不能执行<code>=</code></li>\n<li>对于阻塞，在当前时钟就赋值了，而非阻塞是在下一个时钟进行赋值</li>\n</ol>\n</li>\n<li><p>过程说明语句<strong>always</strong></p>\n<ol>\n<li>always块包含一个或一个以上的语句（如：过程赋值语句、条件语句和循环语句等），在运行的过程中，在时钟控制下被反复执行，也就是说，时钟有效边沿来了就执行</li>\n<li>在always块中被赋值的只能是寄存器reg型变量</li>\n<li>书写方法：<code>always @ (敏感信号表达式)</code></li>\n</ol>\n<figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">always</span> @ (clk) <span class=\"comment\">// 只要clk发生变化就触发</span></span><br><span class=\"line\"><span class=\"keyword\">always</span> @ (<span class=\"keyword\">posedge</span> clk) <span class=\"comment\">// clk上升沿触发</span></span><br><span class=\"line\"><span class=\"keyword\">always</span> @ (<span class=\"keyword\">negedge</span> clk) <span class=\"comment\">// clk下降沿触发</span></span><br><span class=\"line\"><span class=\"keyword\">always</span> @ (<span class=\"keyword\">negedge</span> clk1 <span class=\"keyword\">or</span> <span class=\"keyword\">posedge</span> clk2) <span class=\"comment\">// clk1下降沿或者clk2上升沿触发</span></span><br><span class=\"line\"><span class=\"keyword\">always</span> @ (*) <span class=\"comment\">// 任何输入信号变化了都触发</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结构说明语句initial</p>\n</li>\n</ol>\n<p>initial语句用于对寄存器变量赋予初值</p>\n<ol start=\"5\">\n<li><p>条件语句<strong>if-else</strong></p>\n</li>\n<li><p>条件语句<strong>case</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">case(表达式)\t&lt;case分支项&gt;\tendcase</span><br><span class=\"line\">case 分支项的一般格式：</span><br><span class=\"line\">分支表达式：语句；</span><br><span class=\"line\">默认项(default)  语句；</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>循环语句</p>\n<ol>\n<li><strong>forever</strong>语句：连续执行的语句</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式: forever begin 语句块 end</span><br><span class=\"line\">forever常用于仿真代码中</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>repeat</strong></li>\n<li><strong>while</strong></li>\n<li><strong>for</strong> 尽量少用，循环次数固定</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第三章-组合逻辑电路\"><a href=\"#第三章-组合逻辑电路\" class=\"headerlink\" title=\"第三章 组合逻辑电路\"></a>第三章 组合逻辑电路</h2><h4 id=\"多数表决器的实现\"><a href=\"#多数表决器的实现\" class=\"headerlink\" title=\"多数表决器的实现\"></a>多数表决器的实现</h4><ol>\n<li><p><strong>逻辑表达式</strong>：<code>f = a&amp;b|a&amp;c|b&amp;C</code></p>\n</li>\n<li><p><strong>RTL分析</strong>：在左侧的流程导航器<code>Flow Navigator</code>中的详细设计<code>Elaborated Design</code> 部分按右键，在弹出的菜单中选<code>New Elaborated Design</code>之后得到RTL电路图（RTL意思是寄存器传输级，生成寄存器传输级别的电路，并非综合后的电路），在开发过程中RTL分析不是必须的，但是能帮助我们检测错误。</p>\n</li>\n<li><p><strong>综合</strong>：将RTL级别的设计描述转换成逻辑门级的逻辑描述。单击流程导航窗口综合<code>Synthesis</code>项下的<code>Run Synthesis</code>进入综合，综合完毕后点击<code>Schematic</code>打开原理图。</p>\n</li>\n<li><p><strong>仿真</strong>：新建仿真文件，然后编辑内容，再点击<code>Run Simulation</code></p>\n</li>\n<li><p><strong>编程和调试</strong>：首先生成比特流，然后再进行硬件调试</p>\n</li>\n</ol>\n<h4 id=\"3-8译码器设计和IP核\"><a href=\"#3-8译码器设计和IP核\" class=\"headerlink\" title=\"3-8译码器设计和IP核\"></a><strong>3-8译码器设计和IP核</strong></h4><ol>\n<li>译码器设计步骤与多数表决器相同，也是组合逻辑电路</li>\n<li><strong>IP核</strong>：点击顶部的<strong>Tools</strong>，然后点击<strong>Create and Package IP</strong>项，之后一直<strong>Next</strong>，进入以下页面：</li>\n</ol>\n<img src=\"/blog/2020/07/14/Verilog基础1/image1\" style=\"zoom:80%;\">\n\n<p>没什么问题后点击<strong>Review and Package</strong>中的<strong>Package IP</strong></p>\n<h4 id=\"调用IP核实现多数表决器\"><a href=\"#调用IP核实现多数表决器\" class=\"headerlink\" title=\"调用IP核实现多数表决器\"></a>调用IP核实现多数表决器</h4><h2 id=\"第四章-时序逻辑电路\"><a href=\"#第四章-时序逻辑电路\" class=\"headerlink\" title=\"第四章 时序逻辑电路\"></a>第四章 时序逻辑电路</h2><p>时钟同步状态机：时序电路的状态变化发生的时间有一个统一的时钟信号的指定边沿来激励。</p>\n<h4 id=\"实现11001序列发生器\"><a href=\"#实现11001序列发生器\" class=\"headerlink\" title=\"实现11001序列发生器\"></a>实现11001序列发生器</h4><ol>\n<li>画出状态转移图</li>\n</ol>\n<img src=\"/blog/2020/07/14/Verilog基础1/image2\">\n\n<ol start=\"2\">\n<li>画出状态转移表</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Q0 Q1 Q2</th>\n<th align=\"center\">Q0* Q1* Q2*</th>\n<th align=\"center\">Z</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">000</td>\n<td align=\"center\">001</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">001</td>\n<td align=\"center\">010</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">010</td>\n<td align=\"center\">011</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">011</td>\n<td align=\"center\">100</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">100</td>\n<td align=\"center\">000</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>根据状态转移表画卡诺图求解。（未使用的状态用无关项表示）</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Q2/Q0Q1</th>\n<th align=\"center\">00</th>\n<th align=\"center\">01</th>\n<th align=\"center\">11</th>\n<th align=\"center\">10</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0</td>\n<td align=\"center\">001/1</td>\n<td align=\"center\">011/0</td>\n<td align=\"center\">ddd/d</td>\n<td align=\"center\">000/1</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">010/1</td>\n<td align=\"center\">100/0</td>\n<td align=\"center\">ddd/d</td>\n<td align=\"center\">ddd/d</td>\n</tr>\n</tbody></table>\n<ol start=\"4\">\n<li><p>得到转移方程和输出方程</p>\n<ol>\n<li><p>转移方程：<br>$$<br>Q0* = Q1Q2\\<br>Q1* = Q1’Q2 + Q1Q2’\\<br>Q2* = Q0’Q2’<br>$$</p>\n</li>\n<li><p>输出方程</p>\n</li>\n</ol>\n<p>$$<br>Z = Q1’<br>$$</p>\n</li>\n<li><p>判断自启动，FPGA设计可以给出初始态，所以可以忽略</p>\n</li>\n<li><p>使用D触发器，写出激励方程<br>$$<br>D0 = Q0* = Q1Q2\\<br>D1 = Q1* = Q1’Q2 + Q1Q2’\\<br>D2 = Q2* = Q0’Q2’<br>$$</p>\n</li>\n<li><p>建立工程编写程序</p>\n</li>\n</ol>\n<figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> seq_11001_1(</span><br><span class=\"line\">\t<span class=\"keyword\">input</span>  clk,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> led</span><br><span class=\"line\">    );</span><br><span class=\"line\"><span class=\"keyword\">reg</span> [<span class=\"number\">5</span>:<span class=\"number\">0</span>] divclk_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">reg</span> divclk = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">reg</span> q0 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">reg</span> q1 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">reg</span> q2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">always</span> @ ( <span class=\"keyword\">posedge</span> clk )</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(divclk_cnt == <span class=\"number\">25</span>) <span class=\"comment\">// 50分频 25低25高 默认32位宽</span></span><br><span class=\"line\">\t<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\tdivclk = ~divclk;</span><br><span class=\"line\">\t\tdivclk_cnt = <span class=\"number\">0</span>;\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\tdivclk_cnt = divclk_cnt + <span class=\"number\">1'b1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assign</span> led = ~q1;</span><br><span class=\"line\"><span class=\"keyword\">always</span> @ (<span class=\"keyword\">posedge</span> divclk)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\tq0 &lt;= q1&amp;q2;</span><br><span class=\"line\">\tq1 &lt;= ~q1&amp;q2|q1&amp;~q2;</span><br><span class=\"line\">\tq2 &lt;= ~q0&amp;~q2;</span><br><span class=\"line\"><span class=\"keyword\">end</span>\t</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<p>仿真文件：</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> sim1;</span><br><span class=\"line\"><span class=\"keyword\">reg</span> clk;</span><br><span class=\"line\"><span class=\"keyword\">wire</span> led;</span><br><span class=\"line\">seq_11001_1 uut( clk, led );</span><br><span class=\"line\"><span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">    clk = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">always</span> #<span class=\"number\">10</span> clk = ~clk;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>仿真</li>\n</ol>\n<img src=\"/blog/2020/07/14/Verilog基础1/image3\">\n\n<p>从图可知，和状态转移表一致</p>\n<h4 id=\"状态图直接描述法实现序列发生器\"><a href=\"#状态图直接描述法实现序列发生器\" class=\"headerlink\" title=\"状态图直接描述法实现序列发生器\"></a>状态图直接描述法实现序列发生器</h4><p>根据上部分<strong>1</strong>中的状态转移图可以直接实现<strong>11001</strong>序列发生器，实现代码如下：</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> seq_11001_2(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> led</span><br><span class=\"line\">    );</span><br><span class=\"line\"><span class=\"keyword\">reg</span> led;</span><br><span class=\"line\"><span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] divclk_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">reg</span> divclk = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">reg</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] state = state_A;</span><br><span class=\"line\"><span class=\"keyword\">parameter</span> <span class=\"comment\">// 符号常量</span></span><br><span class=\"line\">state_A = <span class=\"number\">3'b000</span>,state_B = <span class=\"number\">3'b001</span>,state_C = <span class=\"number\">3'b010</span>,state_D = <span class=\"number\">3'b011</span>,state_E = <span class=\"number\">3'b100</span>;</span><br><span class=\"line\"><span class=\"keyword\">always</span> @ ( <span class=\"keyword\">posedge</span> clk )</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(divclk_cnt == <span class=\"number\">25</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\tdivclk = ~divclk;</span><br><span class=\"line\">\t\tdivclk_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\tdivclk_cnt = divclk_cnt + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">always</span> @ ( <span class=\"keyword\">posedge</span> divclk )</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span>( state )</span><br><span class=\"line\">\t\tstate_A:<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\t\tstate &lt;= state_B;</span><br><span class=\"line\">\t\t\tled &lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t\tstate_B:<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\t\tstate &lt;= state_C;</span><br><span class=\"line\">\t\t\tled &lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t\tstate_C:<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\t\tstate &lt;= state_D;</span><br><span class=\"line\">\t\t\tled &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t\tstate_D:<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\t\tstate &lt;= state_E;</span><br><span class=\"line\">\t\t\tled &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t\tstate_E:<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\t\tstate &lt;= state_A;</span><br><span class=\"line\">\t\t\tled &lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"comment\">// 表示当前状态不属于以上状态，让状态回到state_A</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\t\tstate &lt;= state_A;</span><br><span class=\"line\">\t\t\tled &lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">endcase</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<p>仿真图如下：</p>\n<img src=\"/blog/2020/07/14/Verilog基础1/image4\">\n\n<p>当<code>state = 000</code>时，在<code>divclk</code>的下一个上升沿时<code>led = 1</code>，以此类推</p>\n","categories":["FPGA"]},{"title":"LeetCode97-交错字符串","url":"/blog/2020/07/18/LeetCode97-%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2/","content":"<p>在看了题解之后才慢慢意识到，这道题和<a href=\"https://leetcode-cn.com/problems/unique-paths-ii/\" target=\"_blank\" rel=\"noopener\"><strong>63-不同路径Ⅱ</strong></a>，<a href=\"https://leetcode-cn.com/problems/dungeon-game/\" target=\"_blank\" rel=\"noopener\"><strong>174-地下城游戏</strong></a>是非常相似的，题目虽然具有一定难度，但都是有迹可循。它们都可以抽象为在二维数组中，从起始到末尾找路径的问题。上面两个问题还未更新，跳转位置是题目链接。</p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定三个字符串 <em>s1</em>, <em>s2</em>, <em>s3</em>, 验证 <em>s3</em> 是否是由 <em>s1</em> 和 <em>s2</em> 交错组成的。</p>\n<a id=\"more\"></a>\n\n<img src=\"/blog/2020/07/18/LeetCode97-交错字符串/question1\">\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>交错的意思是：如果第一次取了<code>s1</code>，那么第二次必须取<code>s2</code>，反之亦然。取多少和哪一个先取都是不一定的，只是要求交错即可。</p>\n<p>对于<code>s1 = &quot;bacc&quot;, s2 = &quot;aabcce&quot;, s3 = &quot;abaacbccec&quot;</code>，这个示例是可以匹配的，按照<strong>可以匹配</strong>的过程分析如下：</p>\n<ol>\n<li>首先只能取<code>s2</code>中的<code>a</code>，再继续往下取<code>a</code>时，与<code>s3</code>已经无法匹配了；</li>\n<li><strong>再取<code>s1</code>中的<code>b</code>或者<code>ba</code>都是可以的</strong>，这里取<code>b</code></li>\n<li>再取<code>s2</code>中的<code>a</code>，此时匹配到<code>aba</code></li>\n<li>再取<code>s1</code>中的<code>ac</code>，此时匹配到<code>abaac</code></li>\n<li>再取<code>s2</code>中的<code>bcce</code>，此时匹配到<code>abaacbbe</code></li>\n<li>再取<code>s1</code>中的<code>c</code>，此时完全匹配</li>\n</ol>\n<h4 id=\"定义dp数组\"><a href=\"#定义dp数组\" class=\"headerlink\" title=\"定义dp数组\"></a>定义dp数组</h4><p><code>dp[i][j]</code>表示<code>s1</code>的前<code>i</code>个字符和<code>s2</code>的前<code>j</code>个字符是否匹配，我们可以将刚才的分析表示为下图：</p>\n<img src=\"/blog/2020/07/18/LeetCode97-交错字符串/question1_dp\" style=\"zoom:80%;\">\n\n<p>上图是不是很像一个路径问题，而且只能向右或者向下移动，进一步说明是用动态规划来解决，如果还可以往上或者左，那就不能用动态规划来做了，得考虑<code>dfs</code>之类的算法。</p>\n<p>分析中的第二步，也就是图中<code>true</code>的其他可能。</p>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 都为空时匹配</span></span><br><span class=\"line\">dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 对于第一行和第一列，当前值若无法匹配，则当前值和之后的都无法匹配</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>) dp[<span class=\"number\">0</span>][j] = s2[<span class=\"number\">0</span>,j) == s3[<span class=\"number\">0</span>,j)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(j == <span class=\"number\">0</span>) dp[i][<span class=\"number\">0</span>] = s2[<span class=\"number\">0</span>,i) == s3[<span class=\"number\">0</span>,i)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"状态转移方程\"><a href=\"#状态转移方程\" class=\"headerlink\" title=\"状态转移方程\"></a>状态转移方程</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">dp[i][j] = (dp[i - <span class=\"number\">1</span>][j] &amp;&amp; s1[i - <span class=\"number\">1</span>] == s3[i + j - <span class=\"number\">1</span>])</span><br><span class=\"line\">\t|| (dp[i][j - <span class=\"number\">1</span>] &amp;&amp; s2[j - <span class=\"number\">1</span>] == s3[i + j - <span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isInterleave</span><span class=\"params\">(<span class=\"built_in\">string</span> s1, <span class=\"built_in\">string</span> s2, <span class=\"built_in\">string</span> s3)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = s1.size(), n = s2.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m + n != s3.size()) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// bool dp[m + 1][n + 1] = &#123;false&#125;;</span></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> **dp = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>*[m + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; ++i)&#123;</span><br><span class=\"line\">            dp[i] = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= n; ++j)&#123;</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n &amp;&amp; (s2.substr(<span class=\"number\">0</span>, j) == s3.substr(<span class=\"number\">0</span>, j)); ++j) </span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m &amp;&amp; (s1.substr(<span class=\"number\">0</span>, i) == s3.substr(<span class=\"number\">0</span>, i)); ++i) </span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)&#123;</span><br><span class=\"line\">                dp[i][j] = (dp[i - <span class=\"number\">1</span>][j] &amp;&amp; (s1[i - <span class=\"number\">1</span>] == s3[i + j - <span class=\"number\">1</span>])) ||</span><br><span class=\"line\">                            (dp[i][j - <span class=\"number\">1</span>] &amp;&amp; (s2[j - <span class=\"number\">1</span>] == s3[i + j - <span class=\"number\">1</span>]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m][n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><a href=\"https://leetcode-cn.com/problems/interleaving-string/solution/lei-si-lu-jing-wen-ti-zhao-zhun-zhuang-tai-fang-ch/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/interleaving-string/solution/lei-si-lu-jing-wen-ti-zhao-zhun-zhuang-tai-fang-ch/</a></p>\n","categories":["LeetCode"],"tags":["动态规划"]},{"title":"一个测试文档","url":"/blog/2019/09/06/%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/","content":"<p>目前没有特别需要写的东西，就收藏几个网站，便于之后写文章时查阅语法</p>\n<a id=\"more\"></a>\n\n<p>参考网站：</p>\n<p>[1]<a href=\"https://www.jianshu.com/p/56d99a3049a5\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/56d99a3049a5</a></p>\n<p>[2]<a href=\"https://blog.csdn.net/u014061630/article/details/81359144\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u014061630/article/details/81359144</a></p>\n<p>记录一下: <a href=\"https://www.xingyuzhao.ltd/\">我的博客</a></p>\n<p><strong>使用该<code>&lt;!-- more --&gt;</code>标志来控制文章的摘要预览，因为这种方式可以让摘要也按照css文件中的样式来渲染。如果使用了自动摘要的功能，你会发现文章摘要是一大团没有样式的文本，很是难看。</strong></p>\n","categories":["Hexo"],"tags":["Markdown语法"]},{"title":"git提交失败-ssh重置","url":"/blog/2020/06/25/git%E6%8F%90%E4%BA%A4%E5%A4%B1%E8%B4%A5-ssh%E9%87%8D%E7%BD%AE/","content":"<p>一段时间不提交，就容易出现“Please make sure you have the correct access rights and the repository exists.”，原因是ssh key出现了问题，记录一下解决方法，省的每次都去百度细节。</p>\n<p><strong>用手机热点可以提交成功，尚不清楚原因(updated：2020/7/15)</strong> </p>\n<a id=\"more\"></a>\n\n<ol>\n<li><p>重新配置身份信息</p>\n<ul>\n<li><code>git config --global user.name &quot;yourname&quot;</code></li>\n<li><code>git config --global user.email &quot;your@email.com&quot;</code></li>\n</ul>\n</li>\n<li><p>删除.ssh文件夹下的所有文件</p>\n</li>\n<li><p>输入命令<code>ssh-keygen -t rsa -C &quot;your@email.com&quot;</code>，出现提示直接回车</p>\n</li>\n<li><p>此时在.ssh文件夹下生成<strong>id_rsa</strong>和<strong>id_rsa.pub</strong>，用记事本打开<strong>id_rsa.pub</strong>并复制所有内容</p>\n</li>\n<li><p>打开github主页并进入到<code>SSH and GPG keys</code>中，新建shh，把刚才复制的内容粘贴进去</p>\n</li>\n<li><p>输入命令<code>ssh -T git@github.com</code>，出现提示输入<code>yes</code>，不是直接回车</p>\n</li>\n<li><p><strong>重新打开</strong>git进行提交</p>\n</li>\n</ol>\n<p>以上所有git操作都在hexo根目录下</p>\n","categories":["Hexo"]},{"title":"string操作总结(不定期更新)","url":"/blog/2020/06/25/string%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/","content":"<p>总结一下C++中string的常见用法，包括但不局限于：</p>\n<ol>\n<li>初始化</li>\n<li>string对象上的操作（包括取子串）</li>\n<li>查找/删除/替换</li>\n<li>与数值的相互转换</li>\n</ol>\n<a id=\"more\"></a>\n\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认初始化，s1为空</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s1;</span><br><span class=\"line\"><span class=\"comment\">//用s1初始化s2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s2</span><span class=\"params\">(s1)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//s3为字面值\"value\"的副本，直接初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s3</span><span class=\"params\">(<span class=\"string\">\"value\"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//与上述等价，不同之处在于这里是拷贝初始化</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s3 = <span class=\"string\">\"value\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//类似vector，n个'c'组成字符串s4</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s4</span><span class=\"params\">(n, <span class=\"string\">'c'</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"string对象上的操作\"><a href=\"#string对象上的操作\" class=\"headerlink\" title=\"string对象上的操作\"></a>string对象上的操作</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从is读取一行给s，返回is</span></span><br><span class=\"line\">getline(is, s)</span><br><span class=\"line\"><span class=\"comment\">//判断是否为空</span></span><br><span class=\"line\">s.empty()</span><br><span class=\"line\"><span class=\"comment\">//s的长度</span></span><br><span class=\"line\">s.size() / s.length()</span><br><span class=\"line\"><span class=\"comment\">//完全一样则相等，大小写敏感</span></span><br><span class=\"line\">s1 == s2</span><br><span class=\"line\"><span class=\"comment\">//字典序比较，大小写敏感</span></span><br><span class=\"line\">&lt;, &lt;=, &gt;, &gt;=</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"两个string对象相加\"><a href=\"#两个string对象相加\" class=\"headerlink\" title=\"两个string对象相加\"></a>两个string对象相加</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s1 = <span class=\"string\">\"hello, \"</span>, s2 = <span class=\"string\">\"world\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//s3 = \"hello, world\"</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s3 = s1 + s2;</span><br><span class=\"line\"><span class=\"comment\">//s1 = \"hello, world\"</span></span><br><span class=\"line\">s1 += s2;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字面值和string对象相加\"><a href=\"#字面值和string对象相加\" class=\"headerlink\" title=\"字面值和string对象相加\"></a>字面值和string对象相加</h4><p>当把string对象和字符字面值及字符串字面值混在一起相加时，必须确保<code>+</code>的两侧运算对象至少有一个string：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s4 = s1 + <span class=\"string\">\",\"</span>; \t\t<span class=\"comment\">//√</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s5 = <span class=\"string\">\"hello\"</span> + <span class=\"string\">\",\"</span>\t<span class=\"comment\">//×</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：字符串字面值与string是不同类型，以上操作是自动进行了类型转换。</p>\n<h4 id=\"处理string对象中的字符\"><a href=\"#处理string对象中的字符\" class=\"headerlink\" title=\"处理string对象中的字符\"></a>处理string对象中的字符</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义在头文件cctype中</span></span><br><span class=\"line\"><span class=\"built_in\">isalnum</span>(c)\t\t<span class=\"comment\">//当c是字母或数字为真</span></span><br><span class=\"line\"><span class=\"built_in\">isalpha</span>(c)\t\t<span class=\"comment\">//当c是字母为真</span></span><br><span class=\"line\"><span class=\"built_in\">iscntrl</span>(c)\t\t<span class=\"comment\">//当c是控制字符为真，ASCII码前32</span></span><br><span class=\"line\"><span class=\"built_in\">isdigit</span>(c)\t\t<span class=\"comment\">//当c是数字为真</span></span><br><span class=\"line\"><span class=\"built_in\">islower</span>(c)\t\t<span class=\"comment\">//当c是小写字母为真</span></span><br><span class=\"line\"><span class=\"built_in\">isupper</span>(c)\t\t<span class=\"comment\">//当c是大写字母为真</span></span><br><span class=\"line\"><span class=\"built_in\">ispunct</span>(c)\t\t<span class=\"comment\">//当c是标点符号为真</span></span><br><span class=\"line\"><span class=\"built_in\">isspace</span>(c)\t\t<span class=\"comment\">//当c是空白为真(空格，回车，制表符等)</span></span><br><span class=\"line\"><span class=\"built_in\">tolower</span>(c)\t\t<span class=\"comment\">//如果c为大写字母，转为小写，否则不变</span></span><br><span class=\"line\"><span class=\"built_in\">toupper</span>(c)\t\t<span class=\"comment\">//如果c为小写字母，转为大写，否则不变</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>范围for语句</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//打印s1的所有内容</span></span><br><span class=\"line\"><span class=\"comment\">//仅访问时可加上const</span></span><br><span class=\"line\"><span class=\"comment\">//简化类型名可用auto代替</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s1 = <span class=\"string\">\"zhaoxingyu\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">string</span> s : s1)</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; s;</span><br><span class=\"line\"><span class=\"comment\">//同时修改s1内容全为a</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">string</span> &amp;s : s1)</span><br><span class=\"line\">    s = <span class=\"string\">'a'</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"取子串\"><a href=\"#取子串\" class=\"headerlink\" title=\"取子串\"></a>取子串</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//s.substr(pos, n)</span></span><br><span class=\"line\"><span class=\"comment\">//取s中从pos开始长度为n的子串</span></span><br><span class=\"line\"><span class=\"comment\">//如果pos超过s.size()则抛出out_of_range异常</span></span><br><span class=\"line\"><span class=\"comment\">//如果pos+n超过s.size()则substr自动调整n值，只拷贝到s末尾</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> str = s.substr(<span class=\"number\">0</span>, <span class=\"number\">5</span>);\t<span class=\"comment\">//str = \"hello\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查找-删除-替换\"><a href=\"#查找-删除-替换\" class=\"headerlink\" title=\"查找/删除/替换\"></a>查找/删除/替换</h3><h4 id=\"查找函数find\"><a href=\"#查找函数find\" class=\"headerlink\" title=\"查找函数find\"></a>查找函数find</h4><p>string中的find函数返回子串/字符第一次出现在母串中的位置，类型为size_t，可以把它视为一个范围很大的int类型。如果没有找到，返回一个npos标记，是一个很大的整数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//size_t pos = s.find(str, startPos)</span></span><br><span class=\"line\"><span class=\"comment\">//str为子串或字符，startPos为开始搜索位置，缺省时默认为0</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"string\">\"world\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">size_t</span> pos = s.find(str);\t<span class=\"comment\">//等价于pos = s.find(\"world\")，返回6</span></span><br><span class=\"line\"><span class=\"keyword\">size_t</span> pos1 = s.find(<span class=\"string\">\"c\"</span>);\t<span class=\"comment\">//等价于pos1 = s.find('c')，返回npos</span></span><br></pre></td></tr></table></figure>\n\n<p>还可以从后往前反向查找，函数为rfind</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">size_t</span> pos = s.rfind(<span class=\"string\">\"l\"</span>); \t<span class=\"comment\">//返回9</span></span><br></pre></td></tr></table></figure>\n\n<p>其他一些find函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回子串首次出现位置</span></span><br><span class=\"line\">pos = s.find_first_of(str);</span><br><span class=\"line\"><span class=\"comment\">//返回字串最后出现位置</span></span><br><span class=\"line\">pos = s.find_last_of(str);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除函数erase\"><a href=\"#删除函数erase\" class=\"headerlink\" title=\"删除函数erase\"></a>删除函数erase</h4><p>string中提供的成员函数可以用来删除字符串中的字符，这里主要介绍<code>erase</code>方法</p>\n<ol>\n<li>从给定位置pos开始删除长度为n的字符串</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//basic_string &amp; erase(size_type pos=0, size_type n=npos)</span></span><br><span class=\"line\"><span class=\"comment\">//n缺省时默认为删除到末尾</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">s.erase(<span class=\"number\">5</span>);\t\t\t<span class=\"comment\">//从位置5开始全部删除，s = \"hello\";</span></span><br><span class=\"line\">s.erase(<span class=\"number\">0</span>, <span class=\"number\">2</span>); \t\t<span class=\"comment\">//从0开始删除长度为2的字符串，s = \"llo\"</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>删除迭代器位置处的单个字符，并返回<strong>下个元素</strong>的迭代器</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//iterator erase(const_iterator position)</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">s.erase(s.begin());\t<span class=\"comment\">//s = \"ello world\";</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>删除迭代器<code>[first, last)</code>区间的所有字符,返回一个指向被删除的最后一个元素的下一个字符的迭代器.</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//iterator erase(const_iterator first, const_iterator last)</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//iter = s.erase(s.begin() + 1, s.end() - 1); \t //可以直接删除</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> iter = s.erase(s.begin() + <span class=\"number\">1</span>, s.end() - <span class=\"number\">1</span>); <span class=\"comment\">//删除并返回迭代器</span></span><br><span class=\"line\"><span class=\"comment\">//s = \"hd\"，*iter = d</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注：也可以用pop_back()删除最后一个元素</strong></p>\n<h4 id=\"替换函数replace\"><a href=\"#替换函数replace\" class=\"headerlink\" title=\"替换函数replace\"></a>替换函数replace</h4><ol>\n<li>用str替换指定字符串从pos开始长度为len的字符串</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//string&amp; replace(size_t pos, size_t len, const string&amp; str)</span></span><br><span class=\"line\"><span class=\"comment\">//注意这里的str必须是string对象，不能是char字符</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"string\">\"#\"</span>;</span><br><span class=\"line\">s = s.replace(<span class=\"number\">0</span>, <span class=\"number\">5</span>, str);\t<span class=\"comment\">//s = \"# world\"</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>用str替换迭代器起始位置到终止位置的字符串</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//string&amp; replace(const_iterator it1, const_iterator it2, const string&amp; str)</span></span><br><span class=\"line\"><span class=\"comment\">//注意这里的str必须是string对象，不能是char字符</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> str = <span class=\"string\">\"#\"</span>;</span><br><span class=\"line\">s = s.replace(s.begin(), s.begin() + <span class=\"number\">5</span>, str);\t<span class=\"comment\">//s = \"# world\"</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>用重复n次的c字符替换从指定位置pos长度为len的字符串</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//string&amp; replace(size_t pos, size_t len, size_t n, char c)</span></span><br><span class=\"line\"><span class=\"comment\">//注意这里的c必须是char类型，不能是string对象</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> c = <span class=\"string\">'#'</span>;</span><br><span class=\"line\">s = s.replace(<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, c);\t<span class=\"comment\">//s = \"## world\"</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>用重复n次的c字符替换从指定迭代器位置到终止位置的字符串</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//string&amp; replace (const_iterator i1, const_iterator i2, size_t n, char c)</span></span><br><span class=\"line\"><span class=\"comment\">//注意这里的c必须是char类型，不能是string对象</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> c = <span class=\"string\">'#'</span>;</span><br><span class=\"line\">s = s.replace(s.begin(), s.end(), <span class=\"number\">2</span>, c);\t<span class=\"comment\">//s = \"## world\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"string与int相互转换\"><a href=\"#string与int相互转换\" class=\"headerlink\" title=\"string与int相互转换\"></a>string与int相互转换</h3><h4 id=\"string转int\"><a href=\"#string转int\" class=\"headerlink\" title=\"string转int\"></a>string转int</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># string直接转int</span></span><br><span class=\"line\"><span class=\"comment\">//stoi(s, pos, b) 把字符串s从pos开始转换成b进制的int</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//a = 123，如果里面含有非数字，那么从pos开始连续的字符串型数字才会被转为数字</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = stoi(s, <span class=\"number\">0</span>, <span class=\"number\">10</span>);\t</span><br><span class=\"line\"><span class=\"comment\">//stol(s,p,b)\t把字符串s从p开始转换成b进制的long</span></span><br><span class=\"line\"><span class=\"comment\">//stoul(s,p,b)\t把字符串s从p开始转换成b进制的unsigned long</span></span><br><span class=\"line\"><span class=\"comment\">//stoll(s,p,b)\t把字符串s从p开始转换成b进制的long long</span></span><br><span class=\"line\"><span class=\"comment\">//stoull(s,p,b)\t把字符串s从p开始转换成b进制的unsigned long long</span></span><br><span class=\"line\"><span class=\"comment\">//stof(s,p)\t\t把字符串s从p开始转换成float</span></span><br><span class=\"line\"><span class=\"comment\">//stod(s,p)\t\t把字符串s从p开始转换成double</span></span><br><span class=\"line\"><span class=\"comment\">//stold(s,p)\t把字符串s从p开始转换成long double</span></span><br><span class=\"line\"><span class=\"meta\"># char型数组字符串转int</span></span><br><span class=\"line\"><span class=\"comment\">//c_str()函数返回一个指向正规C字符串的指针, 内容与string串相同</span></span><br><span class=\"line\"><span class=\"comment\">//string类对象的成员函数c_str()把string转换为c类型字符串</span></span><br><span class=\"line\"><span class=\"comment\">//如果string不是数字形式的则转换结果为0</span></span><br><span class=\"line\"><span class=\"comment\">//实际步骤为string-&gt;char*-&gt;int</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = atoi(s.c_str());\t<span class=\"comment\">//a = 123</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"int转string\"><a href=\"#int转string\" class=\"headerlink\" title=\"int转string\"></a>int转string</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//to_string(val) 将val转为string</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> val = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s = to_string(val);\t<span class=\"comment\">//s = \"100\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>查找/删除/替换：</p>\n<ol>\n<li><p><a href=\"https://www.cnblogs.com/xzxl/p/7243490.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xzxl/p/7243490.html</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/cai_niaocainiao/article/details/81260902?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/cai_niaocainiao/article/details/81260902?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/u010472607/article/details/80431604\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010472607/article/details/80431604</a></p>\n</li>\n</ol>\n<p>字符串转数值</p>\n<p><a href=\"https://blog.csdn.net/sinat_40872274/article/details/81367815\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sinat_40872274/article/details/81367815</a></p>\n","categories":["C++"],"tags":["string"]},{"title":"二叉树的三种遍历方法（迭代）","url":"/blog/2020/10/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95%EF%BC%88%E8%BF%AD%E4%BB%A3%EF%BC%89/","content":"<p><strong>概要</strong></p>\n<ol>\n<li>二叉树的前序遍历</li>\n<li>二叉树的中序遍历</li>\n<li>二叉树的后序遍历</li>\n</ol>\n<a id=\"more\"></a>\n\n<p>递归进行二叉树的遍历比较简单，学习使用迭代法进行二叉树的遍历，主要是使用栈这种数据结构。</p>\n<h4 id=\"二叉树的前序遍历\"><a href=\"#二叉树的前序遍历\" class=\"headerlink\" title=\"二叉树的前序遍历\"></a>二叉树的前序遍历</h4><p>前序遍历的顺序为：中—左—右</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; preOrder;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;TreeNode*&gt; st;</span><br><span class=\"line\">    st.push(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!st.empty())&#123;</span><br><span class=\"line\">        TreeNode *node = st.top();</span><br><span class=\"line\">        st.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node)&#123;</span><br><span class=\"line\">            preOrder.push_back(node-&gt;val);</span><br><span class=\"line\">            <span class=\"comment\">// 这里需要注意，前序遍历第二次遍历的是左节点</span></span><br><span class=\"line\">            <span class=\"comment\">// 所以先将右节点入栈，再将左节点入栈，保证左节点先出栈</span></span><br><span class=\"line\">            st.push(node-&gt;right);</span><br><span class=\"line\">            st.push(node-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preOrder;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二叉树的中序遍历\"><a href=\"#二叉树的中序遍历\" class=\"headerlink\" title=\"二叉树的中序遍历\"></a>二叉树的中序遍历</h4><p>中序遍历的顺序为：左—中—右</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;TreeNode*&gt; st;</span><br><span class=\"line\">    TreeNode *node = root;</span><br><span class=\"line\">    <span class=\"comment\">// 先判断根节点不为空，进入迭代，后面再根据栈是否为空进行迭代</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!st.empty() || node)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前节点存在，查看其左节点情况，如果其左节点不存在，那就弹出当前节点</span></span><br><span class=\"line\">        <span class=\"comment\">// 再查看其右节点情况，如果右节点也不存在，就弹出当前栈顶（也就是上一个左节点）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node)&#123;</span><br><span class=\"line\">            st.push(node);</span><br><span class=\"line\">            node = node-&gt;left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            node = st.top();</span><br><span class=\"line\">            st.pop();</span><br><span class=\"line\">            res.push_back(node-&gt;val);</span><br><span class=\"line\">            node = node-&gt;right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二叉树的后序遍历\"><a href=\"#二叉树的后序遍历\" class=\"headerlink\" title=\"二叉树的后序遍历\"></a>二叉树的后序遍历</h4><p>后序遍历的顺序为：左—右—中</p>\n<h5 id=\"根据二叉树结构遍历\"><a href=\"#根据二叉树结构遍历\" class=\"headerlink\" title=\"根据二叉树结构遍历\"></a>根据二叉树结构遍历</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">postorderTraversal</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;TreeNode *&gt; st;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res;</span><br><span class=\"line\">    TreeNode *cur = root;</span><br><span class=\"line\">    TreeNode *pre;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur || !st.empty())&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 首先当前节点的左子树入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur != <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">            st.push(cur);</span><br><span class=\"line\">            cur = cur-&gt;left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取出最后一个左节点</span></span><br><span class=\"line\">        cur = st.top();</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前节点的右节点为空或者已经遍历过了，那么就记录当前节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!cur-&gt;right || cur-&gt;right == pre)&#123;</span><br><span class=\"line\">            res.push_back(cur-&gt;val);</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            <span class=\"comment\">// 如果记录了当前节点，那么当前节点必须置为空，否则会陷入第一个while中死循环</span></span><br><span class=\"line\">            cur = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            st.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 否则查看当前节点的右节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cur = cur-&gt;right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>动画演示：<a href=\"https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/di-gui-die-dai-qu-qiao-san-chong-fang-fa-quan-jie-/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/di-gui-die-dai-qu-qiao-san-chong-fang-fa-quan-jie-/</a></p>\n<h5 id=\"破坏结构遍历\"><a href=\"#破坏结构遍历\" class=\"headerlink\" title=\"破坏结构遍历\"></a>破坏结构遍历</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">postorderTraversal</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;TreeNode*&gt; st;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res;</span><br><span class=\"line\">    st.push(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!st.empty())&#123;</span><br><span class=\"line\">        TreeNode *node = st.top();</span><br><span class=\"line\">        st.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node)&#123;</span><br><span class=\"line\">            res.push_back(node-&gt;val);</span><br><span class=\"line\">            st.push(node-&gt;left);</span><br><span class=\"line\">            st.push(node-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 得到的结果是中—右—左，需要反转一下得到左—右—中</span></span><br><span class=\"line\">    reverse(res.begin(), res.end());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["算法与数据结构"],"tags":["二叉树"]},{"title":"使用hexo遇到的问题及解决方案","url":"/blog/2019/09/05/%E4%BD%BF%E7%94%A8hexo%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","content":"<p>使用hexo遇到的问题及解决</p>\n<a id=\"more\"></a>\n\n<h4 id=\"上传步骤\"><a href=\"#上传步骤\" class=\"headerlink\" title=\"上传步骤\"></a>上传步骤</h4><ol>\n<li>hexo generate</li>\n<li>hexo server (<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a>)</li>\n<li>hexo deploy</li>\n</ol>\n<h4 id=\"公式的显示问题\"><a href=\"#公式的显示问题\" class=\"headerlink\" title=\"公式的显示问题\"></a>公式的显示问题</h4><p>公式内换行使用<code>//</code>时，会被识别成转义字符，需要再加上<code>//</code>，故需要使用<code>////</code>。</p>\n<p>如果使用<strong>kramed</strong>对公式进行渲染，会导致序号的显示出现问题，所以又改了回来，继续使用<strong>marked</strong>。</p>\n","categories":["Hexo"]},{"title":"内存管理（一）","url":"/blog/2020/12/12/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>内存的基础知识</li>\n<li>内存管理的概念</li>\n<li>覆盖与交换</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"内存的基本知识\"><a href=\"#内存的基本知识\" class=\"headerlink\" title=\"内存的基本知识\"></a>内存的基本知识</h4><h5 id=\"什么是内存？有何作用？\"><a href=\"#什么是内存？有何作用？\" class=\"headerlink\" title=\"什么是内存？有何作用？\"></a>什么是内存？有何作用？</h5><p><strong>内存</strong>是用于存放数据的硬件。程序执行前<strong>需要先放到内存中才能被CPU处理。</strong></p>\n<p>在多道程序环境下，系统中会有多个程序并发执行，会有多个程序的数据需要同时放到内存中。如何区分各个程序的数据在什么地方？——给内存的存储单元编地址。</p>\n<p><strong>内存地址</strong>从0开始，每个地址对应一个存储单元。如果计算机按<strong>字节</strong>编址，则每个存储单元大小为1字节；如果<strong>字长为16位</strong>的计算机按<strong>字</strong>编址，则每个存储单元大小位1个字，也就是16个二进制位。</p>\n<p>常用的几个数量单位：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">2^10 = 1K</span><br><span class=\"line\">2^20 = 1M</span><br><span class=\"line\">2^30 = 1G</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"逻辑地址与物理地址\"><a href=\"#逻辑地址与物理地址\" class=\"headerlink\" title=\"逻辑地址与物理地址\"></a>逻辑地址与物理地址</h5><p>编译时产生的指令只关心<strong>相对地址</strong>，实际放入内存中再想办法根据起始位置得到<strong>绝对地址</strong>。</p>\n<p>eg：编译时只需确定变量x的相对地址是100（也就是说相对于进程在内存中的起始地址而言的地址）。CPU想要找到x在内存中的实际存放位置，只需要用进程<em>起始地址+100</em>即可。</p>\n<p><strong>相对地址</strong>又称<strong>逻辑地址</strong>，<strong>绝对地址</strong>又称<strong>物理地址</strong>。</p>\n<h5 id=\"程序的装入和链接\"><a href=\"#程序的装入和链接\" class=\"headerlink\" title=\"程序的装入和链接\"></a>程序的装入和链接</h5><img src=\"/blog/2020/12/12/内存管理（一）/程序的执行.png\" style=\"zoom:120%;\">\n\n<p>编译：由编译程序将用户源代码编译成若干个目标模块（高级语言-&gt;机器语言）。</p>\n<p>链接：由链接程序将编译后形成的一组目标模块，以及所需库函数链接在一起，形成一个完整的装入模块。</p>\n<p>装入（装载）：由装入程序将装入模块装入内存运行。</p>\n<h5 id=\"装入的三种方式\"><a href=\"#装入的三种方式\" class=\"headerlink\" title=\"装入的三种方式\"></a>装入的三种方式</h5><img src=\"/blog/2020/12/12/内存管理（一）/三种装入方式.png\" style=\"zoom:120%;\">\n\n<h6 id=\"绝对装入\"><a href=\"#绝对装入\" class=\"headerlink\" title=\"绝对装入\"></a>绝对装入</h6><p>在编译时，如果知道程序将放到内存中的哪个位置，编译程序将产生绝对地址的目标代码。装入程序按照装入模块中的地址，将程序和数据装入内存。</p>\n<p>绝对装入<strong>只适用于单道程序环境</strong>。</p>\n<p>程序中使用的绝对地址，可在编译或汇编时给出，也可由程序员直接赋予。通常情况下都是编译或汇编时再转换为绝对地址。</p>\n<h6 id=\"静态重定位\"><a href=\"#静态重定位\" class=\"headerlink\" title=\"静态重定位\"></a>静态重定位</h6><p>又称<strong>可重定位装入</strong>。编译、链接后的装入模块的地址都是从0开始的，指令中使用的地址、数据存放的地址都是相对于起始地址而言的逻辑地址。可根据内存的当前情况，将装入模块装入到内存的适当位置。装入时对地址仅从<strong>重定位</strong>，将逻辑地址变换为物理地址（地址变换实在装入时一次完成的）。</p>\n<p>静态重定位的特点是在一个作业装入内存时，<strong>必须分配其要求的全部内存空间</strong>，如果没有足够的内存，就不能装入该作业。作业一旦进入内存后，<strong>在运行期间就不能再移动</strong>，也不能再申请内存空间。</p>\n<h6 id=\"动态重定位\"><a href=\"#动态重定位\" class=\"headerlink\" title=\"动态重定位\"></a>动态重定位</h6><p>又称<strong>动态运行时装入</strong>。编译、链接后的装入模块的地址都是从0开始的。装入程序把装入模块装入内存后，并不会立即把逻辑地址转换为物理地址，而是<strong>把地址转换推迟到程序真正要执行时才进行。</strong>因此装入内存后所有的地址依然是逻辑地址，这种方式需要一个<strong>重定位寄存器支持</strong>。</p>\n<img src=\"/blog/2020/12/12/内存管理（一）/重定位寄存器.png\" style=\"zoom:120%;\">\n\n<ul>\n<li>采取动态重定位时<strong>允许程序在内存中发生移动</strong>；</li>\n<li>可将程序分配到<strong>不连续</strong>的存储区中；</li>\n<li>程序运行前只需装入部分代码即可投入运行；</li>\n<li>运行期间根据需要动态申请分配内存。</li>\n</ul>\n<h5 id=\"链接的三种方式\"><a href=\"#链接的三种方式\" class=\"headerlink\" title=\"链接的三种方式\"></a>链接的三种方式</h5><h6 id=\"静态链接\"><a href=\"#静态链接\" class=\"headerlink\" title=\"静态链接\"></a>静态链接</h6><p>在程序运行之前，先将各目标模块及它们所需的库函数连接成一个完整的可执行文件（装入模块），之后不再拆开。</p>\n<img src=\"/blog/2020/12/12/内存管理（一）/静态链接.png\" style=\"zoom: 80%;\">\n\n<h6 id=\"装入时动态链接\"><a href=\"#装入时动态链接\" class=\"headerlink\" title=\"装入时动态链接\"></a>装入时动态链接</h6><p>将各目标模块装入内存时，边装入边链接的链接方式。</p>\n<img src=\"/blog/2020/12/12/内存管理（一）/装入时动态链接.png\" style=\"zoom:85%;\">\n\n<h6 id=\"运行时动态链接\"><a href=\"#运行时动态链接\" class=\"headerlink\" title=\"运行时动态链接\"></a>运行时动态链接</h6><p>在程序执行中需要该目标模块时，才对它进行链接。其优点是便于修改和更新，便于实现对目标模块的共享。</p>\n<img src=\"/blog/2020/12/12/内存管理（一）/运行时动态链接.png\" style=\"zoom:90%;\">\n\n<h5 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2020/12/12/内存管理（一）/内存的基本知识小节.png\" style=\"zoom:120%;\">\n\n<h4 id=\"内存管理的概念\"><a href=\"#内存管理的概念\" class=\"headerlink\" title=\"内存管理的概念\"></a>内存管理的概念</h4><ol>\n<li><p>操作系统负责<strong>内存空间的分配与回收</strong>。</p>\n</li>\n<li><p>操作系统需要提供某种技术从逻辑上<strong>对内存空间进行扩充</strong>。</p>\n</li>\n<li><p>操作系统需要提供<strong>地址转换</strong>功能，负责程序的<strong>逻辑地址</strong>与<strong>物理地址</strong>的转换。</p>\n</li>\n<li><p>操作系统需要提供<strong>内存保护</strong>功能。保证各进程在各自存储空间内运行，互不干扰。</p>\n</li>\n</ol>\n<p>内存保护的两种方法：</p>\n<ol>\n<li>在CPU中设置一对<strong>上、下限寄存器</strong>，存放进程的上、下限地址。进程的指令要访问某个地址时，CPU检查是否越界。</li>\n<li>采用<strong>重定位寄存器（基址寄存器）</strong>和<strong>界地址寄存器（限长寄存器）</strong>进行越界检查。重定位寄存器存放进程的<strong>起始物理地址</strong>。界地址寄存器存放进程的<strong>最大逻辑地址</strong>。</li>\n</ol>\n<img src=\"/blog/2020/12/12/内存管理（一）/内存保护方法二.png\" style=\"zoom:80%;\">\n\n<h5 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2020/12/12/内存管理（一）/内存管理的概念.png\" style=\"zoom:100%;\">\n\n<h4 id=\"覆盖与交换\"><a href=\"#覆盖与交换\" class=\"headerlink\" title=\"覆盖与交换\"></a>覆盖与交换</h4><h5 id=\"覆盖技术\"><a href=\"#覆盖技术\" class=\"headerlink\" title=\"覆盖技术\"></a>覆盖技术</h5><p>引入<strong>覆盖技术</strong>，解决<strong>程序大小超过物理内存总和</strong>的问题。</p>\n<p>覆盖技术的思想：将<strong>程序分为多个段（多个模块）</strong>。常用的段常驻内存，不常用的段在需要时调入内存。内存中分为<strong>一个固定区</strong>和<strong>若干个覆盖区</strong>。</p>\n<ul>\n<li>需要常驻内存的段放在<strong>固定区</strong>中，<strong>调入后就不再调出（除非运行结束）</strong>。</li>\n<li>不常用的段放在<strong>覆盖区</strong>，<strong>需要用到时调入内存，用不到时调出内存</strong>。</li>\n</ul>\n<img src=\"/blog/2020/12/12/内存管理（一）/覆盖技术.png\" style=\"zoom:80%;\">\n\n<p><em>必须由程序员声明覆盖结构</em>，操作系统完成自动覆盖。</p>\n<p><strong>缺点</strong>：对用户不透明，增加了用户编程负担，已成为历史。</p>\n<h5 id=\"交换技术\"><a href=\"#交换技术\" class=\"headerlink\" title=\"交换技术\"></a>交换技术</h5><p>交换技术的思想：内存空间紧张时，系统将内存中某些进程暂时<strong>换出</strong>外存，把外存中某些已具备运行条件的进程<strong>换入</strong>内存（进程在内存与磁盘间动态调度）。进行了中级调度（内存调度）：决定将哪个处于挂起状态的进程重新调入内存。</p>\n<ol>\n<li><p>应该在外存（磁盘）的什么位置保存被换出的进程？</p>\n<p>具有对换功能的操作系统中，通常把磁盘空间分为<strong>文件区</strong>和<strong>对换区</strong>两部分。<strong>文件区</strong>主要用于存放文件，主要追求存储空间的利用率，因此对文件区空间的管理采用<strong>离散分配</strong>方式；<strong>对换区</strong>空间只占磁盘空间的小部分，<strong>被换出的进程数据就存放在对换区</strong>。由于对换的速度直接影响到系统的整体速度，因此对换区空间的管理主要追求换入换出速度，因此通常对换区采用<strong>连续分配</strong>方式。总之，对换区的<code>I/O</code>速度比文件区的更快。</p>\n</li>\n<li><p>什么时候应该交换？</p>\n<p>交换通常在许多进程运行且内存吃紧时进行，而系统负荷降低就暂停。例如：在发现许多进程运行时经常发生缺页，就说明内存紧张，此时可以换出一些进程；如果缺页率明显下降，就可以暂停换出。</p>\n</li>\n<li><p>应该换出哪些进程？</p>\n<p>可优先换出阻塞进程；可换出优先级低的进程；为了防止优先级低的进程在被调入内存后很快又被换出，有的系统还会考虑进程在内存的驻留时间。</p>\n</li>\n</ol>\n<p><em>PCB会常驻内存</em>，不会被换成外存。</p>\n<h5 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2020/12/12/内存管理（一）/覆盖与交换小结.png\" style=\"zoom:120%;\">\n\n","categories":["操作系统"]},{"title":"内存管理（三）","url":"/blog/2020/12/25/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>基本分页存储管理的基本概念</li>\n<li>基本地址变换机构</li>\n<li>具有快表的地址变换机构</li>\n<li>基本分段存储管理方式</li>\n<li>段页式管理方式</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"基本分页存储管理的基本概念\"><a href=\"#基本分页存储管理的基本概念\" class=\"headerlink\" title=\"基本分页存储管理的基本概念\"></a>基本分页存储管理的基本概念</h4><h5 id=\"连续分配方式的缺点\"><a href=\"#连续分配方式的缺点\" class=\"headerlink\" title=\"连续分配方式的缺点\"></a>连续分配方式的缺点</h5><ol>\n<li>固定分区分配：内存利用率低，会产生大量的内部碎片。</li>\n<li>动态分区分配：会产生很多外部碎片，可以通过“紧凑”处理，但代价很高。</li>\n</ol>\n<p>如果允许将一个程序分散的装入到许多不相邻的分区中，便可充分利用内存——非连续分配方式（离散分配方式）。</p>\n<h5 id=\"基本分页存储管理思想\"><a href=\"#基本分页存储管理思想\" class=\"headerlink\" title=\"基本分页存储管理思想\"></a>基本分页存储管理思想</h5><p>把内存分为一个个相等的小分区，再按照分区大小把进程拆分为一个个小部分。</p>\n<p><em>如果把分区大小设置的更小一些，内部碎片会更小，内存利用率会更高</em>。</p>\n<h5 id=\"分页存储的基本概念\"><a href=\"#分页存储的基本概念\" class=\"headerlink\" title=\"分页存储的基本概念\"></a>分页存储的基本概念</h5><p><strong>页框</strong>：将内存空间分为一个个<strong>大小相等的分区</strong>，每个分区就是一个页框，也称为”页帧“、”内存块“、”物理块“。</p>\n<p><strong>页框号</strong>：每个页框的编号，其他名称同上。从0开始。</p>\n<p><strong>页</strong>：将用户进程的地址空间分为<strong>与页框大小相等</strong>的一个个区域，称为”页“或者”页面“。</p>\n<p><strong>页号</strong>：每个页面的编号，也是从0开始。</p>\n<p>操作系统<strong>以页框为单位为各个进程分配</strong>内存空间。进程的<strong>页面</strong>与内存的<strong>页框</strong>有<strong>一一对应</strong>的关系。</p>\n<h5 id=\"地址转换\"><a href=\"#地址转换\" class=\"headerlink\" title=\"地址转换\"></a>地址转换</h5><h6 id=\"进程在内存中连续存放\"><a href=\"#进程在内存中连续存放\" class=\"headerlink\" title=\"进程在内存中连续存放\"></a>进程在内存中连续存放</h6><p>重定位寄存器：存放装入模块的起始位置。</p>\n<p>思想：模块在内存中的“起始地址” + 目标内存单元相对于起始位置的“偏移量”。</p>\n<h6 id=\"进程在内存中非连续存放\"><a href=\"#进程在内存中非连续存放\" class=\"headerlink\" title=\"进程在内存中非连续存放\"></a>进程在内存中非连续存放</h6><img src=\"/blog/2020/12/25/内存管理（三）/进程在内存中非连续存放.png\" style=\"zoom:80%;\">\n\n<p>如何计算进程在内存中的存放位置？</p>\n<ol>\n<li><p>计算出逻辑地址对应的页号：<br>$$<br>页号=逻辑地址/页面长度（取整）<br>$$</p>\n</li>\n<li><p>该页号对应页面在内存中的起始位置： 操作系统的某种数据结构记录</p>\n</li>\n<li><p>逻辑地址在页面内的偏移量：<br>$$<br>页内偏移量=逻辑地址%页面长度<br>$$</p>\n</li>\n<li><p>物理地址 = 页面地址+ 页内偏移量</p>\n</li>\n</ol>\n<p>对于逻辑地址为80的内存单元：</p>\n<ol>\n<li>在1号页 : $80 / 50 = 1$</li>\n<li>该页在内存中的起始地址为450</li>\n<li>内存单元相对于该页起始地址偏移量为 $80%50=30$</li>\n<li>实际物理地址为 $450+30=480$</li>\n</ol>\n<p>为了方便计算页号、页内偏移量，<strong>页面大小</strong>一般取<strong>2的整数幂</strong>。</p>\n<p>假设用32个二进制位表示逻辑地址，页面大小为 $2^{12}B=4096B=4KB$。</p>\n<ul>\n<li><p>0号页逻辑地址空间为0~4095，用二进制表示为：</p>\n<p><code>0000_0000_0000_0000_0000_0000_0000_0000~0000_0000_0000_0000_0000_1111_1111_1111</code></p>\n</li>\n<li><p>1号页逻辑地址空间为4096~8191，用二进制表示为：</p>\n<p><code>0000_0000_0000_0000_0001_0000_0000_0000~0000_0000_0000_0000_0001_1111_1111_1111</code></p>\n</li>\n<li><p>2号页逻辑地址空间为4096~8191，用二进制表示为：</p>\n<p><code>0000_0000_0000_0000_0010_0000_0000_0000~0000_0000_0000_0000_0010_1111_1111_1111</code></p>\n</li>\n</ul>\n<p>eg：逻辑地址4097，用二进制表示为：<code>0000_0000_0000_0000_0001_0000_0000_0001</code>。</p>\n<p>若1号页在内存中的起始地址为X，则逻辑地址4097对应的物理地址为：<code>X+0000_0000_0001</code>。</p>\n<p>结论：</p>\n<p>如果每个页面大小为 $2^KB$，用二进制数表示逻辑地址，则末尾的 $K$ 位为<strong>页内偏移量</strong>，其余部分就是<strong>页号</strong>。所以让<strong>每个页面的大小为2的整数幂</strong>。</p>\n<h6 id=\"分页存储管理的逻辑地址结构\"><a href=\"#分页存储管理的逻辑地址结构\" class=\"headerlink\" title=\"分页存储管理的逻辑地址结构\"></a>分页存储管理的逻辑地址结构</h6><img src=\"/blog/2020/12/25/内存管理（三）/分页存储管理的逻辑地址结构.png\">\n\n<p><strong>如果有 $K$ 位表示“页内偏移量”，则说明系统中一个页面的大小是 $2^K$ 个内存单元</strong>。</p>\n<p><strong>如果有 $M$ 位表示“页号”，则说明在该系统中，一个进程最多允许有 $2^M$ 个页面</strong>。</p>\n<h5 id=\"页表\"><a href=\"#页表\" class=\"headerlink\" title=\"页表\"></a>页表</h5><p>为了能知道进程的每个页面在内存中存放的位置，操作系统要为<strong>每个进程建立一张页表</strong>。</p>\n<img src=\"/blog/2020/12/25/内存管理（三）/页表.png\">\n\n<p>上述的第五条，是因为：</p>\n<p>假设内存大小位4GB，页面大小位4KB，则每个页表项至少为多少个字节？</p>\n<p>$4GB=2^{32}B$</p>\n<p>$4KB=2^{12}B$</p>\n<p> $4GB$ 内存会被划分为 $2^{32}/2^{12}=2^{20}$ 个内存块，所以内存块号的范围是 $0\\sim2^{20}-1$ ，所以至少需要20个二进制位才能表示内存块号，即至少需要3个字节。</p>\n<p>各页表项会<strong>按顺序且连续的</strong>存在在内存中，如果该页表在内存中存放的起始位置为X，则M号页对应的页表项一定是存放在内存地址为 $X+3*M$ 处。</p>\n<p>因此，只需要知道<strong>页表存放的起始位置</strong>和<strong>页表项长度</strong>。即可找到各个页号对应的页表项存放的位置。</p>\n<h5 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2020/12/25/内存管理（三）/分页存储管理小结.png\">\n\n<h4 id=\"基本地址变换机构\"><a href=\"#基本地址变换机构\" class=\"headerlink\" title=\"基本地址变换机构\"></a>基本地址变换机构</h4><p>用于实现逻辑地址到物理地址转换的一组硬件机构。</p>\n<p>在<strong>系统中</strong>设置一个<strong>页表寄存器（PTR）</strong>，存放：</p>\n<ul>\n<li>页表在内存中的起始地址F</li>\n<li>页表长度M</li>\n</ul>\n<p>进程还未执行时，上述两个参数存放在<strong>进程控制块（PCB）</strong>中，当进程被调度时，操作系统内核会把它们放到页表寄存器中。<strong>页面大小是2的整数幂</strong>。</p>\n<h5 id=\"地址变换过程\"><a href=\"#地址变换过程\" class=\"headerlink\" title=\"地址变换过程\"></a>地址变换过程</h5><p>设页面大小为L，逻辑地址A到物理地址E的变换过程如下：</p>\n<img src=\"/blog/2020/12/25/内存管理（三）/逻辑地址2物理地址.png\">\n\n<ol>\n<li>计算页号P和页内偏移量W</li>\n<li>比较页号P和页表长度M，若 $P\\geq{M}$ ，则产生越界</li>\n<li>页表中页号P对应的 $页表项地址=页表起始地址F+页号P\\times页表项长度M$ ，取出该页表项内容b即为内存块号</li>\n<li>计算 $E=b\\times L+W$，用得到的物理地址E去访问内存</li>\n</ol>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>页表长度：当前页表中总共有几个页表项，即总共有几个页（用户进程）</li>\n<li>页表项长度：每个页表项占多大的存储空间</li>\n<li>页面大小：一个页面占多大的存储空间（与页框大小一致，用户进程）</li>\n</ul>\n<h5 id=\"一个例题\"><a href=\"#一个例题\" class=\"headerlink\" title=\"一个例题\"></a>一个例题</h5><p>若页面大小L为1K字节，页号2对应的内存块号b=8，将逻辑地址A=2500转换为物理地址E。</p>\n<p>等价描述：某系统<strong>按字节寻址</strong>，逻辑地址结构中，<strong>页内偏移量占10位</strong>（说明一个页面的大小位2^10B=1KB），页号2对应的内存块号b=8，将逻辑地址A=2500转换位物理地址E。</p>\n<ol>\n<li>计算页号P、页内偏移量W</li>\n</ol>\n<p>$$<br>P=A/L=2500/1024=2\\\\<br>W=A%L=2500%1024=452<br>$$</p>\n<ol start=\"2\">\n<li>页号2没有越界，存放内存块号为b=8</li>\n<li>计算物理地址E</li>\n</ol>\n<p>$$<br>E=b\\times L+W=8\\times 1024+425=8644<br>$$</p>\n<p>分页式存储管理系统中，只要确定每个页面的大小，逻辑地址结构就确定了。因此，<strong>页式管理中地址是一维的</strong>。即，只要给出逻辑地址，系统会自动算出页号、页内偏移量，<strong>不需要</strong>显示的告诉系统页内偏移量占多少位。</p>\n<h5 id=\"对页表项大小的进一步探讨\"><a href=\"#对页表项大小的进一步探讨\" class=\"headerlink\" title=\"对页表项大小的进一步探讨\"></a>对页表项大小的进一步探讨</h5><p>之前说过一个页表项占据3B的内存，如果一个页面为4KB，则每个页框可以存放4096/3=1365个页表项，则会剩下4096%3=1B的页内碎片，如果<strong>每个页表项占4个字节</strong>，则每个页框刚好可存放1024个页表项。</p>\n<p>除此之外，如果<strong>每个页表项占据3个字节</strong>，则1365号页表项地址为 $X+3\\times1365+1$。如果<strong>每个页表项占4个字节</strong>，则1024号页表项地址为 $X+4\\times1024$，更方便计算。</p>\n<p>理论上，页表项长度为3B即可表示内存块号的范围，但是<strong>为了方便页表查询，常常会让一个页表项占据更多的字节，使得每个页面恰好可以装得下整数个页表项</strong>。</p>\n<h5 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2020/12/25/内存管理（三）/基本地址变换机构.png\">\n\n<h4 id=\"具有快表的地址变换机构\"><a href=\"#具有快表的地址变换机构\" class=\"headerlink\" title=\"具有快表的地址变换机构\"></a>具有快表的地址变换机构</h4><p>基本地址变换机构的改进版本。</p>\n<h5 id=\"局部性原理\"><a href=\"#局部性原理\" class=\"headerlink\" title=\"局部性原理\"></a>局部性原理</h5><ul>\n<li>时间局部性：如果程序执行了程序中的某条指令，那么不久后这条指令很有可能再次执行；如果某个数据被访问过，不久之后该数据很有可能再次被访问（程序中一般存在大量循环）。</li>\n<li>空间局部性：如果程序访问了某个存储单元，在不久之后，其附近的存储单元也很有可能被访问（数据在内存中连续存放）。</li>\n</ul>\n<p>之前提到的<strong>基本地址变换机构</strong>中，每访问一个逻辑地址，都<strong>需要查询内存中的页表</strong>。由于局部性原理，可能<strong>连续很多次查到的都是同一个页表项</strong>。可以利用这个特性减少访问页表的次数。</p>\n<h5 id=\"快表（TLB）\"><a href=\"#快表（TLB）\" class=\"headerlink\" title=\"快表（TLB）\"></a>快表（TLB）</h5><p>也称联想寄存器（TLB），是一种<strong>访问速度比内存快很多</strong>的<strong>高速缓冲存储器</strong>，存储当前访问的若页表项，加速地址变换过程。相对应的<strong>内存</strong>中的页表称为<strong>慢表</strong>。</p>\n<h5 id=\"引入快表后，地址的变换过程\"><a href=\"#引入快表后，地址的变换过程\" class=\"headerlink\" title=\"引入快表后，地址的变换过程\"></a>引入快表后，地址的变换过程</h5><img src=\"/blog/2020/12/25/内存管理（三）/引入快表后的地址变换过程.png\">\n\n<ol>\n<li>CPU给出逻辑地址，由<strong>硬件</strong>得到页号、页内偏移量，将页号与快表中的所有页号进行比较。</li>\n<li>找到匹配的页号，直接从<strong>快表</strong>中取出该页对应的内存块号，将内存块号和页内偏移量拼接成物理地址，再访问该物理地址对应的内存单元。因此<strong>快表命中</strong>，访问某个逻辑地址仅需<strong>一次访存</strong>。</li>\n<li>未找到匹配的页号，访问<strong>内存中的页表</strong>，找到对应页表项，根据页表项得到页面存放的内存块号，再将内存块号和页内偏移量拼接得到物理地址，再根据物理地址访问对应的内存单元。因此<strong>快表未命中</strong>，访问某个逻辑地址需要<strong>两次访存</strong>（找到页表项后，同时将其<strong>存入快表</strong>，若快表已满，则按照一定算法对旧的页表进行替换）。</li>\n</ol>\n<p>由于局部性原理，快表命中率可达**90%**以上。</p>\n<h5 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2020/12/25/内存管理（三）/快表小结.png\">","categories":["操作系统"]},{"title":"内存管理（二）","url":"/blog/2020/12/12/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li><p>连续分配管理方式</p>\n</li>\n<li><p>动态分区分配算法</p>\n<a id=\"more\"></a>\n\n</li>\n</ol>\n<h4 id=\"连续分配管理方式\"><a href=\"#连续分配管理方式\" class=\"headerlink\" title=\"连续分配管理方式\"></a>连续分配管理方式</h4><p>连续分配：指为用户进程分配的必须是一个<strong>连续的空间</strong>。</p>\n<img src=\"/blog/2020/12/12/内存管理（二）/连续分配.png\">\n\n<h5 id=\"单一连续分配\"><a href=\"#单一连续分配\" class=\"headerlink\" title=\"单一连续分配\"></a>单一连续分配</h5><p>单一连续分配方式中，内存被分为<strong>系统区</strong>和<strong>用户区</strong>。</p>\n<img src=\"/blog/2020/12/12/内存管理（二）/单一连续分配.png\" style=\"zoom:80%;\">\n\n<p>特点：内存中<strong>只能有一道用户程序</strong>，用户程序独占整个用户区空间。</p>\n<p>优点：实现简单，<strong>无外部碎片</strong>；可采用覆盖技术扩充内存；不一定需要采取内存保护</p>\n<p>缺点：只能用于单用户、单任务的操作系统中；<strong>有内部碎片</strong>；存储器利用率极低。</p>\n<p><em>分配给某进程的内存区域中，如果有些部分没有用上，就是<strong>内部碎片</strong></em>。</p>\n<h5 id=\"固定分区分配\"><a href=\"#固定分区分配\" class=\"headerlink\" title=\"固定分区分配\"></a>固定分区分配</h5><p>将<strong>用户空间</strong>划分为<strong>若干个固定大小的分区</strong>，每个分区中<strong>只装入一道作业</strong>。</p>\n<p>有两种形式：分区大小相等和分区大小不等</p>\n<img src=\"/blog/2020/12/12/内存管理（二）/固定分区分配.png\" style=\"zoom:80%;\">\n\n<ul>\n<li>分区大小相等：缺乏灵活性，适用于一台计算机控制多个相同模块的场合。</li>\n<li>分区大小不等：增加灵活性，可以满足不同大小进程需求。</li>\n</ul>\n<h6 id=\"分区说明表\"><a href=\"#分区说明表\" class=\"headerlink\" title=\"分区说明表\"></a>分区说明表</h6><p>操作系统需要建立一个数据结构—分区说明表，每个表包括对应分区的<strong>大小、起始地址、状态</strong>：</p>\n<img src=\"/blog/2020/12/12/内存管理（二）/固定分区分配-分区说明表.png\">\n\n<p>当某用户程序要装入内存时，操作系统内核程序根据用户程序大小检索该表，从中找到一个能满足大小的、未分配的分区，将其分配给该程序，然后修改状态为“已分配”。</p>\n<p>优点：实现简单，无外部碎片。</p>\n<p>缺点：用户程序太大时，所有分区都不能满足需求，此时得采用覆盖技术，会降低性能；会产生内部碎片，内存利用率低。</p>\n<h5 id=\"动态分区分配\"><a href=\"#动态分区分配\" class=\"headerlink\" title=\"动态分区分配\"></a>动态分区分配</h5><p>动态分区分配也称可变分区分配，这种方法不会预先划分内存分区，而是<strong>在进程装入内存时，根据进程的大小动态的建立分区</strong>，使分区的大小正好适合进程的需要。</p>\n<img src=\"/blog/2020/12/12/内存管理（二）/动态分配数据结构.png\" style=\"zoom:80%;\">\n\n<h6 id=\"使用什么数据结构？\"><a href=\"#使用什么数据结构？\" class=\"headerlink\" title=\"使用什么数据结构？\"></a>使用什么数据结构？</h6><ol>\n<li>空闲分区表：每个空闲分区对应一个表项，表项中包含分区号、分区大小、分区起始地址等信息。</li>\n</ol>\n<img src=\"/blog/2020/12/12/内存管理（二）/动态分配数据结构-空闲分区表.png\">\n\n<ol start=\"2\">\n<li>空闲分区链：每个分区的起始部分和末尾部分分别设置前向指针和后向指针。起始部分处还可以记录分区大小等信息。</li>\n</ol>\n<img src=\"/blog/2020/12/12/内存管理（二）/动态分配数据结构-空闲分区链.png\">\n\n<h6 id=\"选择哪个分区？\"><a href=\"#选择哪个分区？\" class=\"headerlink\" title=\"选择哪个分区？\"></a>选择哪个分区？</h6><p>动态分区分配算法，之后会提到。</p>\n<h6 id=\"如何进行分区的分配与回收？\"><a href=\"#如何进行分区的分配与回收？\" class=\"headerlink\" title=\"如何进行分区的分配与回收？\"></a>如何进行分区的分配与回收？</h6><ol>\n<li>分配</li>\n</ol>\n<img src=\"/blog/2020/12/12/内存管理（二）/动态分配数据结构-分配1.png\" style=\"zoom:80%;\">\n\n<p>如果此时一个大小为5MB的进程到来，按照一定的分配算法，将分区1的一部分分配给它运行，分区表更新如下：</p>\n<p><img src=\"/blog/2020/12/12/内存管理（二）/zxy543040659.github.io\\source_posts\\内存管理（二）\\动态分配数据结构-分配2.png\" alt=\"image-20201218113548211\"></p>\n<p>还有一种情况，如果到来的进程大小为4MB，且将分区3分配给它，那么分区表更新如下：</p>\n<img src=\"/blog/2020/12/12/内存管理（二）/动态分配数据结构-分配3.png\">\n\n<ol start=\"2\">\n<li><p>回收</p>\n<ol>\n<li>情况一，回收区的后面有一个相邻的空闲分区：</li>\n</ol>\n<img src=\"/blog/2020/12/12/内存管理（二）/动态分配数据结构-回收1.png\" style=\"zoom: 80%;\">\n\n<p>此时进程4执行完毕，释放其占用的4MB内存，更新分区表如下（二合一）：</p>\n<img src=\"/blog/2020/12/12/内存管理（二）/动态分配数据结构-回收2.png\">\n\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>情况二，回收区的前面有一个相邻的空闲分区：</p>\n<img src=\"/blog/2020/12/12/内存管理（二）/动态分配数据结构-回收3.png\" style=\"zoom:80%;\">\n\n<p>此时进程3执行完毕，释放其占用的18MB内存，更新分区表如下（二合一）：</p>\n<img src=\"/blog/2020/12/12/内存管理（二）/动态分配数据结构-回收4.png\">\n</li>\n<li><p>情况三，回收区的前、后各有一个相邻的空闲分区：</p>\n<img src=\"/blog/2020/12/12/内存管理（二）/动态分配数据结构-回收5.png\" style=\"zoom:80%;\">\n\n<p>此时进程4执行完毕，释放其占用的4MB内存，更新分区表如下（三合一）：</p>\n<img src=\"/blog/2020/12/12/内存管理（二）/动态分配数据结构-回收6.png\">\n</li>\n<li><p>情况四，回收区的前、后都没有相邻的空闲分区：</p>\n<img src=\"/blog/2020/12/12/内存管理（二）/动态分配数据结构-回收7.png\" style=\"zoom:85%;\">\n\n<p>此时进程2执行完毕，释放其占用的14MB内存，更新分区表如下（新增一）：</p>\n<img src=\"/blog/2020/12/12/内存管理（二）/动态分配数据结构-回收8.png\">\n\n</li>\n</ol>\n<p><em>各表项的顺序不一定按照地址递增顺序，具体由动态分区分配算法确定。</em></p>\n<h6 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h6><p>动态分区分配<strong>没有内部碎片</strong>，但是有<strong>外部碎片</strong>。</p>\n<ul>\n<li>内部碎片：分配给某进程的内存区域中，有些部分没有用上。</li>\n<li>外部碎片：指内存中某些空闲分区由于太小而难以利用。</li>\n</ul>\n<p>如果内存中空闲空间的总和本来可以满足某进程的要求，但是进程需要一整块连续的内存空间，而碎片不连续，可以通过<strong>紧凑（拼凑，Compaction）</strong>技术解决外部碎片。</p>\n<h5 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2020/12/12/内存管理（二）/连续分配小结.png\" style=\"zoom:120%;\">\n\n<h4 id=\"动态分区分配算法\"><a href=\"#动态分区分配算法\" class=\"headerlink\" title=\"动态分区分配算法\"></a>动态分区分配算法</h4><p>在动态分区分配方式中，当多个空闲分区都能满足要求时，应该选择哪个分区进行分配？</p>\n<img src=\"/blog/2020/12/12/内存管理（二）/动态分配算法.png\" style=\"zoom:80%;\">\n\n<h5 id=\"首次适应算法\"><a href=\"#首次适应算法\" class=\"headerlink\" title=\"首次适应算法\"></a>首次适应算法</h5><p>算法思想：每次都从低地址开始查找，找到第一个能满足大小的空闲分区。</p>\n<p>如何实现：<strong>空闲分区以地址递增的次序排列</strong>。每次分配内存时顺序查找<strong>空闲分区链（或空闲分区表）</strong>，找到大小能满足要求的第一个空闲分区。</p>\n<h5 id=\"最佳适应算法\"><a href=\"#最佳适应算法\" class=\"headerlink\" title=\"最佳适应算法\"></a>最佳适应算法</h5><p>算法思想：尽可能多的留下大片的空闲区，优先使用更小的空闲区。</p>\n<p>如何实现：<strong>空闲分区以容量递增次序链接</strong>。每次分配内存时顺序查找<strong>空闲分区链（或空闲分区表）</strong>，找到大小能满足要求的第一个空闲分区（能够满足但大小最小）。</p>\n<p>缺点：每次都选最小的分区进行分配，会留下越来越多的、很小的、难以利用的内存块。因此这种方法会产生很多外部碎片。</p>\n<h5 id=\"最坏适应算法\"><a href=\"#最坏适应算法\" class=\"headerlink\" title=\"最坏适应算法\"></a>最坏适应算法</h5><p>又称最大适应算法。</p>\n<p>算法思想：每次分配时优先使用最大的连续空闲区，这样分配后剩余的空闲区就不会太小。</p>\n<p>如何实现：<strong>空闲分区以容量递减次序链接</strong>。每次分配内存时顺序查找<strong>空闲分区链（或空闲分区表）</strong>，找到大小能满足要求的第一个空闲分区。</p>\n<p>缺点：每次都选最大的分区进行分配，虽然可以让分配后留下的空闲区更大，更可用，但是这种方式会导致较大的连续空闲区被迅速用完。之后如果有“大进程”到达，就没有内存分区可用了。</p>\n<h5 id=\"邻近适应算法\"><a href=\"#邻近适应算法\" class=\"headerlink\" title=\"邻近适应算法\"></a>邻近适应算法</h5><p>算法思想：在首次适应算法基础上，每次都从上次查找结束的位置开始检索，减小查找的开销。</p>\n<p>如何实现：<strong>空闲分区以地址递增的顺序排列（可排成一个循环链表）</strong>。每次分配内存时<strong>从上次查找结束的位置开始查找空闲分区链（或空闲分区表）</strong>，找到大小能满足要求的第一个空闲分区。</p>\n<p><strong>首次适应算法</strong>每次都会从头查找，每次都需要检索低地址的小分区。这种规则也决定了当低地址部分有更小的分区可以满足需求时，会更有可能用到低地址部分的小分区，也会更有可能把高地址部分的大分区保留下来。</p>\n<p><strong>邻近适应算法</strong>的规则可能导致无论低地址、高地址部分的空闲分区都有相同的概率被使用，也就导致了高地址部分的大分区更可能被使用，被划分为小分区，最后导致无大分区可用。</p>\n<p><strong>综合来看，首次适应算法的效果反而最好</strong>。</p>\n<h5 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2020/12/12/内存管理（二）/动态分配算法小结.png\" style=\"zoom:120%;\">\n\n\n\n","categories":["操作系统"]},{"title":"内存管理（四）","url":"/blog/2021/01/04/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%88%E5%9B%9B%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>基本分段存储管理方式</li>\n<li>段页式管理方式</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"基本分段存储管理方式\"><a href=\"#基本分段存储管理方式\" class=\"headerlink\" title=\"基本分段存储管理方式\"></a>基本分段存储管理方式</h4><p>与分页存储管理方式区别为：离散分配时所分配地址空间的基本单位不同。</p>\n<h5 id=\"分段\"><a href=\"#分段\" class=\"headerlink\" title=\"分段\"></a>分段</h5><p>进程的地址空间：按照程序<strong>自身的逻辑</strong>关系划分为若干个段，每个段都有一个段名，每段从0开始编址。</p>\n<p>内存分配规则：以段位单位进行分配，每个段在内存中占据连续空间，但各段之间可以不相邻。</p>\n<img src=\"/blog/2021/01/04/内存管理（四）/分段-逻辑编程.png\">\n\n<p>分段系统的逻辑地址由段号（段名）和段内地址（段内偏移量）组成：</p>\n<img src=\"/blog/2021/01/04/内存管理（四）/分段逻辑地址.png\">\n\n<ul>\n<li>段号的位数决定每个进程最多可分几个段。</li>\n<li>段内地址位数决定了每个段的最大长度是多少。</li>\n</ul>\n<h5 id=\"段表\"><a href=\"#段表\" class=\"headerlink\" title=\"段表\"></a>段表</h5><img src=\"/blog/2021/01/04/内存管理（四）/段表.png\">\n\n<h5 id=\"地址变换\"><a href=\"#地址变换\" class=\"headerlink\" title=\"地址变换\"></a>地址变换</h5><img src=\"/blog/2021/01/04/内存管理（四）/地址变换.png\">\n\n<p>④处与<strong>分页存储</strong>不同。</p>\n<h5 id=\"分段、分页管理对比\"><a href=\"#分段、分页管理对比\" class=\"headerlink\" title=\"分段、分页管理对比\"></a>分段、分页管理对比</h5><h6 id=\"基本单位\"><a href=\"#基本单位\" class=\"headerlink\" title=\"基本单位\"></a>基本单位</h6><ul>\n<li><strong>页是信息的物理单位</strong>。分页的主要目的是为了实现离散分配，提高内存利用率。分页仅仅是系统管理上的需要,完全是系统行为，<strong>对用户是不可见的</strong>。</li>\n<li><strong>段是信息的逻辑单位</strong>。分段的主要目的是更好地满足用户需求。一个段通常包含着一组属于一个逻辑模块的信息。分段对用户是可见的，用户编程时需要显式地给出段名。</li>\n</ul>\n<h6 id=\"大小\"><a href=\"#大小\" class=\"headerlink\" title=\"大小\"></a>大小</h6><ul>\n<li>页的大小<strong>固定</strong>且由<strong>系统</strong>决定。</li>\n<li>段的长度却<strong>不固定</strong>，决定于<strong>用户编写的程序</strong>。</li>\n</ul>\n<h6 id=\"地址空间\"><a href=\"#地址空间\" class=\"headerlink\" title=\"地址空间\"></a>地址空间</h6><ul>\n<li>分页的用户进程地址空间是<strong>一维</strong>的，程序员只需给出一个记忆符即可表示一个地址。</li>\n<li>分段的用户进程地址空间是<strong>二维</strong>的，程序员在标识一个地址时，既要给出段名，也要给出段内地址。</li>\n</ul>\n<p>分段比分页<strong>更容易实现信息的共享和保护</strong>。不能被修改的代码称为<strong>纯代码</strong>或<strong>可重入代码</strong>（不属于临界资源），这样的代码可以共享，可修改的代码不可共享。</p>\n<h5 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/04/内存管理（四）/分段存储管理小结.png\" style=\"zoom:120%;\">\n\n<h4 id=\"段页式管理方式\"><a href=\"#段页式管理方式\" class=\"headerlink\" title=\"段页式管理方式\"></a>段页式管理方式</h4><img src=\"/blog/2021/01/04/内存管理（四）/段页式管理方式.png\" style=\"zoom:80%;\">\n\n<h5 id=\"分页、分段优缺点分析\"><a href=\"#分页、分段优缺点分析\" class=\"headerlink\" title=\"分页、分段优缺点分析\"></a>分页、分段优缺点分析</h5><img src=\"/blog/2021/01/04/内存管理（四）/分页、分段优缺点分析.png\">\n\n<h5 id=\"段页式管理\"><a href=\"#段页式管理\" class=\"headerlink\" title=\"段页式管理\"></a>段页式管理</h5><img src=\"/blog/2021/01/04/内存管理（四）/段页式管理.png\">\n\n<p>将进程按逻辑模块分段，再将各段分页，再装入大小相同的内存块（页框/页帧/物理块）中。</p>\n<h5 id=\"段页式管理的逻辑地址结构\"><a href=\"#段页式管理的逻辑地址结构\" class=\"headerlink\" title=\"段页式管理的逻辑地址结构\"></a>段页式管理的逻辑地址结构</h5><img src=\"/blog/2021/01/04/内存管理（四）/段页式管理的逻辑地址结构.png\">\n\n<ul>\n<li>段号的位数决定每个进程最多可分几个段。</li>\n<li>页号位数决定了每个段最大有多少页。</li>\n<li>页内偏移量决定了页面大小、内存块大小是多少。</li>\n</ul>\n<p><strong>分段</strong>对用户是可见的，程序员编程时需要显式地给出段号、段内地址。而将<strong>各段</strong>进行<strong>分页</strong>对用户是不可见的。系统会根据段内地址自动划分页号和页内偏移量。因此段页式管理的地址结构是二维的。</p>\n<h5 id=\"段表、页表\"><a href=\"#段表、页表\" class=\"headerlink\" title=\"段表、页表\"></a>段表、页表</h5><img src=\"/blog/2021/01/04/内存管理（四）/段表、页表.png\">\n\n<p>每个段对应一个段表项，每个段表项由段号、页表长度、页表存放块号（页表起始地址）组成。每个段表项长度相等，<strong>段号是隐含的</strong>。</p>\n<p>每个页面对应一个页表项，每个页表项由页号、页面存放的内存块号组成。每个页表项长度相等，<strong>页号是隐含的</strong>。</p>\n<img src=\"/blog/2021/01/04/内存管理（四）/段表、页表寻址.png\">\n\n<h5 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/04/内存管理（四）/段页式管理方式小结.png\" style=\"zoom:120%;\">","categories":["操作系统"]},{"title":"内存管理（五）","url":"/blog/2021/01/08/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%94%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>虚拟内存基本概念</li>\n<li>请求分页管理方式</li>\n<li>页面置换算法</li>\n<li>页面分配策略</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"虚拟内存基本概念\"><a href=\"#虚拟内存基本概念\" class=\"headerlink\" title=\"虚拟内存基本概念\"></a>虚拟内存基本概念</h4><h5 id=\"传统存储管理方式的特征、缺点\"><a href=\"#传统存储管理方式的特征、缺点\" class=\"headerlink\" title=\"传统存储管理方式的特征、缺点\"></a>传统存储管理方式的特征、缺点</h5><p>传统存储管理特点：</p>\n<ol>\n<li>一次性：作业必须<strong>一次性全部装入内存</strong>才能开始运行。</li>\n<li>驻留性：一旦作业被装入内存，就<strong>会一直驻留在内存中</strong>。</li>\n</ol>\n<p>很多暂时用不到的数据也会长期占用内存，导致内存利用率不高。</p>\n<h5 id=\"局部性原理\"><a href=\"#局部性原理\" class=\"headerlink\" title=\"局部性原理\"></a>局部性原理</h5><ul>\n<li>时间局部性</li>\n<li>空间局部性</li>\n</ul>\n<h5 id=\"虚拟内存的定义和特征\"><a href=\"#虚拟内存的定义和特征\" class=\"headerlink\" title=\"虚拟内存的定义和特征\"></a>虚拟内存的定义和特征</h5><p>虚拟内存：若内存空间不够，由<strong>操作系统</strong>负责将内存中暂时用不到的信息换出到外存。在操作系统的管理下，在用户看来似乎有一个比实际内存大得多的内存，这就是<strong>虚拟内存</strong>。虚拟性体现在：实际的物理内存大小没有变，只是在逻辑上进行了扩充。</p>\n<ul>\n<li>虚拟内存最大容量：计算机的地址结构（CPU寻址范围）确定。</li>\n<li>虚拟内存实际容量：<em>min</em>(内存和外存容量之和，CPU寻址范围)。</li>\n</ul>\n<p>虚拟内存有以下三个特征：</p>\n<ol>\n<li>多次性（对应一次性）：允许作业被分成多次调入内存。</li>\n<li>对换性（对应驻留性）：允许作业运行中，将作业换出、换入内存。</li>\n<li>虚拟性：从逻辑上扩充了内存的容量。</li>\n</ol>\n<h5 id=\"如何实现虚拟内存技术\"><a href=\"#如何实现虚拟内存技术\" class=\"headerlink\" title=\"如何实现虚拟内存技术\"></a>如何实现虚拟内存技术</h5><img src=\"/blog/2021/01/08/内存管理（五）/虚拟内存的实现.png\">\n\n<p>虚拟内存技术基于<strong>离散分配</strong>的内存管理方式。<strong>请求分页存储管理</strong>与<strong>基本分页存储管理</strong>的<strong>主要区别</strong>是：操作系统需要提供<strong>请求调页</strong>和<strong>页面置换</strong>功能。</p>\n<ul>\n<li>请求调页：程序执行过程中，当所访问信息<strong>不在内存中</strong>时，由操作系统负责<strong>将所需信息从外存调入内存</strong>。</li>\n<li>页面置换：若内存空间不够，由操作系统将<strong>内存中暂时用不到的信息换出到外存</strong>。</li>\n</ul>\n<h5 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/08/内存管理（五）/虚拟内存基本概念小结.png\" style=\"zoom:120%;\">\n\n<h4 id=\"请求分页管理方式\"><a href=\"#请求分页管理方式\" class=\"headerlink\" title=\"请求分页管理方式\"></a>请求分页管理方式</h4><img src=\"/blog/2021/01/08/内存管理（五）/请求分页管理方式.png\">\n\n<h5 id=\"页表机制\"><a href=\"#页表机制\" class=\"headerlink\" title=\"页表机制\"></a>页表机制</h5><ul>\n<li>为了实现<strong>请求调页</strong>，操作系统需要知道每个页面是否已经调入内存；如果没调入，那么也需要知道该页面在外存中存放的位置。</li>\n<li>为了实现<strong>内存置换</strong>，操作系统需要通过某些指标来决定到底换出哪个页面。需要记录各个页面是否被修改过，修改过才需要换出，将外存中的旧数据覆盖。</li>\n</ul>\n<img src=\"/blog/2021/01/08/内存管理（五）/页表机制.png\">\n\n<h5 id=\"缺页中断机构\"><a href=\"#缺页中断机构\" class=\"headerlink\" title=\"缺页中断机构\"></a>缺页中断机构</h5><p>请求分页系统中，若访问页面<strong>不在内存中</strong>时，便产生一个<strong>缺页中断</strong>。然后由操作系统的<strong>缺页中断处理程序</strong>处理中断。此时<strong>缺页的进程阻塞</strong>，放入阻塞队列，调页完成后再将其唤醒，放回就绪队列。</p>\n<ul>\n<li><p>如果内存中<strong>有空闲块</strong>，则为进程分配一个空闲块，将所缺页面装入该块，并修改页表中对应页表项。</p>\n</li>\n<li><p>如果内存中<strong>无空闲块</strong>，则由<strong>页面置换算法</strong>选择<strong>淘汰</strong>一个页面，若该页面在内存期间被<strong>修改过</strong>，则要将其<strong>写回外存</strong>。未修改过的页面不用写回外存。</p>\n</li>\n</ul>\n<p>缺页中断是由于当前指令想要访问的目标页面未调入内存而产生的，因此属于<strong>内中断</strong>。一条指令在执行期间，可能产生<strong>多次</strong>缺页中断。</p>\n<img src=\"/blog/2021/01/08/内存管理（五）/缺页中断机构.png\">\n\n<h5 id=\"地址变换机构\"><a href=\"#地址变换机构\" class=\"headerlink\" title=\"地址变换机构\"></a>地址变换机构</h5><img src=\"/blog/2021/01/08/内存管理（五）/地址变化机构.png\">\n\n<ul>\n<li>新增步骤1：请求调页（查到页表项时进行判断）。</li>\n<li>新增步骤2：页面置换（需要调入页面，但没有空闲内存块时进行）。</li>\n<li>新增步骤3：需要修改请求页表中新增的表项。</li>\n</ul>\n<img src=\"/blog/2021/01/08/内存管理（五）/地址变化机构步骤.png\" style=\"zoom:120%;\">\n\n<p>补充：</p>\n<ol>\n<li>换入/换出页面需要启动慢速I/O操作，如果过于频繁，会有很大开销。</li>\n<li>页面调入内存后，需要修改慢表，同时也需要将表项复制到快表中。</li>\n</ol>\n<p>在具有快表的请求分页系统中，访问一个逻辑地址时，若发生缺页，地址变换步骤为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">查快表（未命中）-&gt;查慢表（发现未调入内存）-&gt;调页（调入的页面对应的表项会直接加入快表）</span><br><span class=\"line\">-&gt;查快表（命中）-&gt;访问目标内存单元</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/08/内存管理（五）/地址变化机构小结.png\" style=\"zoom:120%;\">\n\n<h4 id=\"页面置换算法\"><a href=\"#页面置换算法\" class=\"headerlink\" title=\"页面置换算法\"></a>页面置换算法</h4><img src=\"/blog/2021/01/08/内存管理（五）/页面置换算法.png\" style=\"zoom:80%;\">\n\n<h5 id=\"最佳置换算法（OPT）\"><a href=\"#最佳置换算法（OPT）\" class=\"headerlink\" title=\"最佳置换算法（OPT）\"></a>最佳置换算法（OPT）</h5><p>每次选择淘汰的页面<strong>以后永不使用</strong>或<strong>最长时间内不再被访问</strong>，保证最低缺页率。</p>\n<p>缺点：只有进程执行的过程中才能知道接下来会访问到哪个页面，操作系统无法提前预判访问序列。因此，最佳置换算法<strong>无法实现</strong>。</p>\n<h5 id=\"先进先出置换算法（FIFO）\"><a href=\"#先进先出置换算法（FIFO）\" class=\"headerlink\" title=\"先进先出置换算法（FIFO）\"></a>先进先出置换算法（FIFO）</h5><p>每次选择淘汰的页面是<strong>最早进入内存的页面</strong>。</p>\n<p>Belady异常：当为进程分配的物理块数增大时，缺页次数不减反增的异常现象。</p>\n<p>缺点：只有FIFO算法会产生<strong>Belady异常</strong>，虽然其实现简单，但是与进程实际运行时规律不适应，因为先进入的页面也有可能最经常被访问。因此算法<strong>性能差</strong>。</p>\n<h5 id=\"最近最久未使用置换算法（LRU）\"><a href=\"#最近最久未使用置换算法（LRU）\" class=\"headerlink\" title=\"最近最久未使用置换算法（LRU）\"></a>最近最久未使用置换算法（LRU）</h5><p>每次选择淘汰的页面是<strong>最近最久未使用的页面</strong>。用每个页面页表项中的<strong>访问字段</strong>记录该页面自上次被访问以来所经历的时间 t 。淘汰时选择 t 最大的页面。</p>\n<p>缺点：实现需要专门的硬件支持，虽然算法性能好，但<strong>实现困难，开销大</strong>。</p>\n<h5 id=\"时钟置换算法（CLOCK）\"><a href=\"#时钟置换算法（CLOCK）\" class=\"headerlink\" title=\"时钟置换算法（CLOCK）\"></a>时钟置换算法（CLOCK）</h5><p>此算法是一种性能和开销较均衡的算法，也称<strong>最近未用算法（NRU，Not Recently Used）</strong>。</p>\n<p>简单的CLOCK算法实现方法：为每个页面设置一个访问位，再将内存中的页面都通过链接指针链接成一个<strong>循环队列</strong>。当某页被访问时，其<strong>访问位置为1</strong>。<strong>当需要淘汰一个页面时，只需检查页的访问位</strong>。</p>\n<img src=\"/blog/2021/01/08/内存管理（五）/简单clock.png\">\n\n<ul>\n<li>如果是0，就选择该页换出；如果是1，则将它置为0，暂不换出，继续检查下一个页面。</li>\n<li>若第一轮扫描中所有页面都是1，则将这些页面的访问位依次置为0后，再进行第二轮扫描（第二轮扫描中一定会有访问位为0的页面，因此简单的CLOCK算法选择一个淘汰页面最多会经过两轮扫描）。</li>\n</ul>\n<h6 id=\"改进型的时钟置换算法\"><a href=\"#改进型的时钟置换算法\" class=\"headerlink\" title=\"改进型的时钟置换算法\"></a>改进型的时钟置换算法</h6><p>简单的CLOCK算法<strong>仅考虑一个页面最近是否被访问过</strong>，如果被淘汰的页面没有被修改过，就不需要执行I/O操作写回外存。<strong>只有被淘汰的页面被修改过，才需要写回外存</strong>。</p>\n<p>因此，在其他条件都相同时，应<strong>优先淘汰没有修改过的页面</strong>，避免I/O操作。修改位为0时表示没有修改过，修改位为1，表示页面被修改过。</p>\n<p>改进型CLOCK置换算法选择一个淘汰页面最多会进行<strong>四轮扫描</strong>。</p>\n<h5 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/08/内存管理（五）/页面置换算法小结.png\">\n\n<h4 id=\"页面分配策略\"><a href=\"#页面分配策略\" class=\"headerlink\" title=\"页面分配策略\"></a>页面分配策略</h4><h5 id=\"页面分配、置换策略\"><a href=\"#页面分配、置换策略\" class=\"headerlink\" title=\"页面分配、置换策略\"></a>页面分配、置换策略</h5><p>驻留集：请求分页存储管理中给进程分配的物理块的集合。驻留集大小一般小于进程的总大小。</p>\n<ul>\n<li>若驻留集太小，会导致缺页频繁。</li>\n<li>若驻留集太大，会导致多道程序并发度下降。</li>\n</ul>\n<p>固定分配：操作系统为每个进程分配一组固定数目的物理块。进程运行期间驻留集<strong>大小不变</strong>。</p>\n<p>可变分配：驻留集<strong>大小可变</strong>。</p>\n<p>局部置换：缺页时只能选进程自己的物理块进行置换。</p>\n<p>全局置换：操作系统保留的空闲物理块和别的进程持有的物理块（先置换到外存）都可以分配给缺页进程。</p>\n<img src=\"/blog/2021/01/08/内存管理（五）/页面置换策略.png\">\n\n<p>可变分配<strong>全局</strong>置换：只要缺页就给分配新物理块。</p>\n<p>可变分配<strong>局部</strong>置换：根据<strong>缺页的频率</strong>来动态地增加或减少进程的物理块。</p>\n<h5 id=\"何时调入页面\"><a href=\"#何时调入页面\" class=\"headerlink\" title=\"何时调入页面\"></a>何时调入页面</h5><ol>\n<li>预调页策略：根据空间局部性，一次调入若干相邻的页面可能比一次调入一个页面更高效。主要用于<strong>进程的首次调入</strong>，由程序员指出（<strong>运行前调入</strong>）。</li>\n<li>请求调页策略：进程在<strong>运行期间</strong>发现缺页时才将所缺页面调入内存。I/O开销较大（每次只能调入一页，每次调页都要进行磁盘I/O）。</li>\n</ol>\n<h5 id=\"何处调入页面\"><a href=\"#何处调入页面\" class=\"headerlink\" title=\"何处调入页面\"></a>何处调入页面</h5><h6 id=\"系统拥有足够的对换区空间\"><a href=\"#系统拥有足够的对换区空间\" class=\"headerlink\" title=\"系统拥有足够的对换区空间\"></a>系统拥有足够的对换区空间</h6><img src=\"/blog/2021/01/08/内存管理（五）/何处调入1.png\">\n\n<h6 id=\"系统缺少足够的对换区空间\"><a href=\"#系统缺少足够的对换区空间\" class=\"headerlink\" title=\"系统缺少足够的对换区空间\"></a>系统缺少足够的对换区空间</h6><img src=\"/blog/2021/01/08/内存管理（五）/何处调入2.png\">\n\n<h6 id=\"UNIX方式\"><a href=\"#UNIX方式\" class=\"headerlink\" title=\"UNIX方式\"></a>UNIX方式</h6><img src=\"/blog/2021/01/08/内存管理（五）/何处调入3.png\">\n\n<h5 id=\"抖动（颠簸）现象\"><a href=\"#抖动（颠簸）现象\" class=\"headerlink\" title=\"抖动（颠簸）现象\"></a>抖动（颠簸）现象</h5><p>刚换出的页面马上要换入内存，或刚换入的需要换出，这种频繁的页面调度行为称为<strong>抖动（颠簸）</strong>。主要原因是进程频繁访问的页面数目高于可用的物理块数（<strong>分配给进程的物理块不够</strong>）。</p>\n<h5 id=\"工作集\"><a href=\"#工作集\" class=\"headerlink\" title=\"工作集\"></a>工作集</h5><p>驻留集：指请求分页存储管理中给进程分配的内存块的集合。</p>\n<p>工作集：指在某段时间间隔里，进程实际访问页面的集合。</p>\n<img src=\"/blog/2021/01/08/内存管理（五）/工作集.png\">\n\n<p><strong>窗口尺寸为4</strong>。</p>\n<p><strong>工作集大小</strong>可能小于窗口尺寸，一般来说，驻留集大小不能<strong>小于</strong>工作集大小，否则进程运行过程中将频繁缺页。</p>\n<h5 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/08/内存管理（五）/页面分配策略小结.png\" style=\"zoom:120%;\">","categories":["操作系统"]},{"title":"图论（一）","url":"/blog/2020/10/27/%E5%9B%BE%E8%AE%BA1/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>图的基本概念</li>\n<li>图的两种表示方法及实现</li>\n<li>对图进行遍历</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"图的基本概念\"><a href=\"#图的基本概念\" class=\"headerlink\" title=\"图的基本概念\"></a>图的基本概念</h4><h5 id=\"基本组成\"><a href=\"#基本组成\" class=\"headerlink\" title=\"基本组成\"></a>基本组成</h5><ul>\n<li>节点（Vertex）</li>\n<li>边（Edge）</li>\n</ul>\n<p>使用场景：交通运输，社交网络，互联网，工作安排，脑区活动，程序状态执行（自动机）等。</p>\n<h5 id=\"图的分类\"><a href=\"#图的分类\" class=\"headerlink\" title=\"图的分类\"></a>图的分类</h5><ul>\n<li>无向图（Undirected Graph）</li>\n<li>有向图（Directed Graph）</li>\n</ul>\n<p>无向图是一种特殊的有向图，比如A指向B，同时B指向A</p>\n<ul>\n<li>无权图（Unweighted Graph）</li>\n<li>有权图（Weighted Graph）</li>\n</ul>\n<p>其他概念：图的连通性，简单图（无自环边与平行边）</p>\n<img src=\"/blog/2020/10/27/图论1/7-1-1.png\" style=\"zoom:80%;\">\n\n<h4 id=\"图的两种表示方法及实现（邻接矩阵与邻接表）\"><a href=\"#图的两种表示方法及实现（邻接矩阵与邻接表）\" class=\"headerlink\" title=\"图的两种表示方法及实现（邻接矩阵与邻接表）\"></a>图的两种表示方法及实现（邻接矩阵与邻接表）</h4><h5 id=\"邻接矩阵（适合表示稠密图Dense-Graph）\"><a href=\"#邻接矩阵（适合表示稠密图Dense-Graph）\" class=\"headerlink\" title=\"邻接矩阵（适合表示稠密图Dense Graph）\"></a>邻接矩阵（适合表示稠密图Dense Graph）</h5><img src=\"/blog/2020/10/27/图论1/7-2-1.png\" style=\"zoom:80%;\">\n\n<p><strong>实现：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DenseGraph</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;      <span class=\"comment\">// 节点数和边数</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> directed; <span class=\"comment\">// 是否是有向图</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt;&gt; g;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    DenseGraph(<span class=\"keyword\">int</span> n, <span class=\"keyword\">bool</span> directed)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;n = n;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;m = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;directed = directed;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            g.push_back(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt;(n, <span class=\"literal\">false</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~DenseGraph()&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">V</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> n;&#125; <span class=\"comment\">// 图的节点总数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">E</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> m;&#125; <span class=\"comment\">// 图的边总数</span></span><br><span class=\"line\">    <span class=\"comment\">// 增加节点v与节点w之间的一条边</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">        assert(v &gt;= <span class=\"number\">0</span> &amp;&amp; v &lt; n);</span><br><span class=\"line\">        assert(w &gt;= <span class=\"number\">0</span> &amp;&amp; w &lt; n);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hasEdge(v, w)) <span class=\"keyword\">return</span>; <span class=\"comment\">// 处理了平行边，并且防止边数m多加一次</span></span><br><span class=\"line\">        g[v][w] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!directed) <span class=\"comment\">// 如果是无向图</span></span><br><span class=\"line\">            g[w][v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        m++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">hasEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">        assert(v &gt;= <span class=\"number\">0</span> &amp;&amp; v &lt; n);</span><br><span class=\"line\">        assert(w &gt;= <span class=\"number\">0</span> &amp;&amp; w &lt; n);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> g[v][w];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"邻接表（适合表示稀疏图Sparse-Graph）\"><a href=\"#邻接表（适合表示稀疏图Sparse-Graph）\" class=\"headerlink\" title=\"邻接表（适合表示稀疏图Sparse Graph）\"></a>邻接表（适合表示稀疏图Sparse Graph）</h5><img src=\"/blog/2020/10/27/图论1/7-2-2.png\" style=\"zoom:80%;\">\n\n<p><strong>实现：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SparseGraph</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> directed;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; g;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    SparseGraph(<span class=\"keyword\">int</span> n, <span class=\"keyword\">bool</span> directed)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;n = n;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;m = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;directed = directed;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            g.push_back(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~SparseGraph()&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">V</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> n;&#125; <span class=\"comment\">// 图的节点总数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">E</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> m;&#125; <span class=\"comment\">// 图的边总数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">        assert(v &gt;= <span class=\"number\">0</span> &amp;&amp; v &lt; n);</span><br><span class=\"line\">        assert(w &gt;= <span class=\"number\">0</span> &amp;&amp; w &lt; n);</span><br><span class=\"line\"></span><br><span class=\"line\">        g[v].push_back(w);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v != w &amp;&amp; !directed) <span class=\"comment\">// 处理了自环边，并且防止边数m多加一次</span></span><br><span class=\"line\">            g[w].push_back(v);</span><br><span class=\"line\">        m++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">hasEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">        assert(v &gt;= <span class=\"number\">0</span> &amp;&amp; v &lt; n);</span><br><span class=\"line\">        assert(w &gt;= <span class=\"number\">0</span> &amp;&amp; w &lt; n);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; g[v].size(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(g[v][i] == w) <span class=\"comment\">// 节点v与w相连</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对图进行遍历——迭代器的实现\"><a href=\"#对图进行遍历——迭代器的实现\" class=\"headerlink\" title=\"对图进行遍历——迭代器的实现\"></a>对图进行遍历——迭代器的实现</h4><pre class=\"mermaid\">graph LR\n    0-->3;\n    0-->5;\n    0-->8;</pre>\n\n<p>在邻接矩阵中如下：</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>在邻接表中如下：</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n</tr>\n</tbody></table>\n<p>如果要遍历某个节点的所有邻边，可以借鉴迭代器的思想。</p>\n<h5 id=\"稠密图（邻接矩阵中）\"><a href=\"#稠密图（邻接矩阵中）\" class=\"headerlink\" title=\"稠密图（邻接矩阵中）\"></a>稠密图（邻接矩阵中）</h5><p>在<code>DenseGraph</code>类中实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 迭代器实现</span></span><br><span class=\"line\"><span class=\"comment\">// 顶点的邻边按顺序输出</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">adjIterator</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    DenseGraph &amp;G;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index; <span class=\"comment\">// 遍历到的节点坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    adjIterator(DenseGraph &amp;graph, <span class=\"keyword\">int</span> v) : G(graph) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;v = v;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;index = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">begin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        index = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        index += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (index; index &lt; G.V(); index++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (G.g[v][index]) <span class=\"comment\">// 如果v与index相连</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 没有邻边</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">end</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index &gt;= G.V();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"稀疏图（邻接表中）\"><a href=\"#稀疏图（邻接表中）\" class=\"headerlink\" title=\"稀疏图（邻接表中）\"></a>稀疏图（邻接表中）</h5><p>在<code>SparseGraph</code>类中实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">adjIterator</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    SparseGraph &amp;G;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    adjIterator(SparseGraph &amp;graph, <span class=\"keyword\">int</span> v):G(graph)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;v = v;</span><br><span class=\"line\">        <span class=\"comment\">// 与稠密图不同的是，这里的index表示遍历到v的第index个节点，不表示节点index</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;index = index; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">begin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(G.g[v].size())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> G.g[v].size();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        index += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &lt; G.g[v].size())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> G.g[v][index];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 返回-1说明已经遍历结束，此时index = G.g[v].size()</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">end</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index &gt;= G.g[v].size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试用主函数：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> M = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Sparse Graph</span></span><br><span class=\"line\">    <span class=\"comment\">// 存在平行边</span></span><br><span class=\"line\">    <span class=\"function\">SparseGraph <span class=\"title\">g1</span><span class=\"params\">(N, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = rand() % N;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = rand() % N;</span><br><span class=\"line\">        g1.addEdge(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// O(E)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; N; ++v)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; v &lt;&lt; <span class=\"string\">\" : \"</span>;</span><br><span class=\"line\">        <span class=\"function\">SparseGraph::adjIterator <span class=\"title\">adj</span><span class=\"params\">(g1, v)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> w = adj.begin(); !adj.end(); w = adj.next())&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; w &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Dense Graph</span></span><br><span class=\"line\">    <span class=\"comment\">// 存在自环边</span></span><br><span class=\"line\">    <span class=\"function\">DenseGraph <span class=\"title\">g2</span><span class=\"params\">(N, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = rand() % N;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = rand() % N;</span><br><span class=\"line\">        g2.addEdge(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// O(V^2)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v = <span class=\"number\">0</span>; v &lt; N; ++v)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; v &lt;&lt; <span class=\"string\">\" : \"</span>;</span><br><span class=\"line\">        <span class=\"function\">DenseGraph::adjIterator <span class=\"title\">adj</span><span class=\"params\">(g2, v)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> w = adj.begin(); !adj.end(); w = adj.next())&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; w &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Sparse Graph</span><br><span class=\"line\">// 可以看出存在平行边</span><br><span class=\"line\">0 : 3 6 6 7 6</span><br><span class=\"line\">1 : 9 2</span><br><span class=\"line\">2 : 7 9 5 1 9</span><br><span class=\"line\">3 : 5 0 5 6 4 9 5</span><br><span class=\"line\">4 : 6 3 8 6 8</span><br><span class=\"line\">5 : 9 7 3 2 3 3 9</span><br><span class=\"line\">6 : 9 4 0 3 9 0 4 0</span><br><span class=\"line\">7 : 5 2 8 9 0</span><br><span class=\"line\">8 : 7 8 9 4 4</span><br><span class=\"line\">9 : 5 2 6 1 7 3 6 8 5 2</span><br><span class=\"line\"></span><br><span class=\"line\">// Sparse Graph</span><br><span class=\"line\">// 可以看出存在自环边</span><br><span class=\"line\">0 : 0 2 4</span><br><span class=\"line\">1 : 4 5 7 9</span><br><span class=\"line\">2 : 0 4 8</span><br><span class=\"line\">3 : 3 4 5 6</span><br><span class=\"line\">4 : 0 1 2 3 6 7 9</span><br><span class=\"line\">5 : 1 3 6</span><br><span class=\"line\">6 : 3 4 5 7 8 9</span><br><span class=\"line\">7 : 1 4 6 7</span><br><span class=\"line\">8 : 2 6 8</span><br><span class=\"line\">9 : 1 4 6</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"完整工程\"><a href=\"#完整工程\" class=\"headerlink\" title=\"完整工程\"></a>完整工程</h4><p><a href=\"https://gitee.com/settlezxy/algorithm_and_data_structure.git\" target=\"_blank\" rel=\"noopener\">https://gitee.com/settlezxy/algorithm_and_data_structure.git</a></p>\n","categories":["算法与数据结构"]},{"title":"单链表的基本操作","url":"/blog/2019/10/30/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","content":"<h3 id=\"本次学习要点（更新于2019-12-3）\"><a href=\"#本次学习要点（更新于2019-12-3）\" class=\"headerlink\" title=\"本次学习要点（更新于2019.12.3）\"></a>本次学习要点（更新于2019.12.3）</h3><ol>\n<li>掌握线性表的抽象数据类型</li>\n<li>掌握链表的基本操作</li>\n<li>学习链表的较复杂的操作</li>\n</ol>\n<a id=\"more\"></a>\n\n<h3 id=\"线性表的抽象数据类型\"><a href=\"#线性表的抽象数据类型\" class=\"headerlink\" title=\"线性表的抽象数据类型\"></a>线性表的抽象数据类型</h3><ol>\n<li><code>int Length() const</code></li>\n</ol>\n<ul>\n<li>初始条件：线性表已存在</li>\n<li>操作结果：返回线性表中元素的个数</li>\n</ul>\n<ol start=\"2\">\n<li><code>bool Empty() const</code></li>\n</ol>\n<ul>\n<li>初始条件：线性表已存在</li>\n<li>操作结果：判断线性表是否为空</li>\n</ul>\n<ol start=\"3\">\n<li><code>void Clear()</code></li>\n</ol>\n<ul>\n<li>初始条件：线性表已存在</li>\n<li>操作结果：清空线性表</li>\n</ul>\n<ol start=\"4\">\n<li><code>void Traverse(void(*visit)(const ElemType &amp;))</code></li>\n</ol>\n<ul>\n<li>初始条件：线性表已存在</li>\n<li>操作结果：对每个元素调用函数(*visit)</li>\n</ul>\n<ol start=\"5\">\n<li><code>bool GetElem(int position,ElemType &amp;e) const</code></li>\n</ol>\n<ul>\n<li>初始条件：线性表已存在，1&lt;=position&lt;=Length()</li>\n<li>操作结果：用e返回第position处的元素值</li>\n</ul>\n<ol start=\"6\">\n<li><code>bool SetElem(int position,const ElemType &amp;e) </code></li>\n</ol>\n<ul>\n<li>初始条件：线性表已存在，1&lt;=position&lt;=Length()</li>\n<li>操作结果：设置第position处的元素值为e</li>\n</ul>\n<ol start=\"7\">\n<li><code>bool Delete(int position,ElemType &amp;e)</code></li>\n</ol>\n<ul>\n<li>初始条件：线性表已存在，1&lt;=position&lt;=Length()</li>\n<li>操作结果：删除第position个元素，并用e返回其值，长度减少1</li>\n</ul>\n<ol start=\"8\">\n<li><code>bool Insert(int position,const ElemType &amp;e)</code></li>\n</ol>\n<ul>\n<li>初始条件：线性表已存在，1&lt;=position&lt;=Length()+1</li>\n<li>操作结果：在第position前插入元素e，长度加1</li>\n</ul>\n<h4 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h4><p>函数声明中的<code>const</code>是什么作用？在不同位置的意思分别是什么？</p>\n<p>答：在成员函数后的<code>const</code>指常成员函数，不能更改类成员变量的值；在变量前的<code>const</code>指常变量，在函数体重不能更改变量值。</p>\n<h3 id=\"单链表的实现\"><a href=\"#单链表的实现\" class=\"headerlink\" title=\"单链表的实现\"></a>单链表的实现</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//文件名alg.h</span></span><br><span class=\"line\"><span class=\"comment\">//结点结构体模板</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//数据成员</span></span><br><span class=\"line\">\tElemType data;</span><br><span class=\"line\">\tNode&lt;ElemType&gt; *next;</span><br><span class=\"line\"><span class=\"comment\">//构造函数模板</span></span><br><span class=\"line\">\tNode();<span class=\"comment\">//无参数的构造函数模板</span></span><br><span class=\"line\">\tNode(ElemType item, Node&lt;ElemType&gt; *link);<span class=\"comment\">//已知数据元素和后继指针建立结构</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//结点模板的实现部分</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\">Node&lt;ElemType&gt;::Node()</span><br><span class=\"line\"><span class=\"comment\">//构造后继指针为空的结点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tnext = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\">Node&lt;ElemType&gt;::Node(ElemType item, Node&lt;ElemType&gt; *link)</span><br><span class=\"line\"><span class=\"comment\">//构造一个数据元素为item和后继指针为link的结点</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdata = item;</span><br><span class=\"line\">\tnext = link;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//线性链表简单实现为数据成员只有头指针，成员函数模板与顺序表相似</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简单线性链表类模板</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleLinkList</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\tNode&lt;ElemType&gt; *head;</span><br><span class=\"line\">\t<span class=\"function\">Node&lt;ElemType&gt; *<span class=\"title\">GetElemPtr</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">position</span>)</span> <span class=\"keyword\">const</span></span>;<span class=\"comment\">//返回指向第position个结点的指针</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tSimpleLinkList();</span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span>~SimpleLinkList();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Length</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Empty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Traverse</span><span class=\"params\">(<span class=\"keyword\">void</span>(*visit)(<span class=\"keyword\">const</span> ElemType &amp;))</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">GetElem</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">position</span>, ElemType &amp;e)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">SetElem</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">position</span>, <span class=\"keyword\">const</span> ElemType &amp;e)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">position</span>, ElemType &amp;e)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">position</span>, <span class=\"keyword\">const</span> ElemType &amp;e)</span></span>;</span><br><span class=\"line\">\tSimpleLinkList(<span class=\"keyword\">const</span> SimpleLinkList&lt;ElemType&gt; &amp;copy);</span><br><span class=\"line\">\tSimpleLinkList&lt;ElemType&gt;&amp;<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> SimpleLinkList&lt;ElemType&gt;&amp;copy);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//辅助函数模板的实现\t</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\">Node&lt;ElemType&gt; * SimpleLinkList&lt;ElemType&gt;::GetElemPtr(<span class=\"keyword\">int</span> <span class=\"built_in\">position</span>) <span class=\"keyword\">const</span></span><br><span class=\"line\"><span class=\"comment\">//返回指向第position个结点的指针,时间复杂度O(n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNode&lt;ElemType&gt; *tmpPtr = head; <span class=\"comment\">//用tmpPtr遍历线性表以查找第position个结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;\t\t\t\t\t<span class=\"comment\">//tmpPtr所指结点的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (tmpPtr != <span class=\"literal\">NULL</span>&amp;&amp;pos &lt; <span class=\"built_in\">position</span>)</span><br><span class=\"line\">\t&#123;\t<span class=\"comment\">//顺指针向后查找，知道tmpPtr指向第position个结点</span></span><br><span class=\"line\">\t\ttmpPtr = tmpPtr-&gt;next;</span><br><span class=\"line\">\t\tpos++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tmpPtr != <span class=\"literal\">NULL</span>&amp;&amp;pos == <span class=\"built_in\">position</span>)</span><br><span class=\"line\">\t&#123;\t<span class=\"comment\">//查找成功</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> tmpPtr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;\t<span class=\"comment\">//查找失败</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//成员函数的实现</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\">SimpleLinkList&lt;ElemType&gt;::SimpleLinkList()</span><br><span class=\"line\"><span class=\"comment\">//构造一个空链表</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\thead = <span class=\"keyword\">new</span> Node&lt;ElemType&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\">SimpleLinkList&lt;ElemType&gt;::~SimpleLinkList()</span><br><span class=\"line\"><span class=\"comment\">//销毁线性表</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tClear();</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SimpleLinkList&lt;ElemType&gt;::Length() <span class=\"keyword\">const</span></span><br><span class=\"line\"><span class=\"comment\">//返回线性表元素的个数</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tNode&lt;ElemType&gt; *tmpPtr;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (tmpPtr = head-&gt;next; tmpPtr != <span class=\"literal\">NULL</span>; tmpPtr = tmpPtr-&gt;next)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> SimpleLinkList&lt;ElemType&gt;::Empty() <span class=\"keyword\">const</span></span><br><span class=\"line\"><span class=\"comment\">//如果线性表为空，返回true，否则返回false</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> head-&gt;next == <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> SimpleLinkList&lt;ElemType&gt;::Clear()</span><br><span class=\"line\"><span class=\"comment\">//清空线性表</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tElemType tmpElem;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Empty())</span><br><span class=\"line\">\t&#123;\t<span class=\"comment\">//线性表非空，删除第一个元素</span></span><br><span class=\"line\">\t\tDelete(<span class=\"number\">1</span>, tmpElem);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> SimpleLinkList&lt;ElemType&gt;::Traverse(<span class=\"keyword\">void</span>(*visit)(<span class=\"keyword\">const</span> ElemType &amp;)) <span class=\"keyword\">const</span></span><br><span class=\"line\"><span class=\"comment\">//依次对线性表每个元素调用函数(*visit)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node&lt;ElemType&gt; * tmpPtr = head-&gt;next; tmpPtr != <span class=\"literal\">NULL</span>; tmpPtr = tmpPtr-&gt;next)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t(*visit)(tmpPtr-&gt;data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> SimpleLinkList&lt;ElemType&gt;::GetElem(<span class=\"keyword\">int</span> <span class=\"built_in\">position</span>, ElemType &amp;e) <span class=\"keyword\">const</span></span><br><span class=\"line\"><span class=\"comment\">//当线性表存在第position给元素时，用e返回其指，返回true，否则</span></span><br><span class=\"line\"><span class=\"comment\">//返回false</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">position</span>&lt;<span class=\"number\">1</span> || <span class=\"built_in\">position</span>&gt;Length())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tNode&lt;ElemType&gt; * tmpPtr;</span><br><span class=\"line\">\t\ttmpPtr = GetElemPtr(<span class=\"built_in\">position</span>);</span><br><span class=\"line\">\t\te = tmpPtr-&gt;data;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> SimpleLinkList&lt;ElemType&gt;::SetElem(<span class=\"keyword\">int</span> <span class=\"built_in\">position</span>, <span class=\"keyword\">const</span> ElemType &amp;e)</span><br><span class=\"line\"><span class=\"comment\">//将线性表的第position个位置的元素设置成e，position合法时返回true，否则</span></span><br><span class=\"line\"><span class=\"comment\">//返回false</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">position</span>&lt;<span class=\"number\">1</span> || <span class=\"built_in\">position</span>&gt;Length())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tNode&lt;ElemType&gt; *tmpPtr;</span><br><span class=\"line\">\t\ttmpPtr = GetElemPtr(<span class=\"built_in\">position</span>);</span><br><span class=\"line\">\t\ttmpPtr-&gt;data = e;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> SimpleLinkList&lt;ElemType&gt;::Delete(<span class=\"keyword\">int</span> <span class=\"built_in\">position</span>, ElemType &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">position</span>&lt;<span class=\"number\">1</span> || <span class=\"built_in\">position</span>&gt;Length())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tNode&lt;ElemType&gt; *tmpPtr;</span><br><span class=\"line\">\t\ttmpPtr = GetElemPtr(<span class=\"built_in\">position</span> - <span class=\"number\">1</span>);<span class=\"comment\">//取出指向第position-1个结点的指针</span></span><br><span class=\"line\">\t\tNode&lt;ElemType&gt; *nextPtr;          <span class=\"comment\">//新建指针nextPtr</span></span><br><span class=\"line\">\t\tnextPtr = tmpPtr-&gt;next;           <span class=\"comment\">//新指针为tmpPtr的后继</span></span><br><span class=\"line\">\t\ttmpPtr-&gt;next = nextPtr-&gt;next;     <span class=\"comment\">//删除position处的结点</span></span><br><span class=\"line\">\t\te = nextPtr-&gt;data;                <span class=\"comment\">//用e返回其值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> nextPtr;                   <span class=\"comment\">//释放被删结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> SimpleLinkList&lt;ElemType&gt;::Insert(<span class=\"keyword\">int</span> <span class=\"built_in\">position</span>, <span class=\"keyword\">const</span> ElemType &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">position</span>&lt;<span class=\"number\">1</span> || <span class=\"built_in\">position</span>&gt;Length() + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tNode&lt;ElemType&gt; *tmpPtr;</span><br><span class=\"line\">\t\ttmpPtr = GetElemPtr(<span class=\"built_in\">position</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tNode&lt;ElemType&gt; *nextPtr;</span><br><span class=\"line\">\t\tnextPtr = <span class=\"keyword\">new</span> Node&lt;ElemType&gt;(e, tmpPtr-&gt;next);</span><br><span class=\"line\">\t\ttmpPtr-&gt;next = nextPtr;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\">SimpleLinkList&lt;ElemType&gt;::SimpleLinkList(<span class=\"keyword\">const</span> SimpleLinkList&lt;ElemType&gt; &amp;copy)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//未写</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\">SimpleLinkList&lt;ElemType&gt;&amp;SimpleLinkList&lt;ElemType&gt;::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> SimpleLinkList&lt;ElemType&gt;&amp;copy)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//未写</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//文件名main.cpp</span></span><br><span class=\"line\"><span class=\"comment\">//单链表的基本操作</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"alg.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">(ElemType &amp;e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; e &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSimpleLinkList&lt;<span class=\"keyword\">int</span>&gt; test;<span class=\"comment\">//定义空链表</span></span><br><span class=\"line\">\tSimpleLinkList&lt;<span class=\"keyword\">int</span>&gt; test1;<span class=\"comment\">//定义空链表</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> e = <span class=\"number\">0</span>;<span class=\"comment\">//返回值</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> e1 = <span class=\"number\">50</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n = <span class=\"number\">8</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k++)<span class=\"comment\">//建立链表</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttest.Insert(k, k);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"建立的链表:\"</span>;</span><br><span class=\"line\">\ttest.Traverse(<span class=\"built_in\">display</span>);<span class=\"comment\">//显示数据</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"链表的长度为:\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; test.Length() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"链表是否为空(0代表非空):\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; test.Empty() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"返回第五个位置的值(5)(GetElem):\"</span>;</span><br><span class=\"line\">\ttest.GetElem(<span class=\"number\">5</span>, e);<span class=\"comment\">//返回第五个值</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; e &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"设置第五个位置的值(50)(SetElem):\"</span>;</span><br><span class=\"line\">\ttest.SetElem(<span class=\"number\">5</span>, e1);<span class=\"comment\">//设置第五个值为e1;</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; e1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"输出当前的链表:\"</span>;</span><br><span class=\"line\">\ttest.Traverse(<span class=\"built_in\">display</span>);<span class=\"comment\">//显示数据</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"删除第5个元素:\"</span>;</span><br><span class=\"line\">\ttest.Delete(<span class=\"number\">5</span>, e);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"删除的元素值为:\"</span> &lt;&lt; e &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"链表的长度为:\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; test.Length() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"输出当前的链表:\"</span>;</span><br><span class=\"line\">\ttest.Traverse(<span class=\"built_in\">display</span>);<span class=\"comment\">//显示数据</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"清空线性表(Clear)\"</span>;</span><br><span class=\"line\">\ttest.Clear();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"链表是否为空(0代表非空):\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; test.Empty() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<img src=\"/blog/2019/10/30/单链表的基本操作/基本操作.png\" style=\"zoom: 50%;\">\n\n<h3 id=\"一个问题\"><a href=\"#一个问题\" class=\"headerlink\" title=\"一个问题\"></a>一个问题</h3><p>已知线性表la和lb中的数据元素按值递增，现在要将la和lb合并成新的线性表lc，使lc中的数据元素扔递增有序。</p>\n","categories":["算法与数据结构"]},{"title":"堆排序(heap sort)","url":"/blog/2020/06/27/%E5%A0%86%E6%8E%92%E5%BA%8F-heap-sort/","content":"<p>堆排序是一种特殊的排序算法，涉及到了优先级的概念</p>\n<p>更新于2020/7/12</p>\n<h3 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h3><ol>\n<li>了解优先队列的一些概念</li>\n<li>堆排序概念及实现</li>\n</ol>\n<a id=\"more\"></a>\n\n<h3 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h3><ul>\n<li>普通队列：FIFO</li>\n<li>优先队列：出队顺序与入队无关，与优先级有关</li>\n</ul>\n<p>为什么选择优先队列？</p>\n<p>比如：在10000000个元素中选择前100名？(在N个元素中选择前M个)</p>\n<ul>\n<li>排序算法复杂度 O(NlogN)</li>\n<li>优先队列 O(NlogM)</li>\n</ul>\n<p>优先队列的实现方法：</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/实现方式.png\" style=\"zoom:80%;\">\n\n<p>使用普通数组在出队时需要遍历一次找到优先级最高的元素；顺序数组在每次插入的时候也要遍历一次找到相应的位置；使用堆这种结构可以让入队出队复杂度都为O(logN)。</p>\n<h3 id=\"堆的基本实现\"><a href=\"#堆的基本实现\" class=\"headerlink\" title=\"堆的基本实现\"></a>堆的基本实现</h3><h4 id=\"二叉堆-Binary-Heap\"><a href=\"#二叉堆-Binary-Heap\" class=\"headerlink\" title=\"二叉堆(Binary Heap)\"></a>二叉堆(Binary Heap)</h4><p>二叉堆类似于二叉树，是一种树状结构，可以用数组来存储二叉堆，以最大堆为例。</p>\n<p>最大堆：</p>\n<ul>\n<li><strong>堆中的某个节点值不大于其父亲节点(不意味着层数越高，数值越大)</strong></li>\n<li><strong>堆总是一棵完全二叉树(这也是可以用数组表示的原因)</strong></li>\n</ul>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/二叉堆1.png\" style=\"zoom:80%;\">\n\n<p>给每个节点按照从上到小，从左到右进行编号，可以有以下的性质：</p>\n<ul>\n<li><strong>左节点的序号是父节点的二倍</strong></li>\n<li><strong>右边序号为父节点的二倍加1</strong></li>\n</ul>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/二叉堆2.png\" style=\"zoom:80%;\">\n\n<p>用1来做起始标号是经典实现办法，数组对应的标号就是节点的索引：</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/数组1.png\">\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 找到i的父节点序号</span><br><span class=\"line\">parent[i] = i / <span class=\"number\">2</span></span><br><span class=\"line\"># i节点的孩子节点序号</span><br><span class=\"line\">leftChild[i] = <span class=\"number\">2</span> * i</span><br><span class=\"line\">rightChild[i] = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>构建堆的基本结构：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Item&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxHeap</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Item *data;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    MaxHeap(<span class=\"keyword\">int</span> capacity)&#123;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> Item[capacity+<span class=\"number\">1</span>];</span><br><span class=\"line\">        count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~MaxHeap()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加元素-Shift-Up\"><a href=\"#添加元素-Shift-Up\" class=\"headerlink\" title=\"添加元素(Shift Up)\"></a>添加元素(Shift Up)</h4><p>由于是用数组实现的堆，所以添加一个新的元素相当于在数组的末尾添加了一个元素：</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/数组2.png\">\n\n<p>相应的树形结构如下：</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/shiftup1.png\" style=\"zoom:80%;\">\n\n<p>显然此时不符合最大堆的定义，新加入的52大于其父节点16，所以两个需要交换位置，以此类推，将52放在合适的位置，如下图所示：</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/shiftup2.png\" style=\"zoom: 67%;\">\n\n<p>最终数组里的值为下图：</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/数组3.png\">\n\n<p><strong>Shift Up</strong>代码实现(在基本结构基础上)：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Item&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxHeap</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Item *data;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shiftUp</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 孩子节点大于父节点需要交换，并更新节点位置</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>( k &gt; <span class=\"number\">1</span> &amp;&amp; data[k/<span class=\"number\">2</span>] &lt; data[k] )&#123;</span><br><span class=\"line\">            swap( data[k/<span class=\"number\">2</span>], data[k] );</span><br><span class=\"line\">            k /= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    MaxHeap(<span class=\"keyword\">int</span> capacity)&#123;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> Item[capacity+<span class=\"number\">1</span>];</span><br><span class=\"line\">        count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;capacity = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Item item)</span></span>&#123;</span><br><span class=\"line\">        assert( count + <span class=\"number\">1</span> &lt;= capacity );</span><br><span class=\"line\">        <span class=\"comment\">//添加新元素</span></span><br><span class=\"line\">        data[count+<span class=\"number\">1</span>] = item;</span><br><span class=\"line\">        count ++;</span><br><span class=\"line\">        shiftUp(count);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"取出元素-Shift-Down\"><a href=\"#取出元素-Shift-Down\" class=\"headerlink\" title=\"取出元素(Shift Down)\"></a>取出元素(Shift Down)</h4><p>对于堆来说，每次只能取根节点的那个元素，在这里就是取最大的元素。</p>\n<p>取出最大的元素后，根节点的位置就空出来了，这时候把最后一个元素补充到根节点处(保证仍然是一棵完全二叉树)，此时作为计数的变量<code>count--</code>，最后一个数组中的元素可以不动，使用<code>count</code>来卡住边界。</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/shiftdown1.png\" style=\"zoom:80%;\">\n\n<p>此时数组中的元素为：</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/数组4.png\">\n\n<p>此时16也不满足最大堆的定义，接下来要调整这些元素的位置。将16一步一步的向下挪，直到合适的位置，所以叫<strong>Shift Down</strong>，不过每次下挪，有两个方向可以走，具体怎么选？<strong>需要找到子节点中更大的那个值进行交换</strong>，这样就可以保证子节点一定是不大于父节点的，过程如下：</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/shiftdown2.png\" style=\"zoom:80%;\">\n\n<p>此时数组中的元素为：</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/数组5\">\n\n<p><strong>Shift Down</strong>代码实现(在基本结构基础上)：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Item&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxHeap</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Item *data;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shiftDown</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断k是否有孩子</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于完全二叉树，有左孩子就代表一定有孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>( <span class=\"number\">2</span>*k &lt;= count )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">2</span>*k; <span class=\"comment\">// 在此轮循环中,data[k]和data[j]交换位置</span></span><br><span class=\"line\">            <span class=\"comment\">// j+1为右孩子，需要判断是否存在</span></span><br><span class=\"line\">            <span class=\"comment\">// 再判断应该和哪个孩子交换</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>( j+<span class=\"number\">1</span> &lt;= count &amp;&amp; data[j+<span class=\"number\">1</span>] &gt; data[j] ) <span class=\"comment\">// 右孩子大</span></span><br><span class=\"line\">                j ++; <span class=\"comment\">// j代表右孩子，否则为左孩子</span></span><br><span class=\"line\">            <span class=\"comment\">// data[j] 是 data[2*k]和data[2*k+1]中的最大值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>( data[k] &gt;= data[j] ) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            swap( data[k] , data[j] );</span><br><span class=\"line\">            k = j; <span class=\"comment\">// 交换后的新节点，继续Shift Down</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">Item <span class=\"title\">extractMax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        assert( count &gt; <span class=\"number\">0</span> );</span><br><span class=\"line\">        Item ret = data[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        swap( data[<span class=\"number\">1</span>] , data[count] );</span><br><span class=\"line\">        count --;</span><br><span class=\"line\">        shiftDown(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">Item <span class=\"title\">getMax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        assert( count &gt; <span class=\"number\">0</span> );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Heapify-将普通数组变为堆\"><a href=\"#Heapify-将普通数组变为堆\" class=\"headerlink\" title=\"Heapify(将普通数组变为堆)\"></a>Heapify(将普通数组变为堆)</h4><img src=\"/blog/2020/06/27/堆排序-heap-sort/数组6.png\">\n\n<p>对于以上数组，可以直接构建成堆，不用先进行插入元素，二叉树形式为下图：</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/heapify1.png\" style=\"zoom:80%;\">\n\n<p>对于上图的树来说，所有的叶子节点都是一个最大堆：</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/heapify2\" style=\"zoom:80%;\">\n\n<p>第一个非叶子节点的位置为<code>count/2</code>，即<code>10/2=5</code>，对于每个非叶子节点进行<strong>Shift Down</strong>操作。</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/heapify3\" style=\"zoom: 67%;\">\n\n<p><strong>Heapify</strong>代码实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Item&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxHeap</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Item *data;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shiftDown</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断k是否有孩子</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于完全二叉树，有左孩子就代表一定有孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>( <span class=\"number\">2</span>*k &lt;= count )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">2</span>*k; </span><br><span class=\"line\">            <span class=\"comment\">// 在此轮循环中,data[k]和data[j]交换位置</span></span><br><span class=\"line\">            <span class=\"comment\">// j+1为右孩子，需要判断是否存在</span></span><br><span class=\"line\">            <span class=\"comment\">// 再找到值更大的孩子</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>( j+<span class=\"number\">1</span> &lt;= count &amp;&amp; data[j+<span class=\"number\">1</span>] &gt; data[j] ) </span><br><span class=\"line\">                j ++;</span><br><span class=\"line\">            <span class=\"comment\">// 如果孩子中最大值小于等于父节点的值，就不用交换了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>( data[k] &gt;= data[j] ) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            swap( data[k] , data[j] );</span><br><span class=\"line\">            <span class=\"comment\">// 交换后的新节点，继续Shift Down</span></span><br><span class=\"line\">            k = j; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 根据数组直接构造最大堆</span></span><br><span class=\"line\">    MaxHeap(Item arr[], <span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> Item[n+<span class=\"number\">1</span>];</span><br><span class=\"line\">        capacity = n;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i ++ )</span><br><span class=\"line\">            data[i+<span class=\"number\">1</span>] = arr[i];</span><br><span class=\"line\">        count = n;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = count/<span class=\"number\">2</span> ; i &gt;= <span class=\"number\">1</span> ; i -- )</span><br><span class=\"line\">            shiftDown(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">Item <span class=\"title\">extractMax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        assert( count &gt; <span class=\"number\">0</span> );</span><br><span class=\"line\">        Item ret = data[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        swap( data[<span class=\"number\">1</span>] , data[count] );</span><br><span class=\"line\">        count --;</span><br><span class=\"line\">        shiftDown(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原地堆排序-从小到大\"><a href=\"#原地堆排序-从小到大\" class=\"headerlink\" title=\"原地堆排序(从小到大)\"></a>原地堆排序(从小到大)</h3><p>在之前构建一个堆需要额外的n个空间，实际上给定数组时候在原地也可以进行堆排序，过程如图所示：</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/原地1.png\" style=\"zoom:80%;\">\n\n<ul>\n<li>先对数组进行<code>Heapify</code>操作，则V就是最大值，V和W进行交换，此时最大值在末尾</li>\n<li>此时V之前的数组不再是最大堆，对W进行<code>ShiftDown</code>操作使之前的数组再次成为最大堆</li>\n<li>再次把此时的V和W(倒数第二个元素)进行交换，以此类推。</li>\n</ul>\n<p><strong>此时的索引是从0开始的</strong>，所以最后一个非叶子节点的索引为<code>(count-1)/2</code>，对于节点<strong>i</strong>，有：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">parent[i] = (i - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">left child[i] = <span class=\"number\">2</span> × i + <span class=\"number\">1</span>;</span><br><span class=\"line\">right child[i] = <span class=\"number\">2</span> × i + <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/原地2.png\" style=\"zoom:80%;\">\n\n<p>对应的数组为：</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/原地3.png\">\n\n<p>代码实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">heapsort</span><span class=\"params\">(T arr[], <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// heapify</span></span><br><span class=\"line\">    <span class=\"comment\">// from 第一个非叶子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = (n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">        __shiftDown(arr, n, i);</span><br><span class=\"line\">    <span class=\"comment\">// i最后为1，当只有也给元素时无需进行操作</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; --i)&#123;</span><br><span class=\"line\">        swap(arr[<span class=\"number\">0</span>], arr[i]);</span><br><span class=\"line\">        __shiftDown(arr, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"><span class=\"keyword\">void</span> __shiftDown(T arr[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从0开始索引，k为父节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">2</span> * k + <span class=\"number\">1</span> &lt; n)&#123; <span class=\"comment\">// 如果左孩子存在</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 以下操作是为了与左右孩子中更大的那个交换</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j + <span class=\"number\">1</span> &lt; n &amp;&amp; arr[j+<span class=\"number\">1</span>] &gt; arr[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[k] &gt;= arr[j])</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        swap(arr[k], arr[j]);</span><br><span class=\"line\">        k = j;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"索引堆-Index-Heap\"><a href=\"#索引堆-Index-Heap\" class=\"headerlink\" title=\"索引堆(Index Heap)\"></a>索引堆(Index Heap)</h3><p>当进行堆排序之后，坐标和值的关系也就不复存在了，如果我们要继续使用坐标和值之间的关系，就需要对索引进行堆排序，以最大索引堆为例：</p>\n<img src=\"/blog/2020/06/27/堆排序-heap-sort/index_heap1.png\" style=\"zoom:80%;\">\n\n<ul>\n<li><code>data</code>数组并未改变，只有<code>index</code>数组发生了改变(<strong>根据data改变index</strong>)</li>\n<li>堆顶的元素<code>index[1] = 10</code>，表示堆顶的元素是<strong>10索引</strong>所指向的<code>data[10]</code>，即62</li>\n<li>同理可得，<code>index[2] = 9</code>表示62的左孩子是<strong>9索引</strong>所指向的<code>data[9] = 41</code>，<code>index[3] = 7</code>表示62的右孩子是<strong>7索引</strong>所指向的<code>data[7] = 28</code>，以此类推</li>\n</ul>\n<p><strong>优点</strong>：只有索引<code>index整型</code>数组发生了改变，<code>data</code>并未改变，<code>data</code>的类型并没有限制</p>\n<p>对于<code>shiftDown</code>和<code>shiftUp</code>变化不大，同时可以支持返回最大值的索引值，也可以根据索引值就直接返回<code>data</code>，最重要的操作是修改数据内容。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">( <span class=\"keyword\">int</span> i , Item newItem )</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    i += <span class=\"number\">1</span>;</span><br><span class=\"line\">    data[i] = newItem;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找到indexes[j] = i, j表示data[i]在堆中的位置</span></span><br><span class=\"line\">    <span class=\"comment\">// 之后shiftUp(j), 再shiftDown(j)，再次将index构建为最大堆</span></span><br><span class=\"line\">\t<span class=\"comment\">// 这里用的是遍历，复杂度较高O(n + logn)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> j = <span class=\"number\">1</span> ; j &lt;= count ; j ++ )</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( indexes[j] == i )&#123;</span><br><span class=\"line\">            shiftUp(j);</span><br><span class=\"line\">            shiftDown(j);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优化-change\"><a href=\"#优化-change\" class=\"headerlink\" title=\"优化(change)\"></a>优化(change)</h4><img src=\"/blog/2020/06/27/堆排序-heap-sort/index_heap2.png\">\n\n<ul>\n<li><code>reverse[i]</code>表示索引<code>i</code>在<code>index</code>中的位置</li>\n<li>比如我们要查找<code>i = 4</code>这个索引在<code>index</code>中的位置，先找到<code>rev[4] = 9</code>，那么索引<code>i = 4</code>就在<code>index[9]</code>处，时间复杂度为O(1)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">indexes[i] = j;</span><br><span class=\"line\">reverse[j] = i;</span><br><span class=\"line\"></span><br><span class=\"line\">indexes[reverse[i]] = i;</span><br><span class=\"line\">reverse[indexes[i]] = i;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>swap</code>操作中需要修改<code>reverse</code></p>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    IndexMaxHeap(<span class=\"keyword\">int</span> capacity)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> Item[capacity+<span class=\"number\">1</span>];</span><br><span class=\"line\">        indexes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[capacity+<span class=\"number\">1</span>];</span><br><span class=\"line\">        reverse = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[capacity+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 初始化为0，代表不存在</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt;= capacity ; i ++ )</span><br><span class=\"line\">            reverse[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;capacity = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~IndexMaxHeap()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] data;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] indexes;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] reverse;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 传入的i对用户而言,是从0索引的</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> i, Item item)</span></span>&#123;</span><br><span class=\"line\">        assert( count + <span class=\"number\">1</span> &lt;= capacity );</span><br><span class=\"line\">        assert( i + <span class=\"number\">1</span> &gt;= <span class=\"number\">1</span> &amp;&amp; i + <span class=\"number\">1</span> &lt;= capacity );</span><br><span class=\"line\"></span><br><span class=\"line\">        i += <span class=\"number\">1</span>;</span><br><span class=\"line\">        data[i] = item;</span><br><span class=\"line\">        indexes[count+<span class=\"number\">1</span>] = i;</span><br><span class=\"line\">        reverse[i] = count+<span class=\"number\">1</span>;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\"></span><br><span class=\"line\">        shiftUp(count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 抽取最大的元素</span></span><br><span class=\"line\">    <span class=\"function\">Item <span class=\"title\">extractMax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        assert( count &gt; <span class=\"number\">0</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">        Item ret = data[indexes[<span class=\"number\">1</span>]];</span><br><span class=\"line\">        swap( indexes[<span class=\"number\">1</span>] , indexes[count] );</span><br><span class=\"line\">        <span class=\"comment\">// 此时最后一个元素没有意义了</span></span><br><span class=\"line\">        <span class=\"comment\">// 此时的堆顶的第一个元素的reverse需要更新</span></span><br><span class=\"line\">        reverse[indexes[count]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        reverse[indexes[<span class=\"number\">1</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">        shiftDown(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 抽取最大元素的坐标</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">extractMaxIndex</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        assert( count &gt; <span class=\"number\">0</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = indexes[<span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">        swap( indexes[<span class=\"number\">1</span>] , indexes[count] );</span><br><span class=\"line\">        reverse[indexes[count]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        reverse[indexes[<span class=\"number\">1</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">        shiftDown(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回最大元素的值</span></span><br><span class=\"line\">    <span class=\"function\">Item <span class=\"title\">getMax</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        assert( count &gt; <span class=\"number\">0</span> );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[indexes[<span class=\"number\">1</span>]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回最大元素的坐标</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getMaxIndex</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        assert( count &gt; <span class=\"number\">0</span> );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> indexes[<span class=\"number\">1</span>]<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 保证不越界</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">contain</span><span class=\"params\">( <span class=\"keyword\">int</span> i )</span></span>&#123;</span><br><span class=\"line\">        assert( i + <span class=\"number\">1</span> &gt;= <span class=\"number\">1</span> &amp;&amp; i + <span class=\"number\">1</span> &lt;= capacity );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reverse[i+<span class=\"number\">1</span>] != <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回i处的元素值</span></span><br><span class=\"line\">    <span class=\"function\">Item <span class=\"title\">getItem</span><span class=\"params\">( <span class=\"keyword\">int</span> i )</span></span>&#123;</span><br><span class=\"line\">        assert( contain(i) );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 改变i处的元素值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">( <span class=\"keyword\">int</span> i , Item newItem )</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        assert( contain(i) );</span><br><span class=\"line\">        i += <span class=\"number\">1</span>;</span><br><span class=\"line\">        data[i] = newItem;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = reverse[i];</span><br><span class=\"line\">        shiftUp( j );</span><br><span class=\"line\">        shiftDown( j );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>:   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shiftUp</span><span class=\"params\">( <span class=\"keyword\">int</span> k )</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>( k &gt; <span class=\"number\">1</span> &amp;&amp; data[indexes[k/<span class=\"number\">2</span>]] &lt; data[indexes[k]] )&#123;</span><br><span class=\"line\">            swap( indexes[k/<span class=\"number\">2</span>] , indexes[k] );</span><br><span class=\"line\">            reverse[indexes[k/<span class=\"number\">2</span>]] = k/<span class=\"number\">2</span>;</span><br><span class=\"line\">            reverse[indexes[k]] = k;</span><br><span class=\"line\">            k /= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shiftDown</span><span class=\"params\">( <span class=\"keyword\">int</span> k )</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>( <span class=\"number\">2</span>*k &lt;= count )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">2</span>*k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( j + <span class=\"number\">1</span> &lt;= count &amp;&amp; data[indexes[j+<span class=\"number\">1</span>]] &gt; data[indexes[j]] )</span><br><span class=\"line\">                j += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>( data[indexes[k]] &gt;= data[indexes[j]] )</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            swap( indexes[k] , indexes[j] );</span><br><span class=\"line\">            reverse[indexes[k]] = k;</span><br><span class=\"line\">            reverse[indexes[j]] = j;</span><br><span class=\"line\">            k = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用堆解决第一节问题思路\"><a href=\"#用堆解决第一节问题思路\" class=\"headerlink\" title=\"用堆解决第一节问题思路\"></a>用堆解决第一节问题思路</h3><p>使用堆实现优先队列，动态选择优先级最高的任务执行。</p>\n<p>第一节中的问题，在10000000个元素中选出前100名(在N个元素中选前M个元素)，维护一个优先队列(长度为100)，每次把最小的移除，遍历完成后，最后剩下的100个元素就是前100个元素。</p>\n<h3 id=\"完整工程\"><a href=\"#完整工程\" class=\"headerlink\" title=\"完整工程\"></a>完整工程</h3><p><a href=\"https://gitee.com/settlezxy/algorithm_and_data_structure.git\" target=\"_blank\" rel=\"noopener\">https://gitee.com/settlezxy/algorithm_and_data_structure.git</a></p>\n","categories":["算法与数据结构"]},{"title":"图论（二）","url":"/blog/2020/11/03/%E5%9B%BE%E8%AE%BA2/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>读取一个图</li>\n<li>深度优先搜索DFS</li>\n<li>广度优先搜索BFS</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"从文件中读取一个图\"><a href=\"#从文件中读取一个图\" class=\"headerlink\" title=\"从文件中读取一个图\"></a>从文件中读取一个图</h4><p>如果要从已有的文件中读取并构建一张图，需要使用到C++的IO库，使用头文件<code>fstream</code>和<code>sstream</code>，类型如下:</p>\n<p><strong>fstream:</strong></p>\n<ul>\n<li><code>ifstream, wifstream</code>从文件中读取数据</li>\n<li><code>ofstream, wofstram</code>向文件中写入数据</li>\n<li><code>fstream, wfstream</code>读写文件</li>\n</ul>\n<p><strong>sstream:</strong></p>\n<ul>\n<li><code>istringstream, wistringfstream</code>从<code>string</code>中读取数据</li>\n<li><code>ostringstream, wosringstream</code>向<code>string</code>中写入数据</li>\n<li><code>stringstream, wstringstream</code>读写<code>string</code></li>\n</ul>\n<h5 id=\"读文件—类的实现\"><a href=\"#读文件—类的实现\" class=\"headerlink\" title=\"读文件—类的实现\"></a>读文件—类的实现</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Graph&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadGraph</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ReadGraph(Graph &amp;graph, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;filename)&#123;</span><br><span class=\"line\">        <span class=\"function\">ifstream <span class=\"title\">file</span><span class=\"params\">(filename)</span></span>;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> line;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> V, E;</span><br><span class=\"line\"></span><br><span class=\"line\">        assert(file.is_open());</span><br><span class=\"line\">        assert(getline(file, line));</span><br><span class=\"line\">        <span class=\"comment\">// 首先读入顶点数和边数</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">stringstream</span> <span class=\"title\">ss</span><span class=\"params\">(line)</span></span>;</span><br><span class=\"line\">        ss &gt;&gt; V &gt;&gt; E;</span><br><span class=\"line\">        assert(V == graph.V());</span><br><span class=\"line\">        <span class=\"comment\">// 读入每一条边</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; E; ++i)&#123;</span><br><span class=\"line\">            assert(getline(file, line));</span><br><span class=\"line\">            <span class=\"function\"><span class=\"built_in\">stringstream</span> <span class=\"title\">ss</span><span class=\"params\">(line)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">            ss &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">            assert(a &gt;= <span class=\"number\">0</span> &amp;&amp; a &lt; V);</span><br><span class=\"line\">            assert(b &gt;= <span class=\"number\">0</span> &amp;&amp; b &lt; V);</span><br><span class=\"line\">            graph.addEdge(a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"测试主函数\"><a href=\"#测试主函数\" class=\"headerlink\" title=\"测试主函数\"></a>测试主函数</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> filename = <span class=\"string\">\"testG2.txt\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// G2是有6个顶点的无向图</span></span><br><span class=\"line\">    <span class=\"function\">SparseGraph <span class=\"title\">g1</span><span class=\"params\">(<span class=\"number\">6</span>, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">ReadGraph&lt;SparseGraph&gt; <span class=\"title\">readGraph1</span><span class=\"params\">(g1, filename)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 在两种头文件中新加show函数打印结果</span></span><br><span class=\"line\">    g1.show();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">DenseGraph <span class=\"title\">g2</span><span class=\"params\">(<span class=\"number\">6</span>, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">ReadGraph&lt;DenseGraph&gt; <span class=\"title\">readGraph2</span><span class=\"params\">(g2, filename)</span></span>;</span><br><span class=\"line\">    g2.show();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">vertex <span class=\"number\">0</span>:       <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">5</span></span><br><span class=\"line\">vertex <span class=\"number\">1</span>:       <span class=\"number\">0</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\">vertex <span class=\"number\">2</span>:       <span class=\"number\">0</span> <span class=\"number\">1</span></span><br><span class=\"line\">vertex <span class=\"number\">3</span>:       <span class=\"number\">1</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\">vertex <span class=\"number\">4</span>:       <span class=\"number\">1</span> <span class=\"number\">3</span></span><br><span class=\"line\">vertex <span class=\"number\">5</span>:       <span class=\"number\">0</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">vertex <span class=\"number\">0</span>:       <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span></span><br><span class=\"line\">vertex <span class=\"number\">1</span>:       <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span></span><br><span class=\"line\">vertex <span class=\"number\">2</span>:       <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\">vertex <span class=\"number\">3</span>:       <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\">vertex <span class=\"number\">4</span>:       <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\">vertex <span class=\"number\">5</span>:       <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"深度优先搜索（DFS）\"><a href=\"#深度优先搜索（DFS）\" class=\"headerlink\" title=\"深度优先搜索（DFS）\"></a>深度优先搜索（DFS）</h4><p>与二叉树的深度优先搜索遍历不同，二叉树总会遇到空，但是图可能成环，或者无向图，所以遍历时应记录每个节点是否被遍历了。</p>\n<h5 id=\"连通分量\"><a href=\"#连通分量\" class=\"headerlink\" title=\"连通分量\"></a>连通分量</h5><p>无向图Graph的极大连通子图称为G的<strong>连通分量</strong>( Connected Component)。任何<strong>连通图</strong>的连通分量只有一个，即是其自身，<strong>非连通的无向图</strong>有多个连通分量。如图所示，无向图共有4个连通分量：</p>\n<img src=\"/blog/2020/11/03/图论2/dfs1.png\">\n\n<p>对于一个非连通的无向图来说，可以用DFS得到Graph共有几个连通分量。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Graph&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Components</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Graph &amp;G;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> *visited; <span class=\"comment\">// 当前节点是否被遍历过</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ccount;\t<span class=\"comment\">// 记录连通分量总数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *id;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    \tvisited[v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    \t<span class=\"comment\">// 相当于并查集，让同一个联通分量中的节点指向同一个数</span></span><br><span class=\"line\">    \tid[v] = ccount;</span><br><span class=\"line\">    \t<span class=\"comment\">// 编译器无法判断是Graph的一个类型还是一个成员变量，需加关键字typename</span></span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">typename</span> Graph::adjIterator <span class=\"title\">adj</span><span class=\"params\">(G, v)</span></span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = adj.begin(); !adj.end(); i = adj.next())&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(!visited[i])</span><br><span class=\"line\">            \tdfs(i);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Components(Graph &amp;graph): G(graph)&#123;</span><br><span class=\"line\">        visited = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[G.V()];</span><br><span class=\"line\">        id = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[G.v()];</span><br><span class=\"line\">        ccount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G.V(); ++i)&#123;</span><br><span class=\"line\">            visited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            id[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G.V(); ++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!visited[i])&#123;</span><br><span class=\"line\">                dfs(i);</span><br><span class=\"line\">                ccount++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~Components()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] visited;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ccount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 查询两个节点是否相连</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">        assert(v &gt;= <span class=\"number\">0</span> &amp;&amp; v &lt; G.V());</span><br><span class=\"line\">        assert(w &gt;= <span class=\"number\">0</span> &amp;&amp; w &lt; G.V());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id[v] == id[w];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"测试主函数-1\"><a href=\"#测试主函数-1\" class=\"headerlink\" title=\"测试主函数\"></a>测试主函数</h6><p>对于图<code>testG1.txt</code>和<code>testG2.txt</code>，先从文件中读取到稀疏图中，再对此图进行DFS得到连通分量的个数，两个文件内容分别为：</p>\n<ul>\n<li>testG1:</li>\n</ul>\n<img src=\"/blog/2020/11/03/图论2/testG1.png\">\n\n<ul>\n<li>testG2:</li>\n</ul>\n<img src=\"/blog/2020/11/03/图论2/testG2.png\">\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> filename1 = <span class=\"string\">\"testG1.txt\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">SparseGraph <span class=\"title\">g1</span><span class=\"params\">(<span class=\"number\">13</span>, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">ReadGraph&lt;SparseGraph&gt; <span class=\"title\">readGraph1</span><span class=\"params\">(g1, filename1)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Components&lt;SparseGraph&gt; <span class=\"title\">component1</span><span class=\"params\">(g1)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"TestG1.txt, Component Count: \"</span>&lt;&lt; component1.count() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">string</span> filename2 = <span class=\"string\">\"testG2.txt\"</span>;</span><br><span class=\"line\">    <span class=\"function\">SparseGraph <span class=\"title\">g2</span><span class=\"params\">(<span class=\"number\">6</span>, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">ReadGraph&lt;SparseGraph&gt; <span class=\"title\">readGraph2</span><span class=\"params\">(g2, filename2)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Components&lt;SparseGraph&gt; <span class=\"title\">component2</span><span class=\"params\">(g2)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"TestG2.txt, Component Count: \"</span> &lt;&lt; component2.count() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">TestG1.txt, Component Count: <span class=\"number\">3</span></span><br><span class=\"line\">TestG2.txt, Component Count: <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"获得两点之间的一条路径\"><a href=\"#获得两点之间的一条路径\" class=\"headerlink\" title=\"获得两点之间的一条路径\"></a>获得两点之间的一条路径</h5><p>使用DFS可以找连通图两点之间的一条路径，但不一定是最短路径。对于稀疏图，复杂度为O(V+E)，对于稠密图，复杂度为O(V^2)。对于下图，寻找节点0到节点6的一条路径。</p>\n<img src=\"/blog/2020/11/03/图论2/dfs2.png\">\n\n<p>在遍历每个节点时，可以存储当前节点是由哪个节点遍历到的，以此可以反推出原始节点到当前节点的一条路径。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Graph&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Path</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Graph &amp;G;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s; <span class=\"comment\">// 源节点</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> *visited;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *from; <span class=\"comment\">// 当前节点是由哪个节点遍历到的</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">        visited[v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">typename</span> Graph::adjIterator <span class=\"title\">adj</span><span class=\"params\">(G, v)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = adj.begin(); !adj.end(); i = adj.next())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!visited[i])&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 节点i是由节点v遍历到的</span></span><br><span class=\"line\">                from[i] = v;</span><br><span class=\"line\">                dfs(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Path(Graph &amp;graph, <span class=\"keyword\">int</span> s): G(graph)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 算法初始化</span></span><br><span class=\"line\">        assert(s &gt;= <span class=\"number\">0</span> &amp;&amp; s &lt; G.V());</span><br><span class=\"line\"></span><br><span class=\"line\">        visited = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[G.V()];</span><br><span class=\"line\">        from = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[G.V()];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G.V(); ++i)&#123;</span><br><span class=\"line\">            visited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            from[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;s = s;</span><br><span class=\"line\">        <span class=\"comment\">// 寻路</span></span><br><span class=\"line\">        dfs(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~Path()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] visited;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] from;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">hasPath</span><span class=\"params\">(<span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">        assert( w &gt;= <span class=\"number\">0</span> &amp;&amp; w &lt; G.V() );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> visited[w];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">path</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;vec)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = w;</span><br><span class=\"line\">        <span class=\"comment\">// 找到从源节点到目标节点所经过的每一个节点入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            s.push(p);</span><br><span class=\"line\">            <span class=\"comment\">// 将p更新为可以到达p的一个节点</span></span><br><span class=\"line\">            p = from[p];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vec.clear();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!s.empty())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 出栈是正向路径</span></span><br><span class=\"line\">            vec.push_back(s.top());</span><br><span class=\"line\">            s.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPath</span><span class=\"params\">(<span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">        path(w, vec);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vec.size(); ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; vec[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == vec.size() - <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" -&gt; \"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"测试主函数-2\"><a href=\"#测试主函数-2\" class=\"headerlink\" title=\"测试主函数\"></a>测试主函数</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> filename = <span class=\"string\">\"testG2.txt\"</span>;</span><br><span class=\"line\">    SparseGraph g = SparseGraph(<span class=\"number\">7</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"function\">ReadGraph&lt;SparseGraph&gt; <span class=\"title\">readGraph</span><span class=\"params\">(g, filename)</span></span>;</span><br><span class=\"line\">    g.show();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Path&lt;SparseGraph&gt; <span class=\"title\">dfs</span><span class=\"params\">(g, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"DFS : \"</span>;</span><br><span class=\"line\">    dfs.showPath(<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">vertex <span class=\"number\">0</span>:       <span class=\"number\">1</span>       <span class=\"number\">2</span>       <span class=\"number\">5</span>       <span class=\"number\">6</span></span><br><span class=\"line\">vertex <span class=\"number\">1</span>:       <span class=\"number\">0</span></span><br><span class=\"line\">vertex <span class=\"number\">2</span>:       <span class=\"number\">0</span></span><br><span class=\"line\">vertex <span class=\"number\">3</span>:       <span class=\"number\">4</span>       <span class=\"number\">5</span></span><br><span class=\"line\">vertex <span class=\"number\">4</span>:       <span class=\"number\">3</span>       <span class=\"number\">5</span>       <span class=\"number\">6</span></span><br><span class=\"line\">vertex <span class=\"number\">5</span>:       <span class=\"number\">0</span>       <span class=\"number\">3</span>       <span class=\"number\">4</span></span><br><span class=\"line\">vertex <span class=\"number\">6</span>:       <span class=\"number\">0</span>       <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">DFS : <span class=\"number\">0</span> -&gt; <span class=\"number\">5</span> -&gt; <span class=\"number\">3</span> -&gt; <span class=\"number\">4</span> -&gt; <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"广度优先搜索（BFS）\"><a href=\"#广度优先搜索（BFS）\" class=\"headerlink\" title=\"广度优先搜索（BFS）\"></a>广度优先搜索（BFS）</h4><p>使用深度优先搜索可以找到无权图两个节点之间的最短路径，复杂度与DFS相同。</p>\n<h5 id=\"最短路径—类的实现\"><a href=\"#最短路径—类的实现\" class=\"headerlink\" title=\"最短路径—类的实现\"></a>最短路径—类的实现</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Graph&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShortestPath</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Graph &amp;G;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> *visited;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *from;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *ord; <span class=\"comment\">// 当前点到源节点的最短距离</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ShortestPath(Graph &amp;graph, <span class=\"keyword\">int</span> s): G(graph)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 算法初始化</span></span><br><span class=\"line\">        assert(s &gt;= <span class=\"number\">0</span> &amp;&amp; s &lt; G.V());</span><br><span class=\"line\"></span><br><span class=\"line\">        visited = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[graph.V()];</span><br><span class=\"line\">        from = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[graph.V()];</span><br><span class=\"line\">        ord = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[graph.V()];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; graph.V() ; i ++ )&#123;</span><br><span class=\"line\">            visited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            from[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            ord[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;s = s;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">        <span class=\"comment\">// 无向图最短路径算法</span></span><br><span class=\"line\">        q.push(s);</span><br><span class=\"line\">        visited[s] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        ord[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = q.front();</span><br><span class=\"line\">            q.pop();</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">typename</span> Graph::adjIterator <span class=\"title\">adj</span><span class=\"params\">(G, v)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = adj.begin(); !adj.end(); i = adj.next())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!visited[i])&#123;</span><br><span class=\"line\">                    q.push(i);</span><br><span class=\"line\">                    visited[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    from[i] = v;</span><br><span class=\"line\">                    ord[i] = ord[v] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~ShortestPath()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] visited;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] from;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] ord;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">hasPath</span><span class=\"params\">(<span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">        assert( w &gt;= <span class=\"number\">0</span> &amp;&amp; w &lt; G.V() );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> visited[w];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">path</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;vec)</span></span>&#123;</span><br><span class=\"line\">        assert( w &gt;= <span class=\"number\">0</span> &amp;&amp; w &lt; G.V() );</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = w;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( p != <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">            s.push(p);</span><br><span class=\"line\">            p = from[p];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vec.clear();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( !s.empty() )&#123;</span><br><span class=\"line\">            vec.push_back( s.top() );</span><br><span class=\"line\">            s.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPath</span><span class=\"params\">(<span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">        assert( w &gt;= <span class=\"number\">0</span> &amp;&amp; w &lt; G.V() );</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">        path(w, vec);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; vec.size() ; i ++ )&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;vec[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( i == vec.size()<span class=\"number\">-1</span> )</span><br><span class=\"line\">                <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\" -&gt; \"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">(<span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">        assert( w &gt;= <span class=\"number\">0</span> &amp;&amp; w &lt; G.V() );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ord[w];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"测试主函数-3\"><a href=\"#测试主函数-3\" class=\"headerlink\" title=\"测试主函数\"></a>测试主函数</h6><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> filename = <span class=\"string\">\"testG2.txt\"</span>;</span><br><span class=\"line\">    SparseGraph g = SparseGraph(<span class=\"number\">7</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"function\">ReadGraph&lt;SparseGraph&gt; <span class=\"title\">readGraph</span><span class=\"params\">(g, filename)</span></span>;</span><br><span class=\"line\">    g.show();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Path&lt;SparseGraph&gt; <span class=\"title\">dfs</span><span class=\"params\">(g,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"DFS : \"</span>;</span><br><span class=\"line\">    dfs.showPath(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">ShortestPath&lt;SparseGraph&gt; <span class=\"title\">bfs</span><span class=\"params\">(g,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"BFS : \"</span>;</span><br><span class=\"line\">    bfs.showPath(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt; <span class=\"string\">\"Shortest length : \"</span> &lt;&lt; bfs.length(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">vertex <span class=\"number\">0</span>:       <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">5</span> <span class=\"number\">6</span></span><br><span class=\"line\">vertex <span class=\"number\">1</span>:       <span class=\"number\">0</span></span><br><span class=\"line\">vertex <span class=\"number\">2</span>:       <span class=\"number\">0</span></span><br><span class=\"line\">vertex <span class=\"number\">3</span>:       <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\">vertex <span class=\"number\">4</span>:       <span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">6</span></span><br><span class=\"line\">vertex <span class=\"number\">5</span>:       <span class=\"number\">0</span> <span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\">vertex <span class=\"number\">6</span>:       <span class=\"number\">0</span> <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">DFS : <span class=\"number\">0</span> -&gt; <span class=\"number\">5</span> -&gt; <span class=\"number\">3</span> -&gt; <span class=\"number\">4</span></span><br><span class=\"line\">BFS : <span class=\"number\">0</span> -&gt; <span class=\"number\">5</span> -&gt; <span class=\"number\">4</span></span><br><span class=\"line\">Shortest Length : <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"完整工程：\"><a href=\"#完整工程：\" class=\"headerlink\" title=\"完整工程：\"></a>完整工程：</h4><p><a href=\"https://gitee.com/settlezxy/algorithm_and_data_structure.git\" target=\"_blank\" rel=\"noopener\">https://gitee.com/settlezxy/algorithm_and_data_structure.git</a></p>\n","categories":["算法与数据结构"]},{"title":"快速排序(Quick sort)","url":"/blog/2020/08/15/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-quick-sort/","content":"<h3 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h3><ol>\n<li>快速排序基本实现及优化</li>\n<li>双路快速排序</li>\n<li>三路快速排序</li>\n</ol>\n<a id=\"more\"></a>\n\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><h4 id=\"基本实现\"><a href=\"#基本实现\" class=\"headerlink\" title=\"基本实现\"></a>基本实现</h4><p>快速排序的基本思想很简单，对于<code>l</code>处的数<code>val</code>，与<code>j</code>处的数进行交换，使得坐标小于<code>j</code>的所有数都小于<code>val</code>，而位于<code>j</code>之后的数都应该大于<code>val</code>，如下图所示：</p>\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/1-1\" style=\"zoom:80%;\">\n\n<p>而实现这一操作的过程称为<code>partition</code>，具体过程如下：</p>\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/1-2\">\n\n<ol>\n<li>对于上图，<code>arr[l+1...j] &lt; v</code>，<code>arr[j+1...i-1] &gt; v</code>，当前位置<code>i</code>的值为<code>e</code>；</li>\n</ol>\n<ul>\n<li><p>如果<code>e &gt; v</code>，将<code>e</code>放在<code>&gt; v</code>后面，同时<code>i++</code>；</p>\n</li>\n<li><p>如果<code>e &lt; v</code>，将<code>i</code>处的值<code>e</code>与<code>j</code>下一个位置的值进行交换，然后<code>j++,i++</code>；</p>\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/1-3\">\n\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/1-4\">\n</li>\n</ul>\n<ol start=\"2\">\n<li>继续步骤1，会得到以下结果：</li>\n</ol>\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/1-5\">\n\n<ol start=\"3\">\n<li>此时满足<code>arr[l+1...j] &lt; v</code>，<code>arr[j+1...i-1] &gt; v</code>，再将<code>l</code>和<code>j</code>位置进行交换：</li>\n</ol>\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/1-6\">\n\n<ol start=\"4\">\n<li>重复步骤1-3，直到递归结束。</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Zxy on 2020/8/16.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"sortHelper.h\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对arr[l...r]部分进行partition操作</span></span><br><span class=\"line\"><span class=\"comment\">// 返回p，使arr[l...p-1] &lt; arr[p]; arr[p+1...r] &gt; arr[p]</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(T arr[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    T v = arr[l];</span><br><span class=\"line\">    <span class=\"comment\">// arr[l+1...j] &lt; v; arr[j+1...i) &gt; v</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始状态时两个区间都为空</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>; i &lt;= r; ++i)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 实际上当前值大于等于v时，将e都直接放在&lt;v后面</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] &lt; v)&#123;</span><br><span class=\"line\">            swap(arr[j + <span class=\"number\">1</span>], arr[i]);</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap(arr[l], arr[j]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对arr[l...r]部分进行快速排序</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> __quickSort(T arr[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = partition(arr, l, r);</span><br><span class=\"line\">    __quickSort(arr, l, p - <span class=\"number\">1</span>);</span><br><span class=\"line\">    __quickSort(arr, p + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(T arr[], <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    __quickSort(arr, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *arr = generateRandomArray(<span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">50</span>); <span class=\"comment\">// 产生10个1到50间的随机数</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前数组为：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    printArray(arr, <span class=\"number\">10</span>); <span class=\"comment\">// 打印数组</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    quickSort(arr, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后数组为：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    printArray(arr, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/1-7\">\n\n<h4 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h4><p>对于上述的快速排序算法有一个很大的缺点，如果数组近乎有序，复杂度可能退化至O(n^2)，大于<code>v</code>或者小于<code>v</code>的部分分配不均匀。比如对于数组<code>[3,1,1,2,2,2]</code>，经过第一次<code>partition</code>时，3放在了数组的末尾，左边5个数全部小于3，而右边没有大于3的数。</p>\n<p>对于这种情况，我们可以不取数组<code>l</code>处的值作为<code>v</code>，而是在数组中随机取一个值作为分界点<code>v</code>，然后再进行<code>partition</code>操作，此时快速排序复杂度的数学期望为O(nlogn)，具体的推导百度一下。修改如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(T arr[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 修改</span></span><br><span class=\"line\">    swap(arr[rand() % (r - l + <span class=\"number\">1</span>) + l], arr[l]);</span><br><span class=\"line\">    T v = arr[l];</span><br><span class=\"line\">    <span class=\"comment\">// arr[l+1...j] &lt; v; arr[j+1...i) &gt; v</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始状态时两个区间都为空</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>; i &lt;= r; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] &lt; v)&#123;</span><br><span class=\"line\">            swap(arr[j + <span class=\"number\">1</span>], arr[i]);</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap(arr[l], arr[j]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(T arr[], <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 修改</span></span><br><span class=\"line\">    srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    __quickSort(arr, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>直观的对比一下两种思路对完全随机数组和近乎有序数组的排序速度（其中<code>swap time</code>表示对于产生一个有序数组，随机取两个数进行交换，一共交换的次数）：</p>\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/1-8\">\n\n<h3 id=\"双路快速排序\"><a href=\"#双路快速排序\" class=\"headerlink\" title=\"双路快速排序\"></a>双路快速排序</h3><p>虽然解决了近乎有序数组的排序问题，但是对于数组中存在大量重复键值时，复杂度也可能退化为O(n^2)，如下图所示：</p>\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/2-1\">\n\n<p>我们之前的<code>partition</code>操作中，当前值大于等于v时，将e都直接放在小于v最后一个的后面，所以可能出现上述情况。现在我们对于等于v时两边都可以进行收缩，使得<code>partition</code>操作更加均匀：</p>\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/2-2\">\n\n<p>话不多说，看代码更容易理解：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition2</span><span class=\"params\">(T arr[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    swap(arr[rand() % (r - l + <span class=\"number\">1</span>) + l], arr[l]);</span><br><span class=\"line\">    T v = arr[l];</span><br><span class=\"line\">    <span class=\"comment\">// arr[l+1...i) &lt;= v; arr(j...r] =&gt; v</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始状态时两个区间都为空</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>, j = r;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt;= r &amp;&amp; arr[i] &lt; v) i++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &gt;= l + <span class=\"number\">1</span> &amp;&amp; arr[j] &gt; v) j--;</span><br><span class=\"line\">        <span class=\"comment\">// 此时i指向第一个大于等于v的位置，j指向最后一个小于等于v的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt; j) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        swap(arr[i], arr[j]);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap(arr[l], arr[j]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> __quickSort2(T arr[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = partition2(arr, l, r);</span><br><span class=\"line\">    __quickSort2(arr, l, p - <span class=\"number\">1</span>);</span><br><span class=\"line\">    __quickSort2(arr, p + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quickSort2</span><span class=\"params\">(T arr[], <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    __quickSort2(arr, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/2-3\">\n\n<h3 id=\"三路快速排序\"><a href=\"#三路快速排序\" class=\"headerlink\" title=\"三路快速排序\"></a>三路快速排序</h3><p>要给含有大量重复键值的数组排序同时避免对等于v的值进行交换，还可以进行三路的快速排序：</p>\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/3-1\">\n\n<p>现在根据v将数组分为三个部分，分别是：<code>arr[l+1...lt] &lt; v</code>，<code>arr[lt+1...i-1] == v</code>，<code>arr[gt...r] &gt; v</code>。</p>\n<ul>\n<li>如果<code>e == v</code>，<code>i++</code>；</li>\n<li>如果<code>e &lt; v</code>，将e和<code>lt+1</code>位置交换，同时<code>lt++，i++</code>；</li>\n<li>如果<code>e &gt; v</code>，将e和<code>gt-1</code>位置交换，成为大于v的第一个位置，<code>gt--</code>；</li>\n<li>最后将<code>l</code>和<code>lt</code>位置交换，再对小于v部分和大于v部分继续排序。</li>\n</ul>\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/3-2\">\n\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/3-3\">\n\n<p>数组中<code>arr[l...lt-1] &lt; v</code>，<code>arr[lt...gt-1] == v</code>，<code>arr[gt...r] &gt; v</code>。</p>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> __quickSort3(T arr[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    swap(arr[l], arr[rand() % (r - l +<span class=\"number\">1</span> ) + l]);</span><br><span class=\"line\">    T v = arr[l];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lt = l;     <span class=\"comment\">// arr[l+1...lt] &lt; v</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> gt = r + <span class=\"number\">1</span>; <span class=\"comment\">// arr[gt...r] &gt; v</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>;    <span class=\"comment\">// arr[lt+1...i) == v</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; gt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] &lt; v)&#123;</span><br><span class=\"line\">            swap(arr[i], arr[lt+<span class=\"number\">1</span>]);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            lt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[i] &gt; v)&#123;</span><br><span class=\"line\">            swap(arr[i], arr[gt<span class=\"number\">-1</span>]);</span><br><span class=\"line\">            gt--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> i++; <span class=\"comment\">// arr[i] == v</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap( arr[l] , arr[lt] );</span><br><span class=\"line\">    __quickSort3(arr, l, lt<span class=\"number\">-1</span>);</span><br><span class=\"line\">    __quickSort3(arr, gt, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quickSort3</span><span class=\"params\">(T arr[], <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    __quickSort3( arr, <span class=\"number\">0</span>, n<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/blog/2020/08/15/快速排序-quick-sort/3-4\">\n\n<p>双路快速排序和三路快速排序都是在对近乎有序数组优化的基础上，对数组存在大量重复键值时进行优化，所以时间复杂度都是O(nlogn)。</p>\n<h3 id=\"完整工程\"><a href=\"#完整工程\" class=\"headerlink\" title=\"完整工程\"></a>完整工程</h3><p><a href=\"https://gitee.com/settlezxy/algorithm_and_data_structure.git\" target=\"_blank\" rel=\"noopener\">https://gitee.com/settlezxy/algorithm_and_data_structure.git</a></p>\n","categories":["算法与数据结构"]},{"title":"文件管理（一）","url":"/blog/2021/01/16/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>初识文件管理</li>\n<li>文件的逻辑结构</li>\n<li>文件目录</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"初识文件管理\"><a href=\"#初识文件管理\" class=\"headerlink\" title=\"初识文件管理\"></a>初识文件管理</h4><p>文件：一组有意义的信息/数据集合。</p>\n<h5 id=\"文件的属性\"><a href=\"#文件的属性\" class=\"headerlink\" title=\"文件的属性\"></a>文件的属性</h5><p>文件名：由创建文件的用户决定，同一目录下不允许有重名文件。</p>\n<p>标识符：操作系统用于区分各个文件（文件名相同更应如此）的一种内部名称。</p>\n<p>类型：指明文件的类型。</p>\n<p>位置：文件存放的路径、在外存中的地址。</p>\n<p>大小：指明文件的大小。</p>\n<p>创建时间、上次修改时间、文件所有者信息。</p>\n<p>保护信息：对文件进行保护的访问控制信息。</p>\n<h5 id=\"文件内部数据的组织\"><a href=\"#文件内部数据的组织\" class=\"headerlink\" title=\"文件内部数据的组织\"></a>文件内部数据的组织</h5><img src=\"/blog/2021/01/16/文件管理（一）/文件内部数据的组织.png\">\n\n<h5 id=\"操作系统应该向上提供的功能\"><a href=\"#操作系统应该向上提供的功能\" class=\"headerlink\" title=\"操作系统应该向上提供的功能\"></a>操作系统应该向上提供的功能</h5><img src=\"/blog/2021/01/16/文件管理（一）/操作系统应该向上提供的功能.png\">\n\n<ul>\n<li><p>创建文件：新建后，图形化交互进程调用了<strong>create系统调用</strong>。</p>\n</li>\n<li><p>读文件：使用<strong>read系统调用</strong>，将文件数据从外存读入内存。</p>\n</li>\n<li><p>写文件：使用<strong>write系统调用</strong>，将文件数据从内存写回外存。</p>\n</li>\n<li><p>删除文件：删除后，图形化交互进程调用了<strong>delete系统调用</strong>。</p>\n</li>\n<li><p>打开文件：读/写文件之前，需要打开文件，使用<strong>open系统调用</strong>。</p>\n</li>\n<li><p>关闭文件：读/写文件结束之后，需要关闭文件，使用<strong>close系统调用</strong>。</p>\n</li>\n</ul>\n<h5 id=\"从上往下看，文件应如何存放在外存？\"><a href=\"#从上往下看，文件应如何存放在外存？\" class=\"headerlink\" title=\"从上往下看，文件应如何存放在外存？\"></a>从上往下看，文件应如何存放在外存？</h5><p>类似于内存分为一个个“内存块”，外存会分为一个个“块/磁盘块/物理块”。每个磁盘块的大小是相等的，每块一般包含2的整数幂个地址。每个存储单元对应一个物理地址。</p>\n<h5 id=\"其他需要由操作系统实现的功能\"><a href=\"#其他需要由操作系统实现的功能\" class=\"headerlink\" title=\"其他需要由操作系统实现的功能\"></a>其他需要由操作系统实现的功能</h5><ul>\n<li>文件共享：使多个用户可以共享使用要给文件。</li>\n<li>文件保护：不同的用户对文件有不同的操作权限。</li>\n</ul>\n<h5 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/16/文件管理（一）/初识文件管理小结.png\">\n\n<h4 id=\"文件的逻辑结构\"><a href=\"#文件的逻辑结构\" class=\"headerlink\" title=\"文件的逻辑结构\"></a>文件的逻辑结构</h4><img src=\"/blog/2021/01/16/文件管理（一）/文件的逻辑结构.png\" style=\"zoom:80%;\">\n\n<h5 id=\"无结构文件\"><a href=\"#无结构文件\" class=\"headerlink\" title=\"无结构文件\"></a>无结构文件</h5><p>文件内部的数据就是一系列的二进制流或字符流组成。又称<strong>流式文件</strong>。如 <code>txt</code> 文件。</p>\n<h5 id=\"有结构文件\"><a href=\"#有结构文件\" class=\"headerlink\" title=\"有结构文件\"></a>有结构文件</h5><p>由一组相似的记录组成，又称<strong>记录式文件</strong>。每条记录由若干个数据项组成，如数据库表文件。一般每条记录有一个数据项可作为<strong>关键字</strong>。根据各条记录的长度是否相等，可分为<strong>定长记录</strong>和<strong>可变长记录</strong>。</p>\n<h5 id=\"有结构文件的逻辑结构\"><a href=\"#有结构文件的逻辑结构\" class=\"headerlink\" title=\"有结构文件的逻辑结构\"></a>有结构文件的逻辑结构</h5><img src=\"/blog/2021/01/16/文件管理（一）/有结构文件的逻辑结构.png\" style=\"zoom:80%;\">\n\n<h6 id=\"顺序文件\"><a href=\"#顺序文件\" class=\"headerlink\" title=\"顺序文件\"></a>顺序文件</h6><p>文件中记录连续排列（逻辑上），记录可以是<strong>定长</strong>或<strong>可变长</strong>的。各个记录再物理上可以是<strong>顺序存储</strong>或<strong>链式存储</strong>。</p>\n<img src=\"/blog/2021/01/16/文件管理（一）/顺序文件存储方式.png\">\n\n<ul>\n<li>串结构：记录之间的顺序与关键字无关。</li>\n<li>顺序结构：记录之间的顺序按关键字顺序排列。</li>\n</ul>\n<img src=\"/blog/2021/01/16/文件管理（一）/顺序文件存储方式+结构.png\" style=\"zoom:80%;\">\n\n<p>结论：定长记录的顺序文件，若物理上采用顺序存储，可实现随机存取；若能再保证记录的顺序结构，则可实现快速检索。</p>\n<h6 id=\"索引文件\"><a href=\"#索引文件\" class=\"headerlink\" title=\"索引文件\"></a>索引文件</h6><p><strong>可变长记录</strong>文件时查找第 <code>i</code> 个记录必须先查找前 <code>i-1</code> 个记录，如何解决这个问题？</p>\n<hr>\n<p>索引表：<strong>定长记录</strong>的<strong>顺序文件</strong>，可以快速找到第 <code>i</code> 个记录对应的索引项。应用于对信息处理的及时性要求比较好的场合。</p>\n<img src=\"/blog/2021/01/16/文件管理（一）/索引表.png\" style=\"zoom:80%;\">\n\n<h6 id=\"索引顺序文件\"><a href=\"#索引顺序文件\" class=\"headerlink\" title=\"索引顺序文件\"></a>索引顺序文件</h6><p>与索引文件不同的是，不对每个记录都建立索引表项，而是<strong>一组记录对应一个索引表项</strong>。下图中，学生记录按照学生姓名的开头字母进行分组。每个分组就是一个顺序文件，分组内的记录不许眼按关键字排序。<strong>索引顺序文件指索引表中的项是按关键字排列的</strong>。</p>\n<img src=\"/blog/2021/01/16/文件管理（一）/索引顺序文件.png\" style=\"zoom:80%;\">\n\n<p><strong>多级索引顺序文件</strong></p>\n<p>为了进一步提高检索效率，可以为顺序文件建立多级索引表。</p>\n<img src=\"/blog/2021/01/16/文件管理（一）/多级索引顺序文件.png\" style=\"zoom:80%;\">\n\n<h5 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/16/文件管理（一）/文件的逻辑结构小结.png\">\n\n<h4 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h4><img src=\"/blog/2021/01/16/文件管理（一）/文件目录.png\" style=\"zoom:80%;\">\n\n<h5 id=\"文件控制块\"><a href=\"#文件控制块\" class=\"headerlink\" title=\"文件控制块\"></a>文件控制块</h5><img src=\"/blog/2021/01/16/文件管理（一）/文件控制块FCB.png\" style=\"zoom:80%;\">\n\n<p><strong>FCB</strong>的有序集合称为“文件目录”，一个<strong>FCB</strong>就是一个文件<strong>目录项</strong>。</p>\n<p><strong>FCB</strong>包含了文件的基本信息（文件名、物理地址、逻辑地址、物理结构等），存储控制信息（是否可读/可写、禁止访问的用户名单等），使用信息（文件的建立时间、修改时间等）。</p>\n<p><strong>最基本的是</strong>：文件名、文件存放的物理地址。</p>\n<p>对目录进行的操作：</p>\n<ul>\n<li>搜索：系统根据文件名搜索目录，找到该文件对应的目录项。</li>\n<li>创建文件：创建一个新文件时，需要在其所属的目录中增加一个目录项。</li>\n<li>删除文件：当删除一个文件时，需要在目录中删除对应的目录项。</li>\n<li>显示目录：用户可以请求显示目录的内容，如显示该目录中的所有文件及相应属性。</li>\n<li>修改目录：目录中保存了某些文件属性，这些属性变化时需要修改相应的目录项（如文件重命名）。</li>\n</ul>\n<h5 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h5><h6 id=\"单级目录结构\"><a href=\"#单级目录结构\" class=\"headerlink\" title=\"单级目录结构\"></a>单级目录结构</h6><p>实现了<strong>按名存取</strong>，但是<strong>不允许文件重名</strong>。不适合多用户操作系统</p>\n<img src=\"/blog/2021/01/16/文件管理（一）/单级目录结构.png\" style=\"zoom:80%;\">\n\n<h6 id=\"两级目录结构\"><a href=\"#两级目录结构\" class=\"headerlink\" title=\"两级目录结构\"></a>两级目录结构</h6><p>分为<strong>主文件目录</strong>和<strong>用户文件目录</strong>。</p>\n<img src=\"/blog/2021/01/16/文件管理（一）/两级目录结构.png\" style=\"zoom:80%;\">\n\n<h6 id=\"多级目录结构（树形目录结构）\"><a href=\"#多级目录结构（树形目录结构）\" class=\"headerlink\" title=\"多级目录结构（树形目录结构）\"></a>多级目录结构（树形目录结构）</h6><p>文件路径名是个字符串，各级目录之间用”/“隔开， 从根目录出发的路径称为<strong>绝对路径</strong>。系统根据绝对路径一层一层的找到下一级目录。树形结构<strong>不利于实现文件共享</strong>。</p>\n<img src=\"/blog/2021/01/16/文件管理（一）/多级目录结构.png\" style=\"zoom:80%;\">\n\n<p><code>自拍.jpg</code>的绝对路径为<code>/照片/2015-0/自拍.jpg</code>。找到此文件需要3次读磁盘I/O操作。</p>\n<p>每次从根目录查找很低效，可以设置<strong>当前目录</strong>，当用户访问某个文件时，可以使用<strong>从当前目录出发</strong>的<strong>相对路径</strong>。</p>\n<h6 id=\"无环图目录结构\"><a href=\"#无环图目录结构\" class=\"headerlink\" title=\"无环图目录结构\"></a>无环图目录结构</h6><img src=\"/blog/2021/01/16/文件管理（一）/无环图目录结构.png\" style=\"zoom:80%;\">\n\n<p>用户提出删除节点时，只删除该用户的PCB，并使共享计数器减1，不会直接删去共享节点。只要共有计数器减为0时才删除节点。</p>\n<h5 id=\"索引节点（FCB的改进）\"><a href=\"#索引节点（FCB的改进）\" class=\"headerlink\" title=\"索引节点（FCB的改进）\"></a>索引节点（FCB的改进）</h5><p>一般查找只需要用到<strong>文件名</strong>这个信息，文件名匹配时才需要读出文件的其他信息，所以可以使目录表包含最有用的信息来提高效率，如下图：</p>\n<img src=\"/blog/2021/01/16/文件管理（一）/索引节点.png\" style=\"zoom:80%;\">\n\n<p>存放在<strong>外存</strong>的索引节点称为<strong>磁盘索引节点</strong>，当索引节点<strong>放入内存</strong>后称为<strong>内存索引节点</strong>。内存索引节点需要增加一些信息，如：文件是否被修改，此时有几个进程在访问该文件等。</p>\n<h5 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/16/文件管理（一）/文件目录小结.png\">\n\n","categories":["操作系统"]},{"title":"并查集(Union Find)","url":"/blog/2020/09/06/%E5%B9%B6%E6%9F%A5%E9%9B%86-Union-Find/","content":"<h3 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h3><ol>\n<li>并查集的基本概念及实现(Quick_Find/Quick_Union)</li>\n<li>基于size优化与基于rank优化</li>\n<li>路径压缩</li>\n</ol>\n<a id=\"more\"></a>\n\n<h3 id=\"并查集的基本概念及实现\"><a href=\"#并查集的基本概念及实现\" class=\"headerlink\" title=\"并查集的基本概念及实现\"></a>并查集的基本概念及实现</h3><h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>并查集是一种特殊的图，较图论而言要简单一些。对于图论来说，主要解决的问题是<strong>连接问题和路径问题</strong>，而并查集只是回答前者——连接问题。比如网络节点间的连接状态，数学中集合类的实现等。</p>\n<p>并查集支持两个动作（合并两个节点，查询某个节点）：</p>\n<ul>\n<li>union(p, q)</li>\n<li>find(p)</li>\n</ul>\n<p>用来回答一个问题（两个节点是否相连接）：</p>\n<ul>\n<li>isConnected(p, q)</li>\n</ul>\n<p>并查集可以用数组来表示，基本数据表示如下（0<del>4，5</del>9互相连接）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n<th align=\"center\">6</th>\n<th align=\"center\">7</th>\n<th align=\"center\">8</th>\n<th align=\"center\">9</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">id</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<h4 id=\"基本实现-Quick-Find\"><a href=\"#基本实现-Quick-Find\" class=\"headerlink\" title=\"基本实现(Quick_Find)\"></a>基本实现(Quick_Find)</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFind1</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *id;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    UnionFind1(<span class=\"keyword\">int</span> n)&#123;</span><br><span class=\"line\">        count = n;</span><br><span class=\"line\">        id = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">            id[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~UnionFind1()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        assert(p &gt;= <span class=\"number\">0</span> &amp;&amp; p &lt; count);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id[p];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> find(p) == find(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">uoionElement</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pID = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qID = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pID == qID) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 让p指向q，复杂度O(n)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(id[i] == pID)</span><br><span class=\"line\">                id[i] = qID;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基本实现-Quick-Union\"><a href=\"#基本实现-Quick-Union\" class=\"headerlink\" title=\"基本实现(Quick_Union)\"></a>基本实现(Quick_Union)</h4><p>将每一个元素，看作是一个节点：</p>\n<img src=\"/blog/2020/09/06/并查集-Union-Find/quickUnion.png\" style=\"zoom:67%;\">\n\n<p>对于上图，将7和3连接，只需要把7的根节点指向3的根节点（反过来也行）。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i</th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n<th align=\"center\">6</th>\n<th align=\"center\">7</th>\n<th align=\"center\">8</th>\n<th align=\"center\">9</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">parent</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n</tbody></table>\n<p><code>parent[i]</code>表示<code>i</code>指向的父亲元素是谁。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFind2</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *parent;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    UnionFind2(<span class=\"keyword\">int</span> count)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;count = count;</span><br><span class=\"line\">        parent = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[count];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">            parent[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~UnionFind2()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        assert(p &gt;= <span class=\"number\">0</span> &amp;&amp; p &lt; count);</span><br><span class=\"line\">        <span class=\"comment\">// 寻找根节点，复杂度O(n)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p != parent[p])</span><br><span class=\"line\">            p = parent[p];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> find(p) == find(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">uoionElement</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRoot == qRoot) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 让p指向q，复杂度O(1)</span></span><br><span class=\"line\">        parent[pRoot] = qRoot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"并查集的优化\"><a href=\"#并查集的优化\" class=\"headerlink\" title=\"并查集的优化\"></a>并查集的优化</h3><h4 id=\"基于size的优化\"><a href=\"#基于size的优化\" class=\"headerlink\" title=\"基于size的优化\"></a>基于size的优化</h4><p>之前实现的并查集中<code>Union(p, q)</code>操作都是让p的根节点指向q，如下图：</p>\n<img src=\"/blog/2020/09/06/并查集-Union-Find/size1.png\" style=\"zoom: 80%;\">\n\n<p>如果实现<code>union(9, 4)</code>，那么9的根节点9将指向4的根节点8；相应的如果实现<code>union(4, 9)</code>则会出现将4的根节点8指向了9，如此一来，查找4的根节点需要的时间就更多了，我们完全可以在<code>union</code>操作之前进行判断，将元素少的集合的根节点指向元素多的集合的根节点，用一个数组<code>sz[i]</code>来表示以i为根集合中元素的个数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFind3</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *parent;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *sz;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    UnionFind3(<span class=\"keyword\">int</span> count)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;count = count;</span><br><span class=\"line\">        parent = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[count];</span><br><span class=\"line\">        sz = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[count];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            parent[i] = i;</span><br><span class=\"line\">            sz[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~UnionFind3()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] parent;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] sz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        assert(p &gt;= <span class=\"number\">0</span> &amp;&amp; p &lt; count);</span><br><span class=\"line\">        <span class=\"comment\">// 寻找根节点，复杂度O(n)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p != parent[p])</span><br><span class=\"line\">            p = parent[p];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> find(p) == find(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">uoionElement</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRoot == qRoot) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 基于size优化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sz[pRoot] &lt; sz[qRoot])&#123;</span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">            sz[qRoot] += sz[pRoot];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            parent[qRoot] = pRoot;</span><br><span class=\"line\">            sz[pRoot] += sz[qRoot];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基于rank的优化\"><a href=\"#基于rank的优化\" class=\"headerlink\" title=\"基于rank的优化\"></a>基于rank的优化</h4><p>基于size的优化会出现下面一个问题：</p>\n<img src=\"/blog/2020/09/06/并查集-Union-Find/rank1\" style=\"zoom:80%;\">\n\n<p>根节点为7的size是大于根节点为8的size的，所以基于size的优化会使8指向7，如下图：</p>\n<img src=\"/blog/2020/09/06/并查集-Union-Find/rank2\" style=\"zoom:80%;\">\n\n<p>这样一来，这棵树的层数变成了4，一种更合理的方式是根据当前根节点的树的高度来进行优化，如下图，这样树的层数为3：</p>\n<img src=\"/blog/2020/09/06/并查集-Union-Find/rank3\" style=\"zoom:80%;\">\n\n<p>我们可以用一个数组<code>rang[i]</code>表示根节点为i的树的高度。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFind4</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *parent;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *rank;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    UnionFind4(<span class=\"keyword\">int</span> count)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;count = count;</span><br><span class=\"line\">        parent = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[count];</span><br><span class=\"line\">        rank = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[count];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            parent[i] = i;</span><br><span class=\"line\">            rank[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~UnionFind4()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] parent;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] rank;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">        assert(p &gt;= <span class=\"number\">0</span> &amp;&amp; p &lt; count);</span><br><span class=\"line\">        <span class=\"comment\">// 寻找根节点，复杂度O(n)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p != parent[p])</span><br><span class=\"line\">            p = parent[p];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> find(p) == find(q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">uoionElement</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRoot == qRoot) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 基于size优化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rank[pRoot] &lt; rank[qRoot])&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不用维护层数</span></span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rank[pRoot] &gt; rank[qRoot])&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不用维护层数</span></span><br><span class=\"line\">            parent[qRoot] = pRoot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">            <span class=\"comment\">// rank[pRoot] == rank[qRoot]</span></span><br><span class=\"line\">            <span class=\"comment\">// 层数加1</span></span><br><span class=\"line\">            parent[pRoot] = qRoot;</span><br><span class=\"line\">            rank[qRoot]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路径压缩-Path-Compression\"><a href=\"#路径压缩-Path-Compression\" class=\"headerlink\" title=\"路径压缩(Path Compression)\"></a>路径压缩(Path Compression)</h3><p>之前我们的<code>find(p)</code>操作中，递归查找的复杂度为<code>O(1)</code>，如下图，要查找4的根节点需要4次递归：</p>\n<img src=\"/blog/2020/09/06/并查集-Union-Find/pathcompression1\" style=\"zoom:80%;\">\n\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">parent</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n</tr>\n</tbody></table>\n<p>如果将4指向3的父节点2（指向其父节点的父节点），会得到下图：</p>\n<img src=\"/blog/2020/09/06/并查集-Union-Find/pathcompression2\">\n\n<p>由于根节点指向自己，所以不会出现无效的情况，继续将p更新为<code>parent[p]</code>，得到下图：</p>\n<img src=\"/blog/2020/09/06/并查集-Union-Find/pathcompression3\">\n\n<p>这样一来，所有节点的路径都进行了压缩，查找的时间复杂度近乎是<code>O(1)</code>的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    assert(p &gt;= <span class=\"number\">0</span> &amp;&amp; p &lt; count);</span><br><span class=\"line\">    <span class=\"comment\">// 路径压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p != parent[p])&#123;</span><br><span class=\"line\">        parent[p] = parent[parent[p]];</span><br><span class=\"line\">        p = parent[p];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    assert(p &gt;= <span class=\"number\">0</span> &amp;&amp; p &lt; count);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p != parent[p])</span><br><span class=\"line\">        parent[p] = find(parent[p]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parent[p];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>对每种并查集的工程执行100w次<code>union</code>操作和100w次<code>find</code>操作：</p>\n<img src=\"/blog/2020/09/06/并查集-Union-Find/test\" style=\"zoom:80%;\">\n\n<p>区别还是很明显的。</p>\n<h3 id=\"完整工程\"><a href=\"#完整工程\" class=\"headerlink\" title=\"完整工程\"></a>完整工程</h3><p><a href=\"https://gitee.com/settlezxy/algorithm_and_data_structure.git\" target=\"_blank\" rel=\"noopener\">https://gitee.com/settlezxy/algorithm_and_data_structure.git</a></p>\n","categories":["算法与数据结构"]},{"title":"循环链表解决约瑟夫问题","url":"/blog/2019/11/18/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/","content":"<h3 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h3><ol>\n<li>编写循环链表，由单链表修改得到</li>\n<li>使用循环链表解决约瑟夫问题</li>\n</ol>\n<a id=\"more\"></a>\n\n<h3 id=\"循环链表与单链表的不同之处\"><a href=\"#循环链表与单链表的不同之处\" class=\"headerlink\" title=\"循环链表与单链表的不同之处\"></a>循环链表与单链表的不同之处</h3><p>循环链表是另外一种线性表链式存储结构，它的节点结构与单链表相同，与单链表不同的是在循环链表中的表尾节点的<code>next</code>不为空（NULL），而是指向头节点，所以循环链表为空的条件为<code>head-&gt;next==head</code>,如图所示：</p>\n<img src=\"/blog/2019/11/18/循环链表解决约瑟夫问题/非空循环链表.png\" style=\"zoom: 67%;\">\n\n<p>​                                                                                    (a)非空循环链表</p>\n<img src=\"/blog/2019/11/18/循环链表解决约瑟夫问题/空循环链表.png\" style=\"zoom: 67%;\">\n\n<p>​                                                                                        (b)空循环链表</p>\n<p>循环链表的操作与线性表的操作基本相同，只是将算法中的循环条件改为<code>temPtr</code>是否等于头指针，以下给出与单链表不同之处：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\">Node&lt;ElemType&gt; * SimpleCircLinkList&lt;ElemType&gt;::GetElemPtr(<span class=\"keyword\">int</span> <span class=\"built_in\">position</span>) <span class=\"keyword\">const</span></span><br><span class=\"line\"><span class=\"comment\">//返回指向第position个结点的指针,时间复杂度O(n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">position</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tNode&lt;ElemType&gt; *tmpPtr = head-&gt;next; <span class=\"comment\">//用tmpPtr遍历线性表以查找第position个结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pos = <span class=\"number\">1</span>;\t\t\t\t\t<span class=\"comment\">//tmpPtr所指结点的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (tmpPtr != head&amp;&amp;pos &lt; <span class=\"built_in\">position</span>)</span><br><span class=\"line\">\t&#123;\t<span class=\"comment\">//顺指针向后查找，直到tmpPtr指向第position个结点</span></span><br><span class=\"line\">\t\ttmpPtr = tmpPtr-&gt;next;</span><br><span class=\"line\">\t\tpos++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tmpPtr != head&amp;&amp;pos == <span class=\"built_in\">position</span>)</span><br><span class=\"line\">\t&#123;\t<span class=\"comment\">//查找成功</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> tmpPtr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;\t<span class=\"comment\">//查找失败</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> SimpleCircLinkList&lt;ElemType&gt;::Length() <span class=\"keyword\">const</span></span><br><span class=\"line\"><span class=\"comment\">//返回线性表元素的个数</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node&lt;ElemType&gt; *tmpPtr = head-&gt;next; tmpPtr != <span class=\"literal\">NULL</span>; tmpPtr = tmpPtr-&gt;next)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tmpPtr == head) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> SimpleCircLinkList&lt;ElemType&gt;::Empty() <span class=\"keyword\">const</span></span><br><span class=\"line\"><span class=\"comment\">//如果线性表为空，返回true，否则返回false</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> head-&gt;next == head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> SimpleCircLinkList&lt;ElemType&gt;::Traverse(<span class=\"keyword\">void</span>(*visit)(<span class=\"keyword\">const</span> ElemType &amp;)) <span class=\"keyword\">const</span></span><br><span class=\"line\"><span class=\"comment\">//依次对线性表每个元素调用函数(*visit)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node&lt;ElemType&gt; * tmpPtr = head-&gt;next; tmpPtr != head; tmpPtr = tmpPtr-&gt;next)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t(*visit)(tmpPtr-&gt;data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"循环列表解决与瑟夫问题\"><a href=\"#循环列表解决与瑟夫问题\" class=\"headerlink\" title=\"循环列表解决与瑟夫问题\"></a>循环列表解决与瑟夫问题</h3><p>问题描述：一个旅行社要从n个旅客中选出一名旅客，为他提供免费旅行服务，选择方法是让n个旅客围成一个圆圈，然后从信封中取出一张纸条，用上面写着的正整数m(m&lt;n)作为报数值，第一个人从1开始一个人一个人按顺时针报数，报到第m个旅客时，令其出列。然后从下一个人开始，从1顺时针报数，报到第m个游客时，再令其出列，如此下去，直到只剩下一个人为止。此人即为优胜者。如n=8，m=3，出列的顺序为3、6、1、5、2、8、4，最初编号为7的游客获得免费旅行服务。（待更新算法详细步骤）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">//main.cpp</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&quot;alg.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">template&lt;typename ElemType&gt;</span><br><span class=\"line\">void display(ElemType &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcout &lt;&lt; e &lt;&lt; &quot; &quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//循环链表解决约瑟夫问题</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tSimpleCircLinkList&lt;int&gt; la;</span><br><span class=\"line\">\tint n = 8, m = 3;</span><br><span class=\"line\">\tint position = 1;</span><br><span class=\"line\">\tint out, winer;</span><br><span class=\"line\">\tfor (int k = 1; k &lt;= n; k++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tla.Insert(k, k);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor (int i = 1; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfor (int j = 1; j &lt;= m; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif (position &gt; la.Length())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tposition = 1;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tposition++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tposition--;</span><br><span class=\"line\">\t\tla.Delete(position, out);</span><br><span class=\"line\">\t\tcout &lt;&lt; out &lt;&lt; &quot; &quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\tla.GetElem(1, winer);</span><br><span class=\"line\">\t\tcout &lt;&lt; endl &lt;&lt; &quot;优胜者：&quot; &lt;&lt; winer &lt;&lt; endl;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<img src=\"/blog/2019/11/18/循环链表解决约瑟夫问题/结果.png\">\n\n","categories":["算法与数据结构"]},{"title":"文件管理（三）","url":"/blog/2021/01/28/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>文件的基本操作</li>\n<li>文件共享</li>\n<li>文件保护</li>\n<li>文件系统的层次结构</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"文件的基本操作\"><a href=\"#文件的基本操作\" class=\"headerlink\" title=\"文件的基本操作\"></a>文件的基本操作</h4><h5 id=\"创建文件\"><a href=\"#创建文件\" class=\"headerlink\" title=\"创建文件\"></a>创建文件</h5><p>使用 <strong>create</strong> 系统调用，需要提供几个主要参数：</p>\n<ol>\n<li>所需的外存空间大小。</li>\n<li>文件存放路径。</li>\n<li>文件名。</li>\n</ol>\n<p>操作系统在处理 <strong>create</strong> 系统调用时，主要做了两件事：</p>\n<ol>\n<li>在外存中找到文件所需的空间（空闲链表法等）。</li>\n<li>根据文件存放路径信息找到该目录对应的目录文件，在目录中创建该文件对应的目录项。</li>\n</ol>\n<h5 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h5><p>使用 <strong>delete</strong> 系统调用，需要提供几个主要参数：</p>\n<ol>\n<li>文件存放路径。</li>\n<li>文件名。</li>\n</ol>\n<p>操作系统在处理 <strong>delete</strong> 系统调用时，主要做了三件事：</p>\n<ol>\n<li>从目录中找到文件名对应的目录项。</li>\n<li>根据目录项记录的文件信息，回收文件占用的磁盘块。</li>\n<li>从目录表中删除文件对应的目录项。</li>\n</ol>\n<h5 id=\"打开文件\"><a href=\"#打开文件\" class=\"headerlink\" title=\"打开文件\"></a>打开文件</h5><p>使用 <strong>open</strong> 系统调用，需要提供几个主要参数：</p>\n<ol>\n<li>文件存放路径。</li>\n<li>文件名。</li>\n<li>要对文件的操作类型（如：r 只读；rw 读写等）。</li>\n</ol>\n<p>操作系统在处理 <strong>open</strong> 系统调用时，主要做了两件事：</p>\n<ol>\n<li>从目录中找到文件名对应的目录项，并检查该用户是否有指定的操作权限。</li>\n<li>将目录项复制到内存中的<strong>打开文件表</strong>中。并返回对应的编号返回。之后用户使用打开文件表的编号来知名要操作的文件。这样做可以加快文件的访问速度。</li>\n</ol>\n<h5 id=\"关闭文件\"><a href=\"#关闭文件\" class=\"headerlink\" title=\"关闭文件\"></a>关闭文件</h5><p>进程使用完文件后，要关闭文件，操作系统在处理 <strong>close</strong> 系统调用时，需要做以下三件事：</p>\n<ol>\n<li>将<strong>用户进程的打开文件表</strong>相应表项删除。</li>\n<li>回收分配给该文件的内存空间等资源。</li>\n<li><strong>系统打开文件表（整个系统只有一张）</strong>的打开计数器 count 减一，若 count = 0，则删除对应表项。</li>\n</ol>\n<h5 id=\"读文件\"><a href=\"#读文件\" class=\"headerlink\" title=\"读文件\"></a>读文件</h5><p>使用 <strong>read</strong> 系统调用，需要提供几个主要参数：</p>\n<ol>\n<li>指明是哪个文件。</li>\n<li>指明要读入多少数据。</li>\n<li>指明读入的数据放在内存何处。</li>\n</ol>\n<p>操作系统从读指针指向的外存中，将用户指定大小的数据读入用户指定的内存区域中。</p>\n<h5 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h5><p>使用 <strong>write</strong> 系统调用，需要提供几个主要参数：</p>\n<ol>\n<li>指明是哪个文件。</li>\n<li>指明要写出多少数据。</li>\n<li>写回外存的数据放在内存中的什么位置。</li>\n</ol>\n<p>操作系统从用户指定的内存区域中，将指定大小的数据写回指针指向的外存。</p>\n<h5 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/28/文件管理（三）/文件基本操作小结.png\">\n\n<h4 id=\"文件共享\"><a href=\"#文件共享\" class=\"headerlink\" title=\"文件共享\"></a>文件共享</h4><p>操作系统提供给用户文件共享功能，可以让多个用户共享的使用同一个文件。</p>\n<h5 id=\"基于索引结点的共享方式（硬链接）\"><a href=\"#基于索引结点的共享方式（硬链接）\" class=\"headerlink\" title=\"基于索引结点的共享方式（硬链接）\"></a>基于索引结点的共享方式（硬链接）</h5><p>由于检索时只需用到文件名，所以将除了文件名之外的其他信息放到索引结点中，目录项仅包含文件名和索引结点指针。</p>\n<img src=\"/blog/2021/01/28/文件管理（三）/索引结点.png\" style=\"zoom:80%;\">\n\n<p>count 记录链接到本索引结点上的用户目录项数，当 count = 0 时，系统删除该文件。</p>\n<h5 id=\"基于符合链的共享方式（软链接）\"><a href=\"#基于符合链的共享方式（软链接）\" class=\"headerlink\" title=\"基于符合链的共享方式（软链接）\"></a>基于符合链的共享方式（软链接）</h5><p>使用 <strong>link</strong> 类型文件，记录<strong>文件的路径</strong>。</p>\n<img src=\"/blog/2021/01/28/文件管理（三）/符号链.png\" style=\"zoom:80%;\">\n\n<h5 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/28/文件管理（三）/文件共享小结.png\" style=\"zoom:80%;\">\n\n<h4 id=\"文件保护\"><a href=\"#文件保护\" class=\"headerlink\" title=\"文件保护\"></a>文件保护</h4><p>保护文件数据的安全。</p>\n<h5 id=\"口令保护\"><a href=\"#口令保护\" class=\"headerlink\" title=\"口令保护\"></a>口令保护</h5><p>为文件设置一个口令，用户请求访问该文件时必须提供口令。</p>\n<ul>\n<li>优点：保存口令的空间开销不多，验证口令的时间开销小。</li>\n<li>缺点：正确的口令存放在系统内部，不够安全。</li>\n</ul>\n<h5 id=\"加密保护\"><a href=\"#加密保护\" class=\"headerlink\" title=\"加密保护\"></a>加密保护</h5><p>使用某个密码对文件进行加密，访问文件时需提供正确密码。例如：异或加密。</p>\n<ul>\n<li>优点：保密性强，不需要在系统中存储密码。</li>\n<li>缺点：编/解码，加/解密需要花费一定时间。</li>\n</ul>\n<h5 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h5><p>在每个文件的 FCB 中增加一个<strong>访问控制列表（Access-Control List, ACL）</strong>，该表记录各个用户可以对该文件进行的操作。</p>\n<img src=\"/blog/2021/01/28/文件管理（三）/访问控制.png\" style=\"zoom:80%;\">\n\n<p>精简访问列表：可将用户以<strong>组</strong>为单位，来管理用户可以进行哪些操作。</p>\n<img src=\"/blog/2021/01/28/文件管理（三）/精简访问列表.png\" style=\"zoom:80%;\">\n\n<h5 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/28/文件管理（三）/文件保护小结.png\" style=\"zoom:80%;\">\n\n<h4 id=\"文件系统的层次结构\"><a href=\"#文件系统的层次结构\" class=\"headerlink\" title=\"文件系统的层次结构\"></a>文件系统的层次结构</h4><img src=\"/blog/2021/01/28/文件管理（三）/文件系统的层次结构.png\">\n\n<h5 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h5><p>某用户请求删除文件 <code>test.txt</code> ：</p>\n<ol>\n<li>用户通过操作系统提供的接口发出删除请求——<strong>用户接口</strong>。</li>\n<li>用户提供的是文件存放路径，操作系统需查找目录，找到目录项——<strong>文件目录系统</strong>。</li>\n<li>不同用户的操作权限不同，需要检查用户的权限——<strong>存取控制模块（存取控制验证层）</strong>。</li>\n<li>验证权限后，操作系统将用户提供的<strong>记录号</strong>转变为对应的逻辑地址——<strong>逻辑文件系统与文件信息缓冲区</strong>。</li>\n<li>将逻辑地址转换为物理地址——<strong>物理文件系统</strong>。</li>\n<li>要删除这条记录，需要对磁盘设备发出请求——<strong>设备管理程序模块</strong>。</li>\n<li>删除后，会有一些磁盘空闲，因此需要将其回收——<strong>辅助分配模块</strong>。</li>\n</ol>\n","categories":["操作系统"],"tags":["文件共享","文件保护"]},{"title":"文件管理（二）","url":"/blog/2021/01/20/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>文件的物理结构</li>\n<li>文件存储空间管理</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"文件的物理结构\"><a href=\"#文件的物理结构\" class=\"headerlink\" title=\"文件的物理结构\"></a>文件的物理结构</h4><p>对非空闲磁盘块的管理。磁盘中的存储单元被划分为一个个的“块、磁盘块、物理块”。<strong>磁盘块的大小与内存块、页面的大小相同</strong>。</p>\n<h5 id=\"连续分配\"><a href=\"#连续分配\" class=\"headerlink\" title=\"连续分配\"></a>连续分配</h5><p>连续分配方式要求每个文件在磁盘上占有一组连续的块。</p>\n<img src=\"/blog/2021/01/20/文件管理（二）/连续分配目录.png\">\n\n<p>优点：</p>\n<ul>\n<li>支持<strong>顺序访问和直接访问（即随机访问）</strong>。</li>\n<li>连续分配的文件在顺序访问时速度最快。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>不方便文件拓展。</li>\n<li>存储空间利用率低，会产生磁盘碎片。</li>\n</ul>\n<h5 id=\"链接分配\"><a href=\"#链接分配\" class=\"headerlink\" title=\"链接分配\"></a>链接分配</h5><p>链接分配采取<strong>离散</strong>分配的方式，可以为文件分配离散的磁盘块。分为<strong>隐式链接</strong>和显示链接。</p>\n<h6 id=\"隐式链接\"><a href=\"#隐式链接\" class=\"headerlink\" title=\"隐式链接\"></a>隐式链接</h6><p>除文件的最后一个盘块之外，每个盘块中都存有指向下一个盘块的指针。文件目录包括文件第一块的指针和最后一块的指针。</p>\n<img src=\"/blog/2021/01/20/文件管理（二）/隐式链接.png\" style=\"zoom:80%;\">\n\n<p>优点：</p>\n<ul>\n<li>方便文件拓展，不会有碎片问题，外存利用率高。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>只能顺序访问，查找效率低，指向下一个盘块的指针也需要消耗少量的存储空间。</li>\n</ul>\n<h6 id=\"显式链接\"><a href=\"#显式链接\" class=\"headerlink\" title=\"显式链接\"></a>显式链接</h6><p>把用于链接文件各物理块的指针显式地存放在一张表中，即<strong>文件分配表（FAT，File Allocation Table）</strong>。</p>\n<img src=\"/blog/2021/01/20/文件管理（二）/显式链接.png\" style=\"zoom:80%;\">\n\n<p><em>一个磁盘仅设置一张FAT，开机时，将FAT读入内存，并常驻内存</em>。</p>\n<p>优点：</p>\n<ul>\n<li>方便文件拓展，不会有碎片问题，外存利用率高，并且支持<strong>随机访问</strong>。</li>\n<li>相比于隐式链接，地址转换不需要访问磁盘，因此文件的访问效率更高。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>文件分配表需要占用一定的存储空间。</li>\n</ul>\n<h5 id=\"索引分配\"><a href=\"#索引分配\" class=\"headerlink\" title=\"索引分配\"></a>索引分配</h5><p>索引分配允许文件离散地分配在各个磁盘块中，系统会为<strong>每个文件</strong>建立一张索引表，索引表中记录了文件的各个逻辑块对应的物理块。索引表存放的磁盘块称为<strong>索引块</strong>。文件数据存放的磁盘块称为<strong>数据块</strong>。</p>\n<img src=\"/blog/2021/01/20/文件管理（二）/索引分配.png\" style=\"zoom:80%;\">\n\n<h6 id=\"链接方案\"><a href=\"#链接方案\" class=\"headerlink\" title=\"链接方案\"></a>链接方案</h6><p>如果索引表太大，一个索引块装不下，那么可以将多个索引块链接起来存放。</p>\n<img src=\"/blog/2021/01/20/文件管理（二）/索引分配-链接方案.png\" style=\"zoom:80%;\">\n\n<p>缺点：若文件很大，索引表很长，就需要将很多个索引块链接起来。想要找到 i 号索引块，必须先依次读入 0~i-1 号索引块，导致磁盘 I/O 过多，查找效率低下。</p>\n<h6 id=\"多层索引\"><a href=\"#多层索引\" class=\"headerlink\" title=\"多层索引\"></a>多层索引</h6><p>建立多层索引（类似于多级页表）。使第一层索引块指向第二层的索引块。还可根据文件大小的要求再建立第三层、第四层索引块。</p>\n<img src=\"/blog/2021/01/20/文件管理（二）/索引分配-多层索引.png\" style=\"zoom:80%;\">\n\n<p><em>采用 K 层索引结构，且顶级索引表未调入内存，则访问一个数据块只需要 K + 1 次读磁盘操作</em>。</p>\n<p>缺点：即使是小文件，访问一个数据块依然需要 K + 1 次读磁盘。</p>\n<h6 id=\"混合索引\"><a href=\"#混合索引\" class=\"headerlink\" title=\"混合索引\"></a>混合索引</h6><p>多种索引分配方式的结合。例如，一个文件的顶级索引中，既包含<strong>直接地址索引（直接指向数据块）</strong>，又包含<strong>一级、二级间接索引</strong>。</p>\n<img src=\"/blog/2021/01/20/文件管理（二）/索引分配-混合索引.png\" style=\"zoom:80%;\">\n\n<p>优点：对于小文件来说，访问要给数据块所需的读磁盘次数更少。</p>\n<h5 id=\"文件的物理结构小结\"><a href=\"#文件的物理结构小结\" class=\"headerlink\" title=\"文件的物理结构小结\"></a>文件的物理结构小结</h5><img src=\"/blog/2021/01/20/文件管理（二）/文件的物理结构小结.png\">\n\n<h4 id=\"文件存储空间管理\"><a href=\"#文件存储空间管理\" class=\"headerlink\" title=\"文件存储空间管理\"></a>文件存储空间管理</h4><p>对空闲磁盘块的管理。</p>\n<p>存储空间的初始化：将各个文件卷划分为目录区、文件区。</p>\n<ul>\n<li>目录区存放文件目录信息（FCB）、用于词牌存储空间管理的信息。</li>\n<li>文件区用于存放文件数据。</li>\n</ul>\n<h5 id=\"存储空间管理——空闲表法\"><a href=\"#存储空间管理——空闲表法\" class=\"headerlink\" title=\"存储空间管理——空闲表法\"></a>存储空间管理——空闲表法</h5><p>适用于连续分配方式。</p>\n<p><strong>如何分配连续的存储空间</strong>：与内存管理中的动态分区分配类似，为一个文件分配连续的存储空间。同样可采用首次适应、最佳适应、最坏适应等算法来决定要为文件分配哪个区间。</p>\n<p><strong>如何回收磁盘块</strong>：</p>\n<ol>\n<li>回收区前后都没有相邻空闲区。</li>\n<li>回收区的前后都是空闲区。</li>\n<li>回收区前面是空闲区。</li>\n<li>回收区后面是空闲区。</li>\n</ol>\n<p><em>回收时注意表项的合并问题</em>。</p>\n<h5 id=\"存储空间管理——空闲链表法\"><a href=\"#存储空间管理——空闲链表法\" class=\"headerlink\" title=\"存储空间管理——空闲链表法\"></a>存储空间管理——空闲链表法</h5><h6 id=\"空闲盘块链\"><a href=\"#空闲盘块链\" class=\"headerlink\" title=\"空闲盘块链\"></a>空闲盘块链</h6><img src=\"/blog/2021/01/20/文件管理（二）/空闲盘块链.png\" style=\"zoom:80%;\">\n\n<p>操作系统保存着<strong>链头、链尾指针</strong>。</p>\n<p><strong>如何分配</strong>：若某文件申请 K 个盘块，则从链头开始依次摘下 K 个盘块分配，并修改空闲链的链头指针。</p>\n<p><strong>如何回收</strong>：回收的盘块依次挂到链尾，并修改空闲链的链尾指针。</p>\n<h6 id=\"空闲盘区链\"><a href=\"#空闲盘区链\" class=\"headerlink\" title=\"空闲盘区链\"></a>空闲盘区链</h6><img src=\"/blog/2021/01/20/文件管理（二）/空闲盘区链.png\" style=\"zoom:80%;\">\n\n<p><strong>如何分配</strong>：若某文件申请 K 个盘块，可采用首次适应、最佳适应等算法从链头开始检索，找到符合的一个空闲盘区；若没有合适的连续空闲块，可将不同盘区的盘块分配给文件。</p>\n<p><strong>如何回收</strong>：若回收区和某个空闲盘区相邻，则需要将回收区合并到空闲盘区中。若回收区没有和任何空闲区相邻，将回收区作为一个单独的空闲盘区挂到链尾。</p>\n<h5 id=\"存储空间管理——位示图法\"><a href=\"#存储空间管理——位示图法\" class=\"headerlink\" title=\"存储空间管理——位示图法\"></a>存储空间管理——位示图法</h5><img src=\"/blog/2021/01/20/文件管理（二）/位示图法.png\">\n\n<p><strong>位示图</strong>：每个二进制位对应一个盘号，空闲为 0，已分配为 1。位示图用<strong>字</strong>来表示，上图字长为16。可以用<strong>（字号，位号）</strong>对应一个盘块号。</p>\n<ul>\n<li><p>$（字号，位号）=(i,j)$ 的<strong>二进制位</strong>对应的<strong>盘块号</strong> $b=n\\times i + j$。</p>\n</li>\n<li><p>$b$ 号<strong>盘块</strong>对应的<strong>字号</strong> $i=b/n$，位号 $j=b%n$。</p>\n</li>\n</ul>\n<p><strong>如何分配</strong>：若文件需要 K 个块：</p>\n<ol>\n<li>顺序扫描位示图，找到 K 个相邻或不相邻的 0。</li>\n<li>根据字号、位号算出对应的盘块号，将相应盘块分配给文件。</li>\n<li>将相应位设置为 1。</li>\n</ol>\n<p><strong>如何回收</strong>：</p>\n<ol>\n<li>根据回收的盘块号计算出对应的字号、位号。</li>\n<li>将相应的二进制位设为 0。</li>\n</ol>\n<h5 id=\"存储空间管理——成组链接法\"><a href=\"#存储空间管理——成组链接法\" class=\"headerlink\" title=\"存储空间管理——成组链接法\"></a>存储空间管理——成组链接法</h5><p>文件卷目录区用一个磁盘块作为<strong>超级块</strong>，系统启动时将其调入内存，并保证内外存超级块数据一致。</p>\n<img src=\"/blog/2021/01/20/文件管理（二）/超级块.png\">\n\n<p><strong>超级块（空闲盘块号栈）</strong></p>\n<p>① 存放下一组空闲盘块的<strong>盘块号</strong>（不超过100）。</p>\n<p>② 此组空闲盘的<strong>空闲块总数</strong> N。</p>\n<p><strong>我的理解</strong>：超级块大小等于其他块中的第一个空闲块。都是用来存储下一组空闲块信息的，主要针对<strong>分配时只剩下一个空闲块</strong>（此空闲块存储了下一组空闲块信息）或<strong>回收时已经回收够100个空闲块</strong>的特殊情况。<strong>类似于链表中的哑节点</strong>。</p>\n<img src=\"/blog/2021/01/20/文件管理（二）/超级块1.png\" style=\"zoom:120%;\">\n\n<p>最后一组的 <code>s.free[0] = -1</code>，表示空闲盘块链的结尾标志。</p>\n<p><strong>N 兼做栈顶指针</strong></p>\n<p>例如，当 <code>N = 100</code> 时，它指向<code>s.free(99)</code>，即 N 指向 <code>s.free(N - 1)</code>。</p>\n<h6 id=\"空间分配\"><a href=\"#空间分配\" class=\"headerlink\" title=\"空间分配\"></a>空间分配</h6><p>将盘块 <code>4</code> 分配给文件，先将 <code>4</code> 出栈，再将 N 减1。同理再将 <code>3</code> 分配给文件，可得：</p>\n<img src=\"/blog/2021/01/20/文件管理（二）/超级块2.png\" style=\"zoom:120%;\">\n\n<p>如果此时还要将 <code>2</code> 分配给文件（<code>2</code> 保存了下一个盘块的信息），需要进行以下操作：</p>\n<ol>\n<li>将 <code>2</code> 的信息保存到超级块中，将 <code>2</code> 分配给文件。</li>\n<li>更新指针。</li>\n</ol>\n<img src=\"/blog/2021/01/20/文件管理（二）/超级块3.png\" style=\"zoom:120%;\">\n\n<h6 id=\"空间回收\"><a href=\"#空间回收\" class=\"headerlink\" title=\"空间回收\"></a>空间回收</h6><p>假如回收盘块 <code>4</code>，先将 <code>4</code> 压入栈中，再更新 N：</p>\n<img src=\"/blog/2021/01/20/文件管理（二）/超级块4.png\" style=\"zoom:120%;\">\n\n<p>当栈满时，<strong>会将超级块的内容复制到新回收的块中</strong>，再更新指针，假如新回收的盘块为 <code>3</code>，可以得到下图:</p>\n<img src=\"/blog/2021/01/20/文件管理（二）/超级块5.png\" style=\"zoom:120%;\">\n\n<p>再根据磁盘块 <code>3</code> 更新超级块中的栈和 N，显然 N 为1，超级块指向的下一个盘块只有 <code>3</code>，将 <code>3</code> 压入栈中，此时新回收盘块 <code>2</code>，将其压入栈中，N 再加1即可：</p>\n<img src=\"/blog/2021/01/20/文件管理（二）/超级块6.png\" style=\"zoom:120%;\">\n\n<h5 id=\"文件的存储空间管理小结\"><a href=\"#文件的存储空间管理小结\" class=\"headerlink\" title=\"文件的存储空间管理小结\"></a>文件的存储空间管理小结</h5><img src=\"/blog/2021/01/20/文件管理（二）/文件的存储空间管理小结.png\">\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><p>成组链接法bilibili：<a href=\"https://www.bilibili.com/video/av71840093/\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av71840093/</a></p>\n<p>实例讲解成组链接法：<a href=\"https://blog.csdn.net/smartab/article/details/81285353\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/smartab/article/details/81285353</a></p>\n","categories":["操作系统"]},{"title":"进程管理（一）","url":"/blog/2020/11/11/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>进程的定义、组成、组织方式、特征</li>\n<li>线程</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h4><h5 id=\"一、进程的概念\"><a href=\"#一、进程的概念\" class=\"headerlink\" title=\"一、进程的概念\"></a>一、进程的概念</h5><p>多道程序环境下引入<em>进程</em>的概念，为了更好地描述和控制程序的并发执行，实现操作系统的并发行和共享性。</p>\n<ol>\n<li><p>进程控制块(Process Control Block, PCB)：描述进程的基本情况和运行状态，进而控制和管理进程，<strong>PCB是进程存在的唯一标志</strong>。</p>\n</li>\n<li><p><strong>进程映像（进程实体）</strong>由程序段、相关数据段和PCB构成，进程映像是静态的，进程是动态的。</p>\n</li>\n<li><p><strong>进程</strong>是<strong>进程实体</strong>的运行过程，是系统进行资源分配和调度的一个独立单位。</p>\n</li>\n<li><p><strong>进程的典型定义</strong>：</p>\n<ol>\n<li>进程是程序的一次执行过程</li>\n<li>进程是一个程序及其数据在处理及上顺序执行时所发生的活动</li>\n<li>进程时具有独立功能的程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"二、进程的组成\"><a href=\"#二、进程的组成\" class=\"headerlink\" title=\"二、进程的组成\"></a>二、进程的组成</h5><img src=\"/blog/2020/11/11/进程管理（一）/进程的组成.png\">\n\n<h5 id=\"三、进程的特征\"><a href=\"#三、进程的特征\" class=\"headerlink\" title=\"三、进程的特征\"></a>三、进程的特征</h5><ol>\n<li>动态性：进程是程序的一次执行过程，是动态地产生、变化和消失的，<strong>最基本特征</strong></li>\n<li>并发性：内存中有多个进程实体，各进程可并发执行</li>\n<li>独立性：进程是能独立运行、独立获得资源、独立接受调度的<strong>基本单位</strong></li>\n<li>异步性：各进程按照独立的、<strong>不可预知</strong>的速度向前推进，操作系统要提供<strong>进程同步机制</strong>来解决异步问题</li>\n<li>结构性：每个进程都会配置一个PCB，结构上看，进程由程序段、数据段、PCB组成</li>\n</ol>\n<h5 id=\"四、进程的状态与转换\"><a href=\"#四、进程的状态与转换\" class=\"headerlink\" title=\"四、进程的状态与转换\"></a>四、进程的状态与转换</h5><img src=\"/blog/2020/11/11/进程管理（一）/进程的状态.png\">\n\n<p>创建态：进程正在被创建，操作系统为进程分配资源，初始化PCB</p>\n<p>终止态：进程正在从系统中撤销，操作系统会回收进程拥有的资源、撤销PCB</p>\n<h6 id=\"进程的三种基本状态\"><a href=\"#进程的三种基本状态\" class=\"headerlink\" title=\"进程的三种基本状态\"></a>进程的三种基本状态</h6><ol>\n<li>运行态：占有CPU，并在CPU上运行（单核处理器下，每个时刻最多一个进程处于运行态）</li>\n<li>就绪态：已经具备运行条件，但由于没有空闲CPU，暂时不能运行（万事俱备，只欠CPU）</li>\n<li>阻塞态：又称等待态，进程正在等待某一事件而暂停运行，如等待某资源为可用（不包括处理机），或等待输入/输出完成。即使处理机空闲，该进程也不能运行</li>\n</ol>\n<h6 id=\"进程状态的转换\"><a href=\"#进程状态的转换\" class=\"headerlink\" title=\"进程状态的转换\"></a>进程状态的转换</h6><img src=\"/blog/2020/11/11/进程管理（一）/进程的状态转换.png\">\n\n<p>就绪态-&gt;运行态：进程被调度</p>\n<p>运行态-&gt;就绪态：时间片到，或CPU被其他高优先级的进程抢占</p>\n<p>运行态-&gt;阻塞态：等待系统分配资源，或等到某事件发生（<em>主动行为</em>）</p>\n<p>阻塞态-&gt;就绪态：资源分配到位，等待的事件发生（<em>被动行为</em>）</p>\n<h5 id=\"五、进程控制\"><a href=\"#五、进程控制\" class=\"headerlink\" title=\"五、进程控制\"></a>五、进程控制</h5><p>进程控制的主要功能是对系统中所有进程实施有效的管理，它具有创建新进程、撤销已有进程、实现进程状态转换等功能。在操作系统中，一般把进程控制用的程序段称为<strong>原语</strong>，<strong>原语</strong>的特点是在<strong>执行期间不允许中断</strong>，它是一个不可分割的基本单位，<strong>原语采用关中断指令和开中断指令实现</strong>。</p>\n<h6 id=\"进程的创建\"><a href=\"#进程的创建\" class=\"headerlink\" title=\"进程的创建\"></a>进程的创建</h6><img src=\"/blog/2020/11/11/进程管理（一）/进程的创建.png\">\n\n<h6 id=\"进程的终止\"><a href=\"#进程的终止\" class=\"headerlink\" title=\"进程的终止\"></a>进程的终止</h6><img src=\"/blog/2020/11/11/进程管理（一）/进程的终止.png\">\n\n<h6 id=\"进程的阻塞和唤醒\"><a href=\"#进程的阻塞和唤醒\" class=\"headerlink\" title=\"进程的阻塞和唤醒\"></a>进程的阻塞和唤醒</h6><p>进程的阻塞和唤醒要成对出现</p>\n<img src=\"/blog/2020/11/11/进程管理（一）/进程的阻塞和唤醒.png\">\n\n<h6 id=\"进程切换\"><a href=\"#进程切换\" class=\"headerlink\" title=\"进程切换\"></a>进程切换</h6><img src=\"/blog/2020/11/11/进程管理（一）/进程的切换.png\">\n\n<h5 id=\"六、进程通信\"><a href=\"#六、进程通信\" class=\"headerlink\" title=\"六、进程通信\"></a>六、进程通信</h5><img src=\"/blog/2020/11/11/进程管理（一）/进程通信.png\">\n\n<h6 id=\"共享存储\"><a href=\"#共享存储\" class=\"headerlink\" title=\"共享存储\"></a>共享存储</h6><p>两个进程对共享空间的访问必须是互斥的，通过操作系统提供的工具实现。操作系统只负责提供共享空间和同步互斥工具（如P、V操作）。</p>\n<p>方法：</p>\n<ol>\n<li><p>基于数据结构的共享，低级通信方式</p>\n</li>\n<li><p>基于存储区的共享，高级通信方式</p>\n</li>\n</ol>\n<h6 id=\"消息传递\"><a href=\"#消息传递\" class=\"headerlink\" title=\"消息传递\"></a>消息传递</h6><p>进程间数据交换以<strong>格式化的消息</strong>为单位，包括消息头和消息体。进程通过操作系统提供的“发送信息/接受信息”两个原语进行数据交换。</p>\n<p>方法：</p>\n<ol>\n<li>直接通信方式，发送进程将消息直接发送给接收进程，挂在接收进程的消息缓冲队列上</li>\n<li>间接通信方式，消息要先发送到中间实体（信箱）中，也称“信箱通信方式”</li>\n</ol>\n<h6 id=\"管道通信\"><a href=\"#管道通信\" class=\"headerlink\" title=\"管道通信\"></a>管道通信</h6><ol>\n<li>管道通信采用半双工，若要实现双向同时通信，需要设置两个管道</li>\n<li>各进程要互斥地访问管道</li>\n<li>管道满时，写进程write()系统调用被阻塞，等待读进程将数据取走。当读进程将数据全部取走后，管道变空，此时读进程read()被阻塞</li>\n<li>如果<strong>没写满就不允许读</strong>，如果<strong>没读空就不允许写</strong></li>\n<li>数据一旦被读出，就从管道中被抛弃，意味着读进程最多只能有一个</li>\n</ol>\n<h4 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h4><p>有的进程可能需要“同时”做很多事，而传统的进程只能串行的执行一系列程序。为此，引入了“线程”来增加并发度，<strong>引入线程后，线程成为了程序执行流的最小单位</strong>。</p>\n<p>引入线程后，进程只作为除CPU之外的系统资源的分配单位，线程则作为处理机的分配单元。</p>\n<img src=\"/blog/2020/11/11/进程管理（一）/线程.png\">\n\n<h5 id=\"一、线程的实现方式\"><a href=\"#一、线程的实现方式\" class=\"headerlink\" title=\"一、线程的实现方式\"></a>一、线程的实现方式</h5><ol>\n<li>用户级线程</li>\n</ol>\n<img src=\"/blog/2020/11/11/进程管理（一）/用户级线程.png\" style=\"zoom:80%;\">\n\n<ol start=\"2\">\n<li>内核级线程</li>\n</ol>\n<img src=\"/blog/2020/11/11/进程管理（一）/内核级线程.png\" style=\"zoom:80%;\">\n\n<ol start=\"3\">\n<li>二者组合方式，将n个用户级线程映射到m个内核级线程上（n&gt;=m）</li>\n</ol>\n<img src=\"/blog/2020/11/11/进程管理（一）/组合线程实现.png\" style=\"zoom:80%;\">\n\n<p>操作系统只“看得见”内核级线程，因此只有内核级线程才是处理机分配的单位。</p>\n<h5 id=\"二、多线程模型\"><a href=\"#二、多线程模型\" class=\"headerlink\" title=\"二、多线程模型\"></a>二、多线程模型</h5><p>有些系统同时支持用户线程和内核线程，由此产生了不同的多线程模型，即实现用户级线程和内核级线程的连接方式。</p>\n<ol>\n<li>多对一模型：多个用户级线程映射到一个内核级线程</li>\n</ol>\n<img src=\"/blog/2020/11/11/进程管理（一）/多线程1.png\" style=\"zoom:80%;\">\n\n<p>优点：用户级线程的切换在用户空间即可完成，不需要切换到核心态，线程管理的系统开销小，效率高。</p>\n<p>缺点：当一个用户级线程被阻塞后，整个进程都会被阻塞，并发度不高。多个线程不可在多核处理机上并行运行。</p>\n<ol start=\"2\">\n<li>一对一模型：一个用户级线程映射到一个内核级线程</li>\n</ol>\n<img src=\"/blog/2020/11/11/进程管理（一）/多线程2.png\" style=\"zoom:80%;\">\n\n<p>优点：当一个线程被阻塞后，别的线程还可以继续执行，并发能力强。多线程可在多核处理机上并发执行。</p>\n<p>缺点：一个用户进程会占用多个内核级线程，线程切换由操作系统内核完成，需要切换到核心态，线程管理成本高，开销大。</p>\n<ol start=\"3\">\n<li>多对多模型：n个用户级线程映射到m个内核级线程（n&gt;=m）</li>\n</ol>\n<img src=\"/blog/2020/11/11/进程管理（一）/多线程3.png\" style=\"zoom:80%;\">\n\n<p>克服了多对一模型并发度不高的缺点，又克服了一对一模型中一个用户进程占用太多内核级线程，开销太大的缺点。</p>\n","categories":["操作系统"]},{"title":"文件管理（四）","url":"/blog/2021/01/28/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%88%E5%9B%9B%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>磁盘的结构</li>\n<li>磁盘调度算法</li>\n<li>减少磁盘延迟时间的方法</li>\n<li>磁盘的管理</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"磁盘的结构\"><a href=\"#磁盘的结构\" class=\"headerlink\" title=\"磁盘的结构\"></a>磁盘的结构</h4><h5 id=\"磁盘、磁道、扇区\"><a href=\"#磁盘、磁道、扇区\" class=\"headerlink\" title=\"磁盘、磁道、扇区\"></a>磁盘、磁道、扇区</h5><p>磁盘：磁盘的表面由一些磁性物质组成，可以用这些磁性物质来记录二进制数据。</p>\n<p>磁道与扇区：</p>\n<img src=\"/blog/2021/01/28/文件管理（四）/磁道与扇区.png\" style=\"zoom:80%;\">\n\n<h5 id=\"如何在磁盘中读-写数据\"><a href=\"#如何在磁盘中读-写数据\" class=\"headerlink\" title=\"如何在磁盘中读/写数据\"></a>如何在磁盘中读/写数据</h5><p>将<strong>磁头</strong>移动到想要读/写扇区所在的磁道，磁盘转动，让目标扇区从磁头下面划过，才能完成对扇区的读/写操作。</p>\n<h5 id=\"盘面、柱面\"><a href=\"#盘面、柱面\" class=\"headerlink\" title=\"盘面、柱面\"></a>盘面、柱面</h5><img src=\"/blog/2021/01/28/文件管理（四）/盘面、柱面.png\" style=\"zoom:80%;\">\n\n<h5 id=\"磁盘的物理地址\"><a href=\"#磁盘的物理地址\" class=\"headerlink\" title=\"磁盘的物理地址\"></a>磁盘的物理地址</h5><p>地址形式：（柱面号，盘面号，扇区号）。</p>\n<p><strong>如何读写？</strong></p>\n<ol>\n<li>根据柱面号移动磁臂，让磁头指向指定柱面。</li>\n<li>激活指定盘面对应的磁头。</li>\n<li>磁盘旋转的过程中，指定的扇区会从磁头下面划过，完成读写。</li>\n</ol>\n<h5 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/28/文件管理（四）/磁盘的结构小结.png\">\n\n<h4 id=\"磁盘调度算法\"><a href=\"#磁盘调度算法\" class=\"headerlink\" title=\"磁盘调度算法\"></a>磁盘调度算法</h4><h5 id=\"一次磁盘读写操作需要的时间\"><a href=\"#一次磁盘读写操作需要的时间\" class=\"headerlink\" title=\"一次磁盘读写操作需要的时间\"></a>一次磁盘读写操作需要的时间</h5><p><strong>寻道时间</strong> $T_s$：在读写数据前，将磁头移动到指定磁道所花的时间。<br>$$<br>T_s = s + m\\times n<br>$$<br>其中，$s$ 为启动磁头臂时间；$m$ 为跨越一个磁道耗时；$n$ 为跨越磁道总数。</p>\n<p><strong>延迟时间</strong> $T_R$：通过旋转磁盘，使磁头定位到目标扇区所需要的时间。<br>$$<br>T_R = \\frac{1}{2} \\times \\frac{1}{r} = \\frac{1}{2r}<br>$$<br>其中，$\\frac{1}{2}$ 为平均找到目标扇区所走的圈数；$r$ 为磁盘转速。</p>\n<p><strong>传输时间</strong> $T_t$：从磁盘读写数据所需时间。<br>$$<br>T_t = \\frac{1}{r} \\times \\frac{b}{N} = \\frac{b}{rN}<br>$$<br>其中，$r$ 为磁盘转速；$b$ 为此次读写的字节数；$N$ 为每个磁道上的字节数。</p>\n<p><strong>后两个是磁盘固有时间消耗，无法优化</strong>。总消耗时间 $T_a$ 如下：<br>$$<br>T_a = T_s + \\frac{1}{2r} + \\frac{b}{rN}<br>$$<br><strong>消耗时间的优化主要从寻道时间入手</strong>。</p>\n<h5 id=\"先来先服务算法（FCFS）\"><a href=\"#先来先服务算法（FCFS）\" class=\"headerlink\" title=\"先来先服务算法（FCFS）\"></a>先来先服务算法（FCFS）</h5><p>根据进程请求访问磁盘的先后顺序进行调度。</p>\n<ul>\n<li>优点：公平；如果请求访问的磁道比较集中，性能还行。</li>\n<li>缺点：如果大量进程竞争使用磁盘且较分散，性能差，寻到时间长，</li>\n</ul>\n<h5 id=\"最短寻找时间优先（SSTF）\"><a href=\"#最短寻找时间优先（SSTF）\" class=\"headerlink\" title=\"最短寻找时间优先（SSTF）\"></a>最短寻找时间优先（SSTF）</h5><p>此算法优先处理与当前磁头最近的磁道。可保证每次的寻道时间最短，但不保证总寻道时间最短。</p>\n<ul>\n<li>优点：性能较好，平均寻道时间短。</li>\n<li>缺点：可能产生<strong>饥饿</strong>现象。</li>\n</ul>\n<h5 id=\"扫描算法（SCAN）\"><a href=\"#扫描算法（SCAN）\" class=\"headerlink\" title=\"扫描算法（SCAN）\"></a>扫描算法（SCAN）</h5><p>在 SSTF 算法的基础上规定：只有磁头移动到嘴最外侧磁道的时候才能往内移动，移动到最内侧磁道的时候才能往外移动，也叫电梯算法。</p>\n<ul>\n<li>优点：性能较好，平均寻道时间短，不会产生饥饿现象。</li>\n<li>缺点：①只有到最边上才会改变磁头方向；②各个位置磁道的响应频率不平均，靠边的响应频率更高一些。</li>\n</ul>\n<h5 id=\"LOOK-调度算法\"><a href=\"#LOOK-调度算法\" class=\"headerlink\" title=\"LOOK 调度算法\"></a>LOOK 调度算法</h5><p><strong>为解决 SCAN 缺点①。</strong></p>\n<p>在 SCAN 算法的基础上规定：如果在磁头移动的方向上已经没有别的请求，就可以立即改变磁头移动方向。</p>\n<ul>\n<li>优点：较 SCAN 算法寻道时间进一步缩短。</li>\n</ul>\n<h5 id=\"循环扫描算法（C-SCAN）\"><a href=\"#循环扫描算法（C-SCAN）\" class=\"headerlink\" title=\"循环扫描算法（C-SCAN）\"></a>循环扫描算法（C-SCAN）</h5><p><strong>为解决 SCAN 缺点②。</strong></p>\n<p>在 SCAN 算法的基础上规定：只有朝某个方向移动磁头时才处理磁道访问请求，返回时直接移动至起始端。</p>\n<ul>\n<li>优点：磁道响应平均。</li>\n<li>缺点：到最边上才改变磁头方向。</li>\n</ul>\n<h5 id=\"C-LOOK-调度算法\"><a href=\"#C-LOOK-调度算法\" class=\"headerlink\" title=\"C-LOOK 调度算法\"></a>C-LOOK 调度算法</h5><p>在 C-SCAN 算法的基础上规定：如果磁头移动的方向上已经没有磁道访问请求了，可以让磁头立即返回有磁道访问请求的位置。</p>\n<h5 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/28/文件管理（四）/磁盘调度算法小结.png\">\n\n<h4 id=\"减少延迟时间的方法\"><a href=\"#减少延迟时间的方法\" class=\"headerlink\" title=\"减少延迟时间的方法\"></a>减少延迟时间的方法</h4><p>磁头读入一个扇区数据后需要一小段时间处理，如果逻辑上相邻的扇区在物理上也相邻，则读入几个连续的逻辑扇区，需要较长延迟时间。</p>\n<h5 id=\"交替编号\"><a href=\"#交替编号\" class=\"headerlink\" title=\"交替编号\"></a>交替编号</h5><p>让逻辑上相邻的扇区在物理上有一定的间隔，可以使读取连续的逻辑扇区所需要的延迟时间更小。</p>\n<img src=\"/blog/2021/01/28/文件管理（四）/交替编号.png\" style=\"zoom:80%;\">\n\n<h5 id=\"错位命名\"><a href=\"#错位命名\" class=\"headerlink\" title=\"错位命名\"></a>错位命名</h5><p>相邻盘面的扇区编号错位。</p>\n<img src=\"/blog/2021/01/28/文件管理（四）/错位命名.png\" style=\"zoom:80%;\">\n\n<h5 id=\"磁盘地址结构的设计\"><a href=\"#磁盘地址结构的设计\" class=\"headerlink\" title=\"磁盘地址结构的设计\"></a>磁盘地址结构的设计</h5><p>为什么磁盘的物理地址是 （柱面号，盘面号，扇区号）而不是（盘面号，柱面号，扇区号）？</p>\n<p>答：读取地址连续的磁盘块时，采用前者可以减少磁头移动消耗的时间。</p>\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><img src=\"/blog/2021/01/28/文件管理（四）/减少延迟时间的方法.png\">\n\n<h4 id=\"磁盘的管理\"><a href=\"#磁盘的管理\" class=\"headerlink\" title=\"磁盘的管理\"></a>磁盘的管理</h4><h5 id=\"磁盘初始化\"><a href=\"#磁盘初始化\" class=\"headerlink\" title=\"磁盘初始化\"></a>磁盘初始化</h5><ol>\n<li>低级初始化（物理格式化）：将磁盘的各个磁道划分为扇区。一个扇区分为 头、数据区域（如512B大小）、尾 三个部分。</li>\n<li>将磁盘分区，每个分区由若干<strong>柱面</strong>组成（C、D、E盘等）。</li>\n<li>逻辑格式化，创建文件系统。创建文件根目录，初始化存储空间管理所用的数据结构，如位示图、空闲分区表等。</li>\n</ol>\n<h5 id=\"引导块\"><a href=\"#引导块\" class=\"headerlink\" title=\"引导块\"></a>引导块</h5><p>计算机开机时需要初始化，通过执行<strong>初始化程序（自举程序）</strong>完成。</p>\n<img src=\"/blog/2021/01/28/文件管理（四）/自举程序.png\" style=\"zoom:80%;\">\n\n<p>完整的自举程序放在磁盘的启动块（引导块/启动分区）上，启动块位于磁盘的固定位置，拥有启动分区的磁盘称为启动磁盘或系统磁盘（C盘）。</p>\n<h5 id=\"坏块的管理\"><a href=\"#坏块的管理\" class=\"headerlink\" title=\"坏块的管理\"></a>坏块的管理</h5><p>简单磁盘可以在<strong>逻辑格式化</strong>时，对磁盘进行坏块检查，标明坏扇区，如：在 FAT 表上标明，坏块对操作系统不透明。</p>\n<p>复杂磁盘会有一个<strong>磁盘控制器</strong>（磁盘中的一个硬件）来维护坏块链表。同时会保留一些“备用扇区”，用于替换坏块。此种方式坏块对操作系统透明。</p>\n<h5 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h5><img src=\"/blog/2021/01/28/文件管理（四）/磁盘的管理.png\">","categories":["操作系统"],"tags":["磁盘"]},{"title":"转载：时间复杂度O(logn)意味着什么？（侵删）","url":"/blog/2020/01/01/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6O-logn-%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88%EF%BC%9F%EF%BC%88%E4%BE%B5%E5%88%A0%EF%BC%89/","content":"<p>&nbsp;</p>\n<ul><li>原文地址：https://github.com/xitu/gold-miner/blob/master/TODO/what-does-the-time-complexity-o-log-n-actually-mean.md</li>\n    <li>原文作者：<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fhackernoon.com%2F%40maazrk\" rel=\"noopener\" target=\"_blank\">Maaz</a></li>\n    <li>译文出自：<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner\" rel=\"noopener\" target=\"_blank\">掘金翻译计划</a></li>\n    <li>译者：<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fcdpath\" rel=\"noopener\" target=\"_blank\">cdpath</a></li>\n    <li>校对者：<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fzaraguo\" rel=\"noopener\" target=\"_blank\">zaraguo (zaraguo)</a>,&nbsp;<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fwhatbeg\" rel=\"noopener\" target=\"_blank\">whatbeg (Qiu Hu)</a></li>\n</ul><p>&nbsp;</p>\n\n<a id=\"more\"></a>\n\n<p><em>友情提示：如果图片挂了，请翻墙或者点击原文地址阅读。</em></p>\n<p>&nbsp;</p>\n<p>预先知道算法的复杂度是一回事，了解其后的原理是另一件事情。</p>\n<p>&nbsp;</p>\n<p>不管你是计算机科班出身还是想有效解决最优化问题，如果想要用自己的知识解决实际问题，你都必须理解时间复杂度。</p>\n<p>先从简单直观的 O(1) 和 O(n) 复杂度说起。O(1) 表示一次操作即可直接取得目标元素（比如字典或哈希表），O(n) 意味着先要检查 n 个元素来搜索目标，但是 O(log n) 是什么意思呢？</p>\n<p>你第一次听说 O(log n) 时间复杂度可能是在学二分搜索算法的时候。二分搜索一定有某种行为使其时间复杂度为 log n。我们来看看是二分搜索是如何实现的。</p>\n<p>因为在最好情况下二分搜索的时间复杂度是 O(1)，最坏情况（平均情况）下 O(log n)，我们直接来看最坏情况下的例子。已知有 16 个元素的有序数组。</p>\n<p>举个最坏情况的例子，比如我们要找的是数字 13。</p>\n<p><img alt class=\"has\" src=\"https://img-blog.csdnimg.cn/20191121164646526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMzk2ODY0Mjg1,size_16,color_FFFFFF,t_70\"></p>\n<p>十六个元素的有序数组</p>\n<p><img alt class=\"has\" src=\"https://img-blog.csdnimg.cn/20191121164704291.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMzk2ODY0Mjg1,size_16,color_FFFFFF,t_70\"></p>\n<p>选中间的元素作为中心点（长度的一半）</p>\n<p><img alt class=\"has\" height=\"191\" src=\"https://img-blog.csdnimg.cn/20191121164715238.jpeg\" width=\"628\"></p>\n<p>13 小于中心点，所以不用考虑数组的后一半</p>\n<p><img alt class=\"has\" height=\"134\" src=\"https://img-blog.csdnimg.cn/20191121164726473.jpeg\" width=\"411\"></p>\n<p>重复这个过程，每次都寻找子数组的中间元素</p>\n<p>&nbsp;</p>\n<p><img alt class=\"has\" height=\"101\" src=\"https://img-blog.csdnimg.cn/20191121164751215.jpeg\" width=\"285\"></p>\n<p><img alt class=\"has\" height=\"91\" src=\"https://img-blog.csdnimg.cn/20191121164811565.jpeg\" width=\"223\"></p>\n<p>每次和中间元素比较都会使搜索范围减半。</p>\n<p>所以为了从 16 个元素中找到目标元素，我们需要把数组平均分割 4 次，也就是说，</p>\n<p><img alt class=\"has\" height=\"141\" src=\"https://img-blog.csdnimg.cn/20191121164824637.png\" width=\"288\"></p>\n<p>简化后的公式</p>\n<p>类似的，如果有 n 个元素，</p>\n<p><img alt class=\"has\" height=\"141\" src=\"https://img-blog.csdnimg.cn/20191121164908192.png\" width=\"301\"></p>\n<p>&nbsp;</p>\n<p>归纳一下</p>\n<p><img alt class=\"has\" height=\"141\" src=\"https://img-blog.csdnimg.cn/20191121164916433.png\" width=\"275\"></p>\n<p>分子和分母代入指数</p>\n<p><img alt class=\"has\" height=\"141\" src=\"https://img-blog.csdnimg.cn/20191121164930660.png\" width=\"275\"></p>\n<p>等式两边同时乘以 2^k</p>\n<p><img alt class=\"has\" height=\"100\" src=\"https://img-blog.csdnimg.cn/20191121164955503.png\" width=\"285\"></p>\n<p>最终结果</p>\n<p>现在来看看「对数」的定义：</p>\n<blockquote>\n<p>为使某数（底数）等于一给定数而必须取的乘幂的幂指数。</p>\n</blockquote>\n\n<p>也就是说可以写成这种形式</p>\n<p><img alt class=\"has\" height=\"87\" src=\"https://img-blog.csdnimg.cn/2019112116500667.png\" width=\"331\"></p>\n<p>对数形式</p>\n<p>所以 log n 的确是有意义的，不是吗？没有其他什么可以表示这种行为。</p>\n<p>就这样吧，我希望我讲得这些你都搞懂了。在从事计算机科学相关的工作时，了解这类知识总是有用的（而且很有趣）。说不定就因为你知道算法的原理，你成了小组里能找出问题的最优解的人呢，谁知道呢。祝好运！</p>","categories":["转载"],"tags":["时间复杂度"]},{"title":"进程管理（三）","url":"/blog/2020/12/04/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>进程同步、进程互斥</li>\n<li>进程互斥软件/硬件实现方法</li>\n<li>信号量机制及用其实现进程同步等</li>\n<li>管程</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"进程同步、进程互斥\"><a href=\"#进程同步、进程互斥\" class=\"headerlink\" title=\"进程同步、进程互斥\"></a>进程同步、进程互斥</h4><h5 id=\"进程同步\"><a href=\"#进程同步\" class=\"headerlink\" title=\"进程同步\"></a>进程同步</h5><p>进程异步性：指各并发执行的进程以各自独立的、不可预知的速度向前推进。</p>\n<p>进程同步：指为完成某种任务而建立的两个或多个进程，这些进程因为需要再某些位置上协调它们的工作次序而产生制约关系。</p>\n<h5 id=\"进程互斥\"><a href=\"#进程互斥\" class=\"headerlink\" title=\"进程互斥\"></a>进程互斥</h5><p>临界资源：一个时间段内只允许一个进程使用的资源。如摄像头、打印机等。对临界资源的访问必须<strong>互斥</strong>的进行。</p>\n<p>进程互斥：指当一个进程访问某临界资源时，另一个想要访问该临界资源的进程必须等待。当前访问临界资源的进程访问结束，释放该资源后，另一个进程才能去访问临界资源。</p>\n<p>对临界资源的互斥访问，可以在逻辑上分为如下四个部分：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">\tentry section; <span class=\"comment\">// 进入区</span></span><br><span class=\"line\">    critical section; <span class=\"comment\">// 临界区</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> section; <span class=\"comment\">// 退出区</span></span><br><span class=\"line\">    remainder section;<span class=\"comment\">// 剩余区</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>进入区：检查是否可以进入临界区，若可以进入，则设置正在访问临界资源的标志（上锁），防止其他进程同时进入临界区。</li>\n<li>临界区：访问临界资源的代码。</li>\n<li>退出区：解除正在访问临界资源的标志（解锁）。</li>\n<li>剩余区：做其他处理。</li>\n</ol>\n<p><em>临界区时进程中访问临界资源的代码段。</em></p>\n<p><em>进入区和退出区是负责实现互斥的代码段。</em></p>\n<p>实现对临界资源的互斥访问需要遵循以下四项原则：</p>\n<ol>\n<li>空闲让进。</li>\n<li>忙则等待。</li>\n<li>有限等待，请求访问的进程在有限时间内进入临界区（保证不会饥饿）。</li>\n<li>让权等待，进程不能进入临界区时，应立即释放处理机，防止进程忙等待。</li>\n</ol>\n<img src=\"/blog/2020/12/04/进程管理（三）/同步与互斥.png\" style=\"zoom:120%;\">\n\n<h4 id=\"进程互斥软件-硬件实现方法\"><a href=\"#进程互斥软件-硬件实现方法\" class=\"headerlink\" title=\"进程互斥软件/硬件实现方法\"></a>进程互斥软件/硬件实现方法</h4><h5 id=\"软件实现方法\"><a href=\"#软件实现方法\" class=\"headerlink\" title=\"软件实现方法\"></a>软件实现方法</h5><h6 id=\"单标志法\"><a href=\"#单标志法\" class=\"headerlink\" title=\"单标志法\"></a>单标志法</h6><p>实现思想：两个进程在<strong>访问完临界区后</strong>会把临界区的使用权转交给另一个进程，<strong>每个进程进入临界区的权限只能被另一个进程赋予</strong>。</p>\n<p>主要问题：违背<strong>空闲让进</strong>原则。</p>\n<h6 id=\"双标志先检查\"><a href=\"#双标志先检查\" class=\"headerlink\" title=\"双标志先检查\"></a>双标志先检查</h6><p>实现思想：<strong>设置</strong>一个布尔型数组<code>flag[]</code>，数组中各个元素用来<strong>标记各进程想要进入临界区的意愿</strong>，比如<code>flag[0]=true</code>表示着0号进程P0想要进入临界区。每个进程在进入临界区之前先看有没有别的进程想要进入临界区，没有就将自身的<code>flag[i]</code>置为<code>true</code>，之后开始访问临界区。</p>\n<p>主要问题：违反<strong>忙则等待</strong>原则。原因在于进入区的检查和上锁不是一气呵成的，在<strong>检查后，上锁前</strong>可能发生进程切换。</p>\n<h6 id=\"双标志后检查\"><a href=\"#双标志后检查\" class=\"headerlink\" title=\"双标志后检查\"></a>双标志后检查</h6><p>实现思想：对比双标志先检查法，先进行上锁再进行检查。</p>\n<p>主要问题：虽然解决了<strong>忙则等待</strong>，但是违背了<strong>空闲让进</strong>和<strong>有限等待</strong>原则，会因各进程都长期无法访问临界资源而产生<strong>饥饿</strong>现象。</p>\n<h6 id=\"Peterson算法\"><a href=\"#Peterson算法\" class=\"headerlink\" title=\"Peterson算法\"></a>Peterson算法</h6><p>实现思想：对比双标志后检查法，如果双方都争着想进入临界区，可以让进程主动让对方先使用临界区。</p>\n<p>主要问题：违背了<strong>让权等待</strong>原则。</p>\n<img src=\"/blog/2020/12/04/进程管理（三）/进程互斥的软件实现方法.png\" style=\"zoom:120%;\">\n\n<h5 id=\"硬件实现方法\"><a href=\"#硬件实现方法\" class=\"headerlink\" title=\"硬件实现方法\"></a>硬件实现方法</h5><h6 id=\"中断屏蔽方法\"><a href=\"#中断屏蔽方法\" class=\"headerlink\" title=\"中断屏蔽方法\"></a>中断屏蔽方法</h6><p>实现思想：利用”开/关中断指令“实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">关中断；// 关中断后不允许当前进程被中断，也必然不会发生进程切换</span><br><span class=\"line\">临界区；</span><br><span class=\"line\">开中断；// 直到当前进程访问完临界区，再执行开中断指令，才有可能有别的进程上处理机并访问临界区</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优点：简单、高效。</li>\n<li>缺点：不适用于对处理机；只适用于操作系统内核进程，不适用于用户进程。</li>\n</ul>\n<h6 id=\"TestAndSet-TS指令-TSL指令\"><a href=\"#TestAndSet-TS指令-TSL指令\" class=\"headerlink\" title=\"TestAndSet(TS指令/TSL指令)\"></a>TestAndSet(TS指令/TSL指令)</h6><p>简称TS指令，也称TestAndSetLock指令，或TSL指令。</p>\n<p>主要思想：使用硬件实现，将上锁和检查操作变为原子操作，执行过程中不允许被中断。</p>\n<ul>\n<li>优点：实现简单，适用于多处理机环境。</li>\n<li>缺点：不满足<strong>让权等待</strong>原则，暂时无法进入临界区的进程会占用CPU并循环执行TSL指令，从而导致”忙等“。</li>\n</ul>\n<h6 id=\"Swap指令-XCHG指令\"><a href=\"#Swap指令-XCHG指令\" class=\"headerlink\" title=\"Swap指令(XCHG指令)\"></a>Swap指令(XCHG指令)</h6><p>也叫Exchange指令，或者XCHG指令。</p>\n<p>逻辑上与TS指令相同。</p>\n<img src=\"/blog/2020/12/04/进程管理（三）/进程互斥的硬件实现方法.png\" style=\"zoom:120%;\">\n\n<h4 id=\"信号量机制\"><a href=\"#信号量机制\" class=\"headerlink\" title=\"信号量机制\"></a>信号量机制</h4><p>信号量机制时一种功能较强的机制，可以用来解决互斥和同步问题，它只能被两个标准的原语<code>wait(S)</code>和<code>signal(S)</code>访问，简称<strong>P操作</strong>和<strong>V操作</strong>。</p>\n<p>信号量其实就是一个变量，可以是一个整数，也可以是更复杂的记录型变量，可以用一个信号量来<strong>表示系统中某种资源的数量</strong>。</p>\n<h5 id=\"整型信号量\"><a href=\"#整型信号量\" class=\"headerlink\" title=\"整型信号量\"></a>整型信号量</h5><p>用一个整数型的变量作为信号量，用来表示系统中某种资源的数量。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> S = <span class=\"number\">1</span>; <span class=\"comment\">// 表示当前系统中可用的打印机数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">(<span class=\"keyword\">int</span> S)</span></span>&#123; <span class=\"comment\">// wait原语，相当于进入区</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(S &lt;= <span class=\"number\">0</span>); <span class=\"comment\">// 资源不够，等待</span></span><br><span class=\"line\">    S = S - <span class=\"number\">1</span>; <span class=\"comment\">// 资源够，占用一个资源</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">signal</span><span class=\"params\">(<span class=\"keyword\">int</span> S)</span></span>&#123; <span class=\"comment\">// signal原语，相当于退出区 </span></span><br><span class=\"line\">    S = S + <span class=\"number\">1</span>; <span class=\"comment\">// 使用完资源后，在退出区释放资源</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>与普通整数变量的区别：对信号量的操作只有三种，即初始化、P操作、V操作。</li>\n<li><strong>检查</strong>和<strong>上锁</strong>一气呵成，避免并发、异步导致的问题。</li>\n<li>存在问题：不满足<strong>让权等待</strong>原则，会发生<strong>忙等</strong>。</li>\n</ol>\n<h5 id=\"记录型信号量\"><a href=\"#记录型信号量\" class=\"headerlink\" title=\"记录型信号量\"></a>记录型信号量</h5><p>用记录型数据结构表示的信号量。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*记录型信号量的定义*/</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> value; <span class=\"comment\">// 剩余资源数</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">process</span> *<span class=\"title\">L</span>;</span><span class=\"comment\">// 等待队列</span></span><br><span class=\"line\">&#125; semaphore;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*某进程需要资源时，通过wait原语申请*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">(semaphore S)</span></span>&#123;</span><br><span class=\"line\">    S.value--;</span><br><span class=\"line\">    <span class=\"comment\">// 如果剩余资源不够，使用block原语使进程由运行态进入阻塞态</span></span><br><span class=\"line\">    <span class=\"comment\">// 并将其挂到信号量S的等待队列（即阻塞队列）中</span></span><br><span class=\"line\">    <span class=\"comment\">// 遵循了让权等待原则，不会出现忙等</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.value &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\tblock(S.L);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*进程使用完资源后，通过signal原语释放*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">signal</span><span class=\"params\">(semaphore S)</span></span>&#123;</span><br><span class=\"line\">    S.value++;</span><br><span class=\"line\">    <span class=\"comment\">// 释放完资源后，若还有别的进程在等待这种资源</span></span><br><span class=\"line\">    <span class=\"comment\">// 则使用wakeup原语唤醒等待队列中的一个进程，该进程从阻塞态变为就绪态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.value &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\twakeup(S.L);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"用信号量机制实现进程互斥、同步、前驱关系\"><a href=\"#用信号量机制实现进程互斥、同步、前驱关系\" class=\"headerlink\" title=\"用信号量机制实现进程互斥、同步、前驱关系\"></a>用信号量机制实现进程互斥、同步、前驱关系</h5><h6 id=\"进程互斥-1\"><a href=\"#进程互斥-1\" class=\"headerlink\" title=\"进程互斥\"></a>进程互斥</h6><ol>\n<li>分析并发进程的关键活动，划定临界区（如：对临界资源打印机的访问就应放在临界区）。</li>\n<li>设置<strong>互斥信号量</strong>mutex，<strong>初始值为1</strong>。</li>\n<li>在临界区之前执行P(mutex)。</li>\n<li>在临界区之后执行V(mutex)。</li>\n</ol>\n<p><em>注意：对不同的临界资源需要设置不同的互斥信号量，P、V操作必须成对出现</em>。</p>\n<h6 id=\"进程同步-1\"><a href=\"#进程同步-1\" class=\"headerlink\" title=\"进程同步\"></a>进程同步</h6><ol>\n<li>分析什么地方需要实现”同步关系“，即必须保证”一前一后“执行的两个操作（或两句代码）。</li>\n<li>设置<strong>同步信号量</strong>S，<strong>初始值为0</strong>。</li>\n<li>在”前操作”之后执行V(S)。</li>\n<li>在”后操作“之前执行P(S)。</li>\n</ol>\n<h6 id=\"信号量机制实现前驱关系\"><a href=\"#信号量机制实现前驱关系\" class=\"headerlink\" title=\"信号量机制实现前驱关系\"></a>信号量机制实现前驱关系</h6><p>其实每一对前驱关系都是一个进程同步问题（需要保证一前一后操作）。</p>\n<ol>\n<li>要为每一对前驱关系各设置一个同步变量。</li>\n<li>在”前操作“之后对相应的同步变量执行V操作。</li>\n<li>在”后操作“之前对相应的同步变量执行P操作。</li>\n</ol>\n<img src=\"/blog/2020/12/04/进程管理（三）/信号量实现同步与互斥.png\" style=\"zoom:120%;\">\n\n<p>常见的使用场景</p>\n<ul>\n<li>生产者消费者问题</li>\n<li>多生产者—多消费者模型</li>\n<li>吸烟者问题</li>\n<li>读者—写者问题</li>\n<li>哲学家进餐问题</li>\n</ul>\n<h4 id=\"管程\"><a href=\"#管程\" class=\"headerlink\" title=\"管程\"></a>管程</h4><p>引入管程的原因：信号量机制编写程序困难，易出错而导致死锁。</p>\n<p>管程是一种特殊的软件模块，由这些部分组成：</p>\n<ol>\n<li>局部于管程的共享数据结构说明。</li>\n<li>对该数据结构进行操作的一组过程（或函数）。</li>\n<li>对局部于管程的共享数据设置的一组过程。</li>\n<li>管程的名称。</li>\n</ol>\n<p>基本特征：</p>\n<ol>\n<li>局部于管程的数据只能被局部于管程的过程所访问。</li>\n<li>一个进程只有通过调用管程内的过程才能进入管程访问共享数据。</li>\n<li><strong>每次仅允许一个进程在管程内执行某个内部过程，即同一时刻只有一个进程在管程内执行某个函数。</strong></li>\n</ol>\n<img src=\"/blog/2020/12/04/进程管理（三）/管程.png\" style=\"zoom:120%;\">\n\n","categories":["操作系统"]},{"title":"进程管理（二）","url":"/blog/2020/11/17/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>处理机调度概念、层次</li>\n<li>进程调度的时机/切换与过程/方式</li>\n<li>调度算法的评价指标</li>\n<li>非交互性调度算法</li>\n<li>交互性调度算法</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"处理机调度概念、层次\"><a href=\"#处理机调度概念、层次\" class=\"headerlink\" title=\"处理机调度概念、层次\"></a>处理机调度概念、层次</h4><p><strong>处理机调度</strong>是对处理机进行分配，即从就绪队列中按照一定的算法（公平、高效）选择一个进程并将处理及分配给它运行，以实现进程并发的执行。</p>\n<p><strong>调度的三个层次</strong></p>\n<ol>\n<li><p>高级调度（作业调度）</p>\n<ul>\n<li>按一定的原则从外存上处于后备状态的作业中挑选一个（或多个）作业，给他们分配内存等必要资源，并建立相应的进程（建立PCB），以使他（们）获得竞争处理机的权利。</li>\n<li><strong>作业调入一次（建立PCB），调出一次（撤销PCB）。</strong></li>\n<li>高级调度主要是指调入的问题，只有调入的时机需要操作系统来确定，调出必然是作业结束时刻。</li>\n<li>执行频率低。</li>\n</ul>\n</li>\n<li><p>中级调度（内存调度）</p>\n<ul>\n<li><p>引入虚拟存储技术后，可将在暂时不能运行的进程调至外存等待，此时状态称为<strong>挂起态。</strong></p>\n</li>\n<li><p>PCB不会调到外存，而是常驻内存，被挂起的进程PCB会被放到挂起队列中。</p>\n</li>\n<li><p>中级调度就是决定将哪个处于挂起态的进程重新调入内存。</p>\n</li>\n<li><p>一个进程可能会被多次调出、调入内存，中级调度频率高于高级调度。</p>\n</li>\n<li><p>进程的挂起态与七状态模型。</p>\n</li>\n</ul>\n<img src=\"/blog/2020/11/17/进程管理（二）/7states.png\">\n</li>\n<li><p>低级调度（进程调度）</p>\n<ul>\n<li>按照某种方法从就绪队列中选取一个进程，将处理机分配给他。</li>\n<li>是<strong>最基本的一种调度。</strong></li>\n<li>频率很高，一般几十毫秒一次。</li>\n</ul>\n<p><strong>三层调度的联系、对比</strong></p>\n</li>\n</ol>\n<img src=\"/blog/2020/11/17/进程管理（二）/三层调度的联系及对比.png\">\n\n<p><em>调度算法要研究的问题</em>：<strong>高级调度、进程调度</strong></p>\n<h4 id=\"进程调度的时机-切换与过程-方式\"><a href=\"#进程调度的时机-切换与过程-方式\" class=\"headerlink\" title=\"进程调度的时机/切换与过程/方式\"></a>进程调度的时机/切换与过程/方式</h4><h5 id=\"进程调度的时机\"><a href=\"#进程调度的时机\" class=\"headerlink\" title=\"进程调度的时机\"></a>进程调度的时机</h5><img src=\"/blog/2020/11/17/进程管理（二）/进程调度的时机.png\">\n\n<p>需要注意：</p>\n<ol>\n<li>进程在<strong>操作系统内核程序临界区</strong>中<em>不能</em>进行调度与切换<ul>\n<li>内核程序临界区时用来访问某种内核数据结构的（如进程的就绪队列，由各就绪进程的PCB组成）。</li>\n<li>内核程序临界区访问的临界资源如果不尽快释放的话，极有可能影响到操作系统内核的其他管理工作。</li>\n</ul>\n</li>\n<li>进程处于<strong>临界区</strong>时<em>可以</em>进行处理机调度<ul>\n<li>如打印机在打印完成之前，进程一直处于临界区内并将临界资源上锁，但打印机是慢速设备，如果此时不允许进程调度会导致CPU一直空闲。</li>\n<li>普通临界区访问的临界资源不会直接影响操作系统内核的管理工作，因此普通临界区可以进行调度和切换。</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"进程调度的切换与过程\"><a href=\"#进程调度的切换与过程\" class=\"headerlink\" title=\"进程调度的切换与过程\"></a>进程调度的切换与过程</h5><p><em>狭义的进程调度</em>指的是从就绪队列中选中一个要运行的进程，可以是刚刚被暂停的进程，也可能是另外一个进程，后者需要进程切换。</p>\n<p><em>广义的进程调度</em>指包含了选择一个进程和进程切换两个步骤。</p>\n<p><em>进程切换</em>是指一个进程让出处理机，由另一个进程占用处理机的过程。进程切换的过程主要完成了：</p>\n<ol>\n<li>对原来运行进程各种数据的保存。</li>\n<li>对新的进程各种数据的恢复。</li>\n</ol>\n<p><strong>注意</strong>：进程切换时由代价的，过于频繁的进行进程调度、切换，会使整个系统的效率降低。</p>\n<h5 id=\"进程调度的方式\"><a href=\"#进程调度的方式\" class=\"headerlink\" title=\"进程调度的方式\"></a>进程调度的方式</h5><ol>\n<li>非剥夺调度方式，又称非抢占方式。即，只允许进程主动放弃处理机。实现简单，系统开销小但是无法及时处理紧急任务，适合于早期的批处理系统。</li>\n<li>剥夺调度方式，又称抢占方式。可以优先处理更紧急的进程，也可实现让各进程按时间片轮流执行的功能（通过时钟中断）。适合与分时操作系统、实时操作系统。</li>\n</ol>\n<h4 id=\"调度算法的评价指标\"><a href=\"#调度算法的评价指标\" class=\"headerlink\" title=\"调度算法的评价指标\"></a>调度算法的评价指标</h4><img src=\"/blog/2020/11/17/进程管理（二）/调度算法的评价指标.png\">\n\n<h5 id=\"CPU利用率\"><a href=\"#CPU利用率\" class=\"headerlink\" title=\"CPU利用率\"></a>CPU利用率</h5><p>$$<br>利用率=\\frac{忙碌的时间}{总时间}<br>$$</p>\n<h5 id=\"系统吞吐量\"><a href=\"#系统吞吐量\" class=\"headerlink\" title=\"系统吞吐量\"></a>系统吞吐量</h5><p>单位时间内完成作业的数量。<br>$$<br>系统吞吐量=\\frac{总共完成了多少道作业}{总共花了多少时间}、<br>$$</p>\n<h5 id=\"周转时间\"><a href=\"#周转时间\" class=\"headerlink\" title=\"周转时间\"></a>周转时间</h5><p>从<strong>作业被提交给系统开始</strong>，到<strong>作业完成为止</strong>的这段时间间隔，它包括4个部分：</p>\n<ol>\n<li>作业在外存后备队列上等待作业调度（高级调度）的时间。</li>\n<li>进程在就绪队列上等待进程调度（低级调度）的时间。</li>\n<li>进程在CPU上执行的时间。</li>\n<li>进程等待I/O操作完成的时间。</li>\n</ol>\n<p>后三项可能发生多次。<br>$$<br>周转时间=作业完成时间-作业提交时间<br>$$</p>\n<p>$$<br>平均周转时间=\\frac{各作业周转时间之和}{作业数}<br>$$</p>\n<p>$$<br>带权周转时间=\\frac{作业周转时间}{作业实际运行的时间}=\\frac{作业完成时间-作业提交时间}{作业实际运行的时间}<br>$$</p>\n<p>$$<br>平均带权周转时间=\\frac{各作业带权周转时间之和}{作业数}<br>$$</p>\n<p>后两个比较重要，带权周转时间和周转时间都是越短越好。</p>\n<h5 id=\"等待时间\"><a href=\"#等待时间\" class=\"headerlink\" title=\"等待时间\"></a>等待时间</h5><p>进程/作业处于等待处理机状态时间之和。</p>\n<p>对于<strong>进程</strong>来说，等待时间就是指建立进程后等待被服务的时间之和，在等待I/O完成的期间其实进程也是被服务的，不计入等待时间内。</p>\n<p>对于<strong>作业</strong>来说，不仅考虑建立进程后的等待时间，还要加上作业在外存后备队列中等待的时间。</p>\n<h5 id=\"响应时间\"><a href=\"#响应时间\" class=\"headerlink\" title=\"响应时间\"></a>响应时间</h5><p>从用户<strong>提交请求</strong>到<strong>首次产生响应</strong>所用的时间。</p>\n<h4 id=\"非交互性调度算法\"><a href=\"#非交互性调度算法\" class=\"headerlink\" title=\"非交互性调度算法\"></a>非交互性调度算法</h4><h5 id=\"先来先服务（FCFS-First-Come-First-Serve）\"><a href=\"#先来先服务（FCFS-First-Come-First-Serve）\" class=\"headerlink\" title=\"先来先服务（FCFS, First Come First Serve）\"></a>先来先服务（FCFS, First Come First Serve）</h5><img src=\"/blog/2020/11/17/进程管理（二）/先来先服务.png\">\n\n<h5 id=\"最短作业优先（SJF-Shortest-Job-First）\"><a href=\"#最短作业优先（SJF-Shortest-Job-First）\" class=\"headerlink\" title=\"最短作业优先（SJF, Shortest Job First）\"></a>最短作业优先（SJF, Shortest Job First）</h5><p>最短作业/进程优先得到服务；既可用于作业调度，也可用于进程调度，用于进程调度时称为“短进程优先（SPF, Shortest Process First）算法”；SJF和SPF是<strong>非抢占式的算法</strong>，也有<strong>抢占式的版本</strong>—<strong>最短剩余时间优先</strong>算法（SRTN, Shortest Remaining Time Next）。</p>\n<p>短作业/进程优先调度算法：每次调度时选择<strong>当前已到达</strong>且<strong>运行时间最短</strong>的作业/进程，对比FCFS，SPF的平均等待/周转/带权周转的时间都要低。</p>\n<p>最短剩余时间优先算法：每当有进程加入，就绪队列改变时就需要调度，如果新到达的进程剩余时间比当前运行的进程剩余时间<strong>更短</strong>，则由新进程<strong>抢占</strong>处理机，当前运行进程重新回到就绪队列。另外，当一个进程完成时也需要调度。对比非抢占式的算法，其平均等待/周转/带权周转的时间都要低。</p>\n<img src=\"/blog/2020/11/17/进程管理（二）/SJF.png\">\n\n<h5 id=\"最高响应比优先（HRRN-Highest-Response-Ratio-Next）\"><a href=\"#最高响应比优先（HRRN-Highest-Response-Ratio-Next）\" class=\"headerlink\" title=\"最高响应比优先（HRRN, Highest Response Ratio Next）\"></a>最高响应比优先（HRRN, Highest Response Ratio Next）</h5><p>非抢占式的调度算法，只有当前运行的进程<strong>主动放弃CPU时</strong>，才需要进行调度，调度时计算所有就绪进程的响应比，选响应比最高的进程上处理机。<br>$$<br>响应比=\\frac{等待时间+要求服务时间}{要求服务时间}<br>$$<br><img src=\"/blog/2020/11/17/进程管理（二）/HRRN.png\"></p>\n<h4 id=\"交互性调度算法\"><a href=\"#交互性调度算法\" class=\"headerlink\" title=\"交互性调度算法\"></a>交互性调度算法</h4><h5 id=\"时间片轮转（RR-Round-Robin）\"><a href=\"#时间片轮转（RR-Round-Robin）\" class=\"headerlink\" title=\"时间片轮转（RR, Round-Robin）\"></a>时间片轮转（RR, Round-Robin）</h5><p>轮流让就绪队列中的进程依次执行一个时间片（每次选择的都是排在就绪队列头的进程），常用于分时操作系统。</p>\n<p>如果<strong>时间片过大</strong>，使得每个进程可以在一个时间片内完成，则时间片轮转调度算法退化为<strong>先来先服务</strong>算法，且会增加进程响应时间。</p>\n<p>如果<strong>时间片过小</strong>，会导致进程切换过于频繁，系统会花大量的时间来处理进程切换，从而导致实际用于进程执行的时间比列减少。</p>\n<p>一般来说，设计时间片时要让切换进程的开销占比不超过1%。</p>\n<img src=\"/blog/2020/11/17/进程管理（二）/RR.png\">\n\n<h5 id=\"优先级调度算法\"><a href=\"#优先级调度算法\" class=\"headerlink\" title=\"优先级调度算法\"></a>优先级调度算法</h5><p><em>非抢占式的优先级调度算法</em>：每次调度时选择当前已到达且优先级最高的进程。当前进程<strong>主动</strong>放弃处理机时发生调度。</p>\n<p><em>抢占式的优先级调度算法</em>：每次调度时选择当前已到达且优先级最高的进程。当前进程<strong>主动</strong>放弃处理机时发生调度。另外，当<strong>就绪队列发生改变时</strong>也需要检查是否会发生抢占。</p>\n<ol>\n<li><em>静态优先级</em>：创建进程时确定，之后一直不变。</li>\n<li><em>动态优先级</em>：创建进程时有一个初始值，之后会根据情况动态的调整优先级。</li>\n</ol>\n<p>如何合理设置优先级，通常情况下：</p>\n<ul>\n<li>系统进程优先级<strong>高于</strong>用户进程</li>\n<li>前台进程优先级<strong>高于</strong>后台进程</li>\n<li>操作系统<strong>更偏好I/O型进程（I/O繁忙型进程）</strong><ul>\n<li>I/O设备和CPU可以并行工作，最好让其尽早投入工作</li>\n</ul>\n</li>\n</ul>\n<p>采取动态优先级，何时调整：</p>\n<ul>\n<li>某进程在就绪队列中等待很长时间，可适当提高其优先级</li>\n<li>某进程占用处理机运行了很长时间，可适当降低其优先级</li>\n<li>某进程频繁进行I/O操作，可适当提升其优先级</li>\n</ul>\n<img src=\"/blog/2020/11/17/进程管理（二）/优先级调度算法.png\">\n\n<h5 id=\"多级反馈队列调度算法\"><a href=\"#多级反馈队列调度算法\" class=\"headerlink\" title=\"多级反馈队列调度算法\"></a>多级反馈队列调度算法</h5><img src=\"/blog/2020/11/17/进程管理（二）/多级反馈队列调度算法.png\">\n\n<p><strong>总结</strong>：</p>\n<img src=\"/blog/2020/11/17/进程管理（二）/总结.png\">\n\n","categories":["操作系统"]},{"title":"进程管理（四）-死锁","url":"/blog/2020/12/07/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%EF%BC%88%E5%9B%9B%EF%BC%89-%E6%AD%BB%E9%94%81/","content":"<h4 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h4><ol>\n<li>死锁的概念</li>\n<li>预防死锁</li>\n<li>避免死锁</li>\n<li>死锁的检测和解除</li>\n</ol>\n<a id=\"more\"></a>\n\n<h4 id=\"死锁的概念\"><a href=\"#死锁的概念\" class=\"headerlink\" title=\"死锁的概念\"></a>死锁的概念</h4><h5 id=\"什么是死锁？\"><a href=\"#什么是死锁？\" class=\"headerlink\" title=\"什么是死锁？\"></a>什么是死锁？</h5><p>在并发的环境下，各进程因竞争资源而造成的一种互相等待对方手里的资源，导致各进程都阻塞，都无法推进的现象，就是<strong>死锁</strong>。发生死锁后若无外力干涉，这些进程都将无法向前推进。</p>\n<h5 id=\"死锁、饥饿、死循环区别\"><a href=\"#死锁、饥饿、死循环区别\" class=\"headerlink\" title=\"死锁、饥饿、死循环区别\"></a>死锁、饥饿、死循环区别</h5><img src=\"/blog/2020/12/07/进程管理（四）-死锁/死锁、饥饿、死循环区别.png\" style=\"zoom:120%;\">\n\n<h5 id=\"死锁产生的必要条件\"><a href=\"#死锁产生的必要条件\" class=\"headerlink\" title=\"死锁产生的必要条件\"></a>死锁产生的必要条件</h5><p>产生死锁必须同时满足以下四个条件：</p>\n<ul>\n<li>互斥条件：只有对必须互斥使用的资源的争抢才会导致死锁。像内存、扬声器这样可以同时让多个进程使用的资源是不会导致死锁的。</li>\n<li>不剥夺条件：进程所获得的资源在未使用完之前，<strong>不能由其他进程强行夺走</strong>，只能主动释放。</li>\n<li>请求和保持条件：进程<strong>已经保持了至少一个资源</strong>，但又提出了新的资源要求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源<strong>保持</strong>不放。</li>\n<li>循环等待条件：存在一种进程<strong>资源的循环等待链</strong>，链中的每一个进程已获得的资源同时被下一个进程所请求。</li>\n</ul>\n<p><em>注意：发生死锁时一定有循环等待，但是发生循环等待时未必死锁。</em></p>\n<h5 id=\"什么时候会发生死锁？\"><a href=\"#什么时候会发生死锁？\" class=\"headerlink\" title=\"什么时候会发生死锁？\"></a>什么时候会发生死锁？</h5><ol>\n<li>对系统资源的竞争。</li>\n<li>进程推进顺序非法。</li>\n<li>信号量的使用不当。</li>\n</ol>\n<p>总之，对不可剥夺资源的不合理分配，可能导致死锁。</p>\n<h5 id=\"死锁的处理策略\"><a href=\"#死锁的处理策略\" class=\"headerlink\" title=\"死锁的处理策略\"></a>死锁的处理策略</h5><ol>\n<li>预防死锁：破坏死锁产生的四个必要条件中的一个。</li>\n<li>避免死锁：用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法）。</li>\n<li>死锁的检测和解除：允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措施解除死锁。</li>\n</ol>\n<img src=\"/blog/2020/12/07/进程管理（四）-死锁/死锁的概念.png\" style=\"zoom:120%;\">\n\n<h4 id=\"预防死锁\"><a href=\"#预防死锁\" class=\"headerlink\" title=\"预防死锁\"></a>预防死锁</h4><h5 id=\"破坏互斥条件\"><a href=\"#破坏互斥条件\" class=\"headerlink\" title=\"破坏互斥条件\"></a>破坏互斥条件</h5><p>如果把只能互斥使用的资源改造成允许共享使用，则系统不会进入死锁状态。如：<code>SPOOLing</code>技术。</p>\n<p>缺点：并不是所有的资源都可以改造成可共享使用的资源。并且为了系统安全，很多地方还必须保护这种互斥性。因此，<strong>很多时候都无法破坏互斥条件</strong>。</p>\n<h5 id=\"破坏不剥夺条件\"><a href=\"#破坏不剥夺条件\" class=\"headerlink\" title=\"破坏不剥夺条件\"></a>破坏不剥夺条件</h5><p>方案一：当某个进程请求新的资源得不到满足时，它必须立即释放保持的所有资源，待以后需要时再重新申请。也就是说，即使某些资源尚未使用完，也需要主动释放，从而破坏了不可剥夺条件。</p>\n<p>方案二：当某个进程需要的资源被其他进程所占有的时候，可以由操作系统协助，将想要的资源强行剥夺。这种方式一般需要考虑各进程的优先级。</p>\n<p>缺点：</p>\n<ol>\n<li>实现复杂。</li>\n<li>释放已获得的资源可能造成前一阶段工作的失效。因此这种方法只适合已保存和恢复状态的资源，如CPU。</li>\n<li>反复的申请和释放资源会增加系统开销，降低系统吞吐量。</li>\n<li>若采用方案一，只要暂时得不到某个资源，之前获得的资源都要放弃，以后再重新申请。如果持续发生这种情况，会导致进程饥饿。</li>\n</ol>\n<h5 id=\"破坏请求和保持条件\"><a href=\"#破坏请求和保持条件\" class=\"headerlink\" title=\"破坏请求和保持条件\"></a>破坏请求和保持条件</h5><p>可以采用<strong>静态分配方法</strong>，即进程在运行前一次申请完它所需要的全部资源，在它的资源未满足前，不让它投入运行，一旦投入运行后，资源归其所有，该进程就不会再请求别的资源了。</p>\n<p>缺点：有些资源可能使用很短的时间，如果进程执行期间一直保持所有资源，就会造成严重的资源浪费，资源利用率极低。另外也可能导致某些进程饥饿。</p>\n<h5 id=\"破坏循环等待条件\"><a href=\"#破坏循环等待条件\" class=\"headerlink\" title=\"破坏循环等待条件\"></a>破坏循环等待条件</h5><p>可采用<strong>顺序资源分配法</strong>，给系统中的资源编号，规定每个进程<strong>必须按编号递增的顺序请求资源</strong>，同类资源（即编号相同的资源）一次申请完。</p>\n<p>原理：一个进程只有占有小编号的资源时才有资格申请更大编号的资源。按此规则，已持有大编号资源的进程不可能逆向地回来申请小编号的资源，从而就不会产生循环等待的现象。</p>\n<p>缺点：</p>\n<ol>\n<li>不方便增加新的设备，因为可能需要重新分配所有的编号。</li>\n<li>进程实际使用资源的顺序可能和编号递增顺序不一致，会导致资源的浪费。</li>\n<li>必须按规定的次序申请资源，用户编程麻烦。</li>\n</ol>\n<img src=\"/blog/2020/12/07/进程管理（四）-死锁/预防死锁.png\" style=\"zoom:120%;\">\n\n<h4 id=\"避免死锁\"><a href=\"#避免死锁\" class=\"headerlink\" title=\"避免死锁\"></a>避免死锁</h4><p>不破坏死锁的必要条件，而是在在资源动态分配的过程中，防止系统进入不安全状态。</p>\n<h5 id=\"系统安全状态\"><a href=\"#系统安全状态\" class=\"headerlink\" title=\"系统安全状态\"></a>系统安全状态</h5><p>指系统能按某种推进顺序（P1,P2,…,Pn）为每个进程Pi分配其所需的资源，直至满足每个进程对资源的最大需求，使每个进程都可顺序完成。此时称P1,P2,…,Pn为安全序列，若系统无法找到一个安全序列，则称系统处于不安全状态。</p>\n<p>并非所有的不安全状态都是死锁状态，但当系统进入不安全状态后，便可能进入死锁状态；反之，只要系统处于安全状态，系统便可避免进入死锁状态。</p>\n<h5 id=\"银行家算法\"><a href=\"#银行家算法\" class=\"headerlink\" title=\"银行家算法\"></a>银行家算法</h5><p>数据结构：</p>\n<ul>\n<li>长度为m的一维数组Avaliable表示还有多少可用资源。</li>\n<li>n*m矩阵Max表示各进程对资源的最大需求数。</li>\n<li>n*m矩阵Allocation表示已经给各进程分配了多少资源。</li>\n<li>Max - Alllcation = Need 矩阵表示各进程最多还需要多少资源。</li>\n<li>长度为m的一维数组Request表示进程此次申请的各种资源数。</li>\n</ul>\n<p>银行家算法步骤：</p>\n<ol>\n<li>检查此次申请是否超过了之前声明的最大需求数。</li>\n<li>检查此时系统剩余的可用资源是否还能满足这次请求。</li>\n<li>试探着分配，更改各数据结构。</li>\n<li>用安全性算法检查此次分配是否会导致系统进入不安全状态。</li>\n</ol>\n<p>安全性算法步骤：</p>\n<p>检查当前的剩余可用资源能否满足某个进程的最大需求，如果可以，就把该进程加入安全序列，并把该进程只有的资源全部回收。</p>\n<p>不断重复上述过程，看最终是否能让所有进程都加入安全序列。</p>\n<p><em>系统处于不安全状态未必死锁，但死锁时一定处于不安全状态。系统处于安全状态一定不会死锁。</em></p>\n<p><strong>举例（后面更新）：</strong></p>\n<h4 id=\"死锁的检测和解除\"><a href=\"#死锁的检测和解除\" class=\"headerlink\" title=\"死锁的检测和解除\"></a>死锁的检测和解除</h4><p>当可能发生死锁时，系统应当提供两个算法：</p>\n<ol>\n<li>死锁检测算法：用于检测系统状态，以确定系统中是否发生了死锁。</li>\n<li>死锁解除算法：当认定系统中已经发生了死锁，利用该算法可将系统从死锁状态中解脱出来。</li>\n</ol>\n<h5 id=\"死锁的检测\"><a href=\"#死锁的检测\" class=\"headerlink\" title=\"死锁的检测\"></a>死锁的检测</h5><p>为了能对系统是否已发生了死锁进行检测，必须：</p>\n<ol>\n<li>用<strong>某种数据结构</strong>来保存资源的请求和分配信息。</li>\n<li>提供<strong>一种算法</strong>，利用上述信息来检测系统是否已进入死锁状态。</li>\n</ol>\n<img src=\"/blog/2020/12/07/进程管理（四）-死锁/死锁的检测.png\" style=\"zoom:120%;\">\n\n<img src=\"/blog/2020/12/07/进程管理（四）-死锁/死锁的检测1.png\" style=\"zoom:80%;\">\n\n<p>检测死锁的算法：</p>\n<ol>\n<li>在资源分配图中，找出既不阻塞又不是孤点的进程Pi (即找出一条有向边与它相连，且该有向边对应资源的申请数量小于等于系统中己有空闲资源数景。如下图中，R1没有空闲资源，R2有 —个空闲资源。若所有的连接该进程的边均满足上述条件，则这个进程能继续运行直至完成，然后释放它所占有的所有资源）。消去它所有的请求边和分配变，使之称为孤立的结点。在下图中P1是满足这一条件的进程结点，于是将P1的所有边消去。</li>\n<li>进程Pi所释放的资源，可以唤醒某些因等待这些资源而阻塞的进程，原来的阻塞进程可能变为非阻塞进程。在下图中，P2就满足这样的条件。根据1中的方法进行一系列简化后，若能消去途中所有的边，则称该图是可完全简化的。</li>\n</ol>\n<img src=\"/blog/2020/12/07/进程管理（四）-死锁/死锁的检测2.png\" style=\"zoom:80%;\">\n\n<p><strong>死锁定理</strong>：如果某时刻系统的资源分配图是<strong>不可完全简化</strong>的，那么此时系统死锁。</p>\n<h5 id=\"死锁的解除\"><a href=\"#死锁的解除\" class=\"headerlink\" title=\"死锁的解除\"></a>死锁的解除</h5><p>—旦检测出死锁的发生，就应该立即解除死锁。<br>补充：并不是系统中所有的进程都是死锁状态，用死锁检测算法化简资源分配图后，还连着边的那些进程就是死锁进程 。<br>解除死锁的主要方法有：</p>\n<ol>\n<li><p>资源剥夺法。挂起（哲时放到外存上）某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程。但是应防止被挂起的进程长时间得不到资源而饥饿。</p>\n</li>\n<li><p>撤销进程法（或称终止进程法）。强制撤销部分、甚至全部死锁进程，并剥夺这些进程的资源。这种方式的优点是实现简单，但所付出的代价可能会很大。因为有些进程可能己经运行了很长时间，己经接近结束了，一旦被终止可谓功亏一篑，以后还得从头再来。</p>\n</li>\n<li><p>进程回退法。让一个或多个死锁进程回退到足以避免死锁的地步。这就要求系统要记录进程历史信息，设罝还原点。</p>\n</li>\n</ol>\n<p>如何决定”对谁动手“？</p>\n<ol>\n<li>进程优先级：牺牲优先级低的。</li>\n<li>已执行多长时间：牺牲执行时间短的。</li>\n<li>还要多久完成：让快结束的优先获得资源。</li>\n<li>进程已经使用了多少资源：拥有更多资源的先牺牲。</li>\n<li>进程是交互式的还是批处理式的？：先牺牲批处理式的。</li>\n</ol>\n<img src=\"/blog/2020/12/07/进程管理（四）-死锁/总结.png\" style=\"zoom:120%;\">","categories":["操作系统"],"tags":["死锁"]},{"title":"链式栈","url":"/blog/2019/12/29/%E9%93%BE%E5%BC%8F%E6%A0%88/","content":"<h3 id=\"本次学习要点\"><a href=\"#本次学习要点\" class=\"headerlink\" title=\"本次学习要点\"></a>本次学习要点</h3><ol>\n<li>编写链式栈</li>\n<li>括号匹配问题</li>\n</ol>\n<a id=\"more\"></a>\n\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>在程序中同时使用多个栈的情况下，使用链式栈不但可以提高存储效率，同时还可以达到共享存储空间的目的。</p>\n<p>链式栈的结构如图所示，一般都不使用头结点，而进行直接实现。</p>\n<img src=\"/blog/2019/12/29/链式栈/结构图.png\" style=\"zoom: 50%;\">\n\n<h4 id=\"1-结点类模板\"><a href=\"#1-结点类模板\" class=\"headerlink\" title=\"1. 结点类模板\"></a>1. 结点类模板</h4><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tElemType data;</span><br><span class=\"line\">\tNode&lt;ElemType&gt; *next;</span><br><span class=\"line\"></span><br><span class=\"line\">\tNode();</span><br><span class=\"line\">\tNode(ElemType item, Node&lt;ElemType&gt; *link);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\">Node&lt;ElemType&gt;::Node()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tnext = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\">Node&lt;ElemType&gt;::Node(ElemType item, Node&lt;ElemType&gt; *link)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdata = item;</span><br><span class=\"line\">\tnext = link;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-链式栈类模板\"><a href=\"#2-链式栈类模板\" class=\"headerlink\" title=\"2. 链式栈类模板\"></a>2. 链式栈类模板</h4><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkStack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\tNode&lt;ElemType&gt; *top;<span class=\"comment\">//栈顶指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count;<span class=\"comment\">//元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tLinkStack();<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span>~LinkStack();<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Length</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;<span class=\"comment\">//栈的长度</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Empty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;<span class=\"comment\">//栈是否为空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Clear</span><span class=\"params\">()</span></span>;<span class=\"comment\">//清空栈</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Traverse</span><span class=\"params\">(<span class=\"keyword\">void</span>(*visit)(<span class=\"keyword\">const</span> ElemType&amp;))</span> <span class=\"keyword\">const</span></span>;<span class=\"comment\">//对每个对象调用visit</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Push</span><span class=\"params\">(<span class=\"keyword\">const</span> ElemType &amp;e)</span></span>;<span class=\"comment\">//压栈</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Top</span><span class=\"params\">(ElemType &amp;e)</span> <span class=\"keyword\">const</span></span>;<span class=\"comment\">//返回栈顶元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Pop</span><span class=\"params\">(ElemType &amp;e)</span></span>;<span class=\"comment\">//出栈</span></span><br><span class=\"line\">\tLinkStack(<span class=\"keyword\">const</span> LinkStack&lt;ElemType&gt;&amp;copy);<span class=\"comment\">//复制构造函数模板</span></span><br><span class=\"line\">\tLinkStack&lt;ElemType&gt;&amp;<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> LinkStack&lt;ElemType&gt;&amp;copy);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-成员函数\"><a href=\"#3-成员函数\" class=\"headerlink\" title=\"3. 成员函数\"></a>3. 成员函数</h4><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\">LinkStack&lt;ElemType&gt;::LinkStack()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ttop = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\">LinkStack&lt;ElemType&gt;::~LinkStack()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tClear();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> LinkStack&lt;ElemType&gt;::Length() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> LinkStack&lt;ElemType&gt;::Empty() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> top == <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> LinkStack&lt;ElemType&gt;::Clear()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tElemType tmpElem;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Empty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tPop(tmpElem);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> LinkStack&lt;ElemType&gt;::Traverse(<span class=\"keyword\">void</span>(*visit)(<span class=\"keyword\">const</span> ElemType &amp;)) <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNode&lt;ElemType&gt; *tmpPtr;</span><br><span class=\"line\">\tLinkStack&lt;ElemType&gt; tmps;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (tmpPtr = top; tmpPtr != <span class=\"literal\">NULL</span>; tmpPtr = tmpPtr-&gt;next)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttmps.Push(tmpPtr-&gt;data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (tmpPtr = tmps.top; tmpPtr != <span class=\"literal\">NULL</span>; tmpPtr = tmpPtr-&gt;next)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t(*visit)(tmpPtr-&gt;data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> LinkStack&lt;ElemType&gt;::Push(<span class=\"keyword\">const</span> ElemType &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNode&lt;ElemType&gt; *newTop = <span class=\"keyword\">new</span> Node&lt;ElemType&gt;(e, top);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (newTop == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttop = newTop;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> LinkStack&lt;ElemType&gt;::Top(ElemType &amp;e) <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (Empty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\te = top-&gt;data;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> LinkStack&lt;ElemType&gt;::Pop(ElemType &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (Empty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tNode&lt;ElemType&gt; *old_top = top;</span><br><span class=\"line\">\t\te = old_top-&gt;data;</span><br><span class=\"line\">\t\ttop = old_top-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> old_top;</span><br><span class=\"line\">\t\tcount--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\">LinkStack&lt;ElemType&gt;::LinkStack(<span class=\"keyword\">const</span> LinkStack&lt;ElemType&gt; &amp;copy)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//由栈copy构造新栈——复制构造函数模板</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (copy.Empty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttop = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttop = <span class=\"keyword\">new</span> Node&lt;ElemType&gt;(copy.top-&gt;data,copy.top);<span class=\"comment\">//栈顶</span></span><br><span class=\"line\">\t\tcount = copy.count;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tNode&lt;ElemType&gt; *buttomPtr = top;<span class=\"comment\">//栈底</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Node&lt;ElemType&gt;*tmpPtr = copy.top-&gt;next; tmpPtr != <span class=\"literal\">NULL</span>; tmpPtr = tmpPtr-&gt;next)<span class=\"comment\">//从copy中第二个值开始取，第一个已经被复制给top(buttomPtr)</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tbuttomPtr-&gt;next = <span class=\"keyword\">new</span> Node&lt;ElemType&gt;(tmpPtr-&gt;data,tmpPtr-&gt;next);</span><br><span class=\"line\">\t\t\tbuttomPtr = buttomPtr-&gt;next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\">LinkStack&lt;ElemType&gt;&amp;LinkStack&lt;ElemType&gt;::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> LinkStack&lt;ElemType&gt; &amp;copy)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将栈copy赋值给当前栈——重载赋值运算符</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (&amp;copy != <span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (copy.Empty())</span><br><span class=\"line\">\t\t&#123;\t<span class=\"comment\">//copy为空</span></span><br><span class=\"line\">\t\t\ttop = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\tcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;\t<span class=\"comment\">//copy非空，复制栈</span></span><br><span class=\"line\">\t\t\tClear();</span><br><span class=\"line\">\t\t\ttop = <span class=\"keyword\">new</span> Node&lt;ElemType&gt;(copy.top-&gt;data,copy.top);</span><br><span class=\"line\">\t\t\tcount = copy.count;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tNode&lt;ElemType&gt;*buttomPtr = top;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Node&lt;ElemType&gt;*tmpPtr = copy.top-&gt;next; tmpPtr != <span class=\"literal\">NULL</span>; tmpPtr = tmpPtr-&gt;next)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tbuttomPtr-&gt;next = <span class=\"keyword\">new</span> Node&lt;ElemType&gt;(tmpPtr-&gt;data,tmpPtr-next);</span><br><span class=\"line\">\t\t\t\tbuttomPtr = buttomPtr-&gt;next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-main\"><a href=\"#4-main\" class=\"headerlink\" title=\"4. main()\"></a>4. main()</h4><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"alg.h\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ElemType&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">(ElemType &amp;e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; e &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLinkStack&lt;<span class=\"keyword\">int</span>&gt; l1;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> e1,e2;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"输入的三个数分别为5，1，2\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tl1.Push(<span class=\"number\">5</span>);</span><br><span class=\"line\">\tl1.Push(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tl1.Push(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"当前栈长为：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; l1.Length() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"弹出栈顶，返回值为：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tl1.Pop(e1);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; e1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"当前栈长为：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; l1.Length() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tl1.Top(e2);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"返回当前栈顶元素：\\n\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; e2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"输出l1当前栈内元素(dir:bottom-&gt;top)：\\n\"</span>;</span><br><span class=\"line\">\tl1.Traverse(<span class=\"built_in\">display</span>); <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">LinkStack&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">l2</span><span class=\"params\">(l1)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">//l2 = l1;//将l1复制给l2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"输出l2当前栈内元素(dir:bottom-&gt;top)：\\n\"</span>;</span><br><span class=\"line\">\tl2.Traverse(<span class=\"built_in\">display</span>); <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试结果如图：</p>\n<img src=\"/blog/2019/12/29/链式栈/结果图.png\" style=\"zoom: 80%;\">\n\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>设计一个算法判别用字符串表示的表达式中括号()[]{}是否配对出现，括号之间无优先级。</p>\n<p>算法思路：</p>\n<p>如果读入的字符为(、[、{，则进栈；</p>\n<p>若读入的字符为)，如果栈空则说明不匹配；栈顶括号为(，则出栈匹配，否则不匹配，此时栈顶为[、{或空；</p>\n<p>若读入的字符为]，如果栈空则说明不匹配；栈顶括号为[，则出栈匹配，否则不匹配，此时栈顶为(、{或空；</p>\n<p>若读入的字符为}，如果栈空则说明不匹配；栈顶括号为{，则出栈匹配，否则不匹配，此时栈顶为[、(或空；</p>\n<p>若读入其他字符，则继续读入；</p>\n<p>扫描完各字符后，如栈为空则匹配，否则不匹配（括号数量为偶数，但括号不一定匹配）</p>\n<p>代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">match</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLinkStack&lt;<span class=\"keyword\">char</span>&gt; tmps;<span class=\"comment\">//临时栈</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> tmpch;<span class=\"comment\">//临时字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">strlen</span>(s); i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (s[i] == <span class=\"string\">'('</span> || s[i] == <span class=\"string\">'['</span> || s[i] == <span class=\"string\">'&#123;'</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttmps.Push(s[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">')'</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (tmps.Empty())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmps.Top(tmpch), tmpch == <span class=\"string\">'('</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttmps.Pop(tmpch);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">']'</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (tmps.Empty())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmps.Top(tmpch), tmpch == <span class=\"string\">'['</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttmps.Pop(tmpch);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">'&#125;'</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (tmps.Empty())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmps.Top(tmpch), tmpch == <span class=\"string\">'&#123;'</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttmps.Pop(tmpch);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tmps.Empty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"无括号优先级\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *s1 = <span class=\"string\">\"&#123;a*[c+d*(e+f)]&#125;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *s2 = <span class=\"string\">\"&#123;a*[c+d*[e+f)]&#125;\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> True = <span class=\"string\">\"匹配\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> False = <span class=\"string\">\"不匹配\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s1_result = match(s1) ? True : False;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s2_result = match(s2) ? True : False;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; s1 &lt;&lt; <span class=\"string\">'\\t'</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; s1_result &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; s2 &lt;&lt; <span class=\"string\">'\\t'</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; s2_result &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<img src=\"/blog/2019/12/29/链式栈/匹配问题.png\">\n\n","categories":["算法与数据结构"]}]