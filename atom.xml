<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhaoxingyu&#39;s blog</title>
  
  <subtitle>Aim high, down to earth.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xingyuzhao.ltd/"/>
  <updated>2019-09-29T01:03:17.626Z</updated>
  <id>http://www.xingyuzhao.ltd/</id>
  
  <author>
    <name>Zhaoxingyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.xingyuzhao.ltd/blog/2020/04/01/hello-world/"/>
    <id>http://www.xingyuzhao.ltd/blog/2020/04/01/hello-world/</id>
    <published>2020-04-01T03:49:01.584Z</published>
    <updated>2019-09-29T01:03:17.626Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://www.xingyuzhao.ltd/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode17-电话号码的字母组合</title>
    <link href="http://www.xingyuzhao.ltd/blog/2020/02/16/LeetCode17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <id>http://www.xingyuzhao.ltd/blog/2020/02/16/LeetCode17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</id>
    <published>2020-02-16T06:40:09.000Z</published>
    <updated>2020-02-16T08:07:08.801Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。<br>已知数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><a id="more"></a><img src="/blog/2020/02/16/LeetCode17-电话号码的字母组合/1.png" style="zoom:80%;"><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>字符串的长度不确定，所以用循环直接解决不实际；</p><p>可以由下至上进行递归来求解，以“23”为例，如图：</p><pre class="mermaid">graph TDA[2] -->|a| B[3]A[2] -->|b| C[3]A[2] -->|c| D[3]B[3] -->|d| E[ad]B[3] -->|f| F[af]B[3] -->|g| G[ag]C[3] -->|d| H[bd]C[3] -->|f| I[bf]C[3] -->|g| J[bg]D[3] -->|d| K[cd]D[3] -->|f| L[cf]D[3] -->|g| M[cg]</pre><p>记数字2为第0层，那么数字3为第1层，需要一个变量level，记录当前遍历数字的位置。递归表现在：如果选择了’a’，那么就需要再进行三次选择‘d’ ‘f’ ‘g’后才可以输出，再选择’b’，以此类推。即递归到最后一层，输出一次递归结果，全部递归完成，得到最终结果。</p><p>具体算法如下：</p><ul><li>建立一个<strong>map</strong>，用来存储数字与其对应的字符串，当然，这里的数字是char类型。</li><li>递归函数中，首先判断<strong>level</strong>，如果等于<strong>digits</strong>中数字的个数，那么将当前的结果并入<strong>res</strong>，然后返回。</li><li>否则通过<strong>digits</strong>中的数字找到对应的字符串，然后遍历取出整个字符串，将每个字符串都加到当前的组合后面，再调用递归函数。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">letterCombinations</span><span class="params">(<span class="built_in">string</span> digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(digits.empty()) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="built_in">string</span>&gt; num_str&#123;&#123;<span class="string">'2'</span>,<span class="string">"abc"</span>&#125;,&#123;<span class="string">'3'</span>,<span class="string">"def"</span>&#125;,&#123;<span class="string">'4'</span>,<span class="string">"ghi"</span>&#125;,&#123;<span class="string">'5'</span>,<span class="string">"jkl"</span>&#125;,</span><br><span class="line">                                &#123;<span class="string">'6'</span>,<span class="string">"mno"</span>&#125;,&#123;<span class="string">'7'</span>,<span class="string">"pqrs"</span>&#125;,&#123;<span class="string">'8'</span>,<span class="string">"tuv"</span>&#125;,&#123;<span class="string">'9'</span>,<span class="string">"wxyz"</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        combin(digits,num_str,<span class="number">0</span>,<span class="string">""</span>,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">combin</span><span class="params">(<span class="built_in">string</span> digits,<span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="built_in">string</span>&gt; num_str,<span class="keyword">int</span> level,<span class="built_in">string</span> out,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        <span class="keyword">if</span>(level == digits.length())</span><br><span class="line">        &#123;</span><br><span class="line">            res.push_back(out);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> buf = num_str[digits[level]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;buf.length();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            combin(digits,num_str,level+<span class="number">1</span>,out+buf[i],res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。&lt;br&gt;已知数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://www.xingyuzhao.ltd/categories/LeetCode/"/>
    
    
      <category term="递归" scheme="http://www.xingyuzhao.ltd/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>转载：时间复杂度O(logn)意味着什么？（侵删）</title>
    <link href="http://www.xingyuzhao.ltd/blog/2020/01/01/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6O-logn-%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88%EF%BC%9F%EF%BC%88%E4%BE%B5%E5%88%A0%EF%BC%89/"/>
    <id>http://www.xingyuzhao.ltd/blog/2020/01/01/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6O-logn-%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88%EF%BC%9F%EF%BC%88%E4%BE%B5%E5%88%A0%EF%BC%89/</id>
    <published>2020-01-01T15:15:50.000Z</published>
    <updated>2020-01-01T15:21:19.427Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;</p><ul><li>原文地址：https://github.com/xitu/gold-miner/blob/master/TODO/what-does-the-time-complexity-o-log-n-actually-mean.md</li>    <li>原文作者：<a href="https://link.juejin.im/?target=https%3A%2F%2Fhackernoon.com%2F%40maazrk" rel="noopener" target="_blank">Maaz</a></li>    <li>译文出自：<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner" rel="noopener" target="_blank">掘金翻译计划</a></li>    <li>译者：<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fcdpath" rel="noopener" target="_blank">cdpath</a></li>    <li>校对者：<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fzaraguo" rel="noopener" target="_blank">zaraguo (zaraguo)</a>,&nbsp;<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fwhatbeg" rel="noopener" target="_blank">whatbeg (Qiu Hu)</a></li></ul><p>&nbsp;</p><a id="more"></a><p><em>友情提示：如果图片挂了，请翻墙或者点击原文地址阅读。</em></p><p>&nbsp;</p><p>预先知道算法的复杂度是一回事，了解其后的原理是另一件事情。</p><p>&nbsp;</p><p>不管你是计算机科班出身还是想有效解决最优化问题，如果想要用自己的知识解决实际问题，你都必须理解时间复杂度。</p><p>先从简单直观的 O(1) 和 O(n) 复杂度说起。O(1) 表示一次操作即可直接取得目标元素（比如字典或哈希表），O(n) 意味着先要检查 n 个元素来搜索目标，但是 O(log n) 是什么意思呢？</p><p>你第一次听说 O(log n) 时间复杂度可能是在学二分搜索算法的时候。二分搜索一定有某种行为使其时间复杂度为 log n。我们来看看是二分搜索是如何实现的。</p><p>因为在最好情况下二分搜索的时间复杂度是 O(1)，最坏情况（平均情况）下 O(log n)，我们直接来看最坏情况下的例子。已知有 16 个元素的有序数组。</p><p>举个最坏情况的例子，比如我们要找的是数字 13。</p><p><img alt class="has" src="https://img-blog.csdnimg.cn/20191121164646526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMzk2ODY0Mjg1,size_16,color_FFFFFF,t_70"></p><p>十六个元素的有序数组</p><p><img alt class="has" src="https://img-blog.csdnimg.cn/20191121164704291.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMzk2ODY0Mjg1,size_16,color_FFFFFF,t_70"></p><p>选中间的元素作为中心点（长度的一半）</p><p><img alt class="has" height="191" src="https://img-blog.csdnimg.cn/20191121164715238.jpeg" width="628"></p><p>13 小于中心点，所以不用考虑数组的后一半</p><p><img alt class="has" height="134" src="https://img-blog.csdnimg.cn/20191121164726473.jpeg" width="411"></p><p>重复这个过程，每次都寻找子数组的中间元素</p><p>&nbsp;</p><p><img alt class="has" height="101" src="https://img-blog.csdnimg.cn/20191121164751215.jpeg" width="285"></p><p><img alt class="has" height="91" src="https://img-blog.csdnimg.cn/20191121164811565.jpeg" width="223"></p><p>每次和中间元素比较都会使搜索范围减半。</p><p>所以为了从 16 个元素中找到目标元素，我们需要把数组平均分割 4 次，也就是说，</p><p><img alt class="has" height="141" src="https://img-blog.csdnimg.cn/20191121164824637.png" width="288"></p><p>简化后的公式</p><p>类似的，如果有 n 个元素，</p><p><img alt class="has" height="141" src="https://img-blog.csdnimg.cn/20191121164908192.png" width="301"></p><p>&nbsp;</p><p>归纳一下</p><p><img alt class="has" height="141" src="https://img-blog.csdnimg.cn/20191121164916433.png" width="275"></p><p>分子和分母代入指数</p><p><img alt class="has" height="141" src="https://img-blog.csdnimg.cn/20191121164930660.png" width="275"></p><p>等式两边同时乘以 2^k</p><p><img alt class="has" height="100" src="https://img-blog.csdnimg.cn/20191121164955503.png" width="285"></p><p>最终结果</p><p>现在来看看「对数」的定义：</p><blockquote><p>为使某数（底数）等于一给定数而必须取的乘幂的幂指数。</p></blockquote><p>也就是说可以写成这种形式</p><p><img alt class="has" height="87" src="https://img-blog.csdnimg.cn/2019112116500667.png" width="331"></p><p>对数形式</p><p>所以 log n 的确是有意义的，不是吗？没有其他什么可以表示这种行为。</p><p>就这样吧，我希望我讲得这些你都搞懂了。在从事计算机科学相关的工作时，了解这类知识总是有用的（而且很有趣）。说不定就因为你知道算法的原理，你成了小组里能找出问题的最优解的人呢，谁知道呢。祝好运！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;原文地址：https://github.com/xitu/gold-miner/blob/master/TODO/what-does-the-time-complexity-o-log-n-actually-mean.md&lt;/li&gt;
    &lt;li&gt;原文作者：&lt;a href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fhackernoon.com%2F%40maazrk&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Maaz&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;译文出自：&lt;a href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;掘金翻译计划&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;译者：&lt;a href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fcdpath&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;cdpath&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;校对者：&lt;a href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fzaraguo&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;zaraguo (zaraguo)&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fwhatbeg&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;whatbeg (Qiu Hu)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="转载" scheme="http://www.xingyuzhao.ltd/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>链式栈</title>
    <link href="http://www.xingyuzhao.ltd/blog/2019/12/29/%E9%93%BE%E5%BC%8F%E6%A0%88/"/>
    <id>http://www.xingyuzhao.ltd/blog/2019/12/29/%E9%93%BE%E5%BC%8F%E6%A0%88/</id>
    <published>2019-12-29T14:00:21.000Z</published>
    <updated>2020-01-01T08:50:57.294Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本次学习要点"><a href="#本次学习要点" class="headerlink" title="本次学习要点"></a>本次学习要点</h3><ol><li>编写链式栈</li><li>括号匹配问题</li></ol><a id="more"></a><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在程序中同时使用多个栈的情况下，使用链式栈不但可以提高存储效率，同时还可以达到共享存储空间的目的。</p><p>链式栈的结构如图所示，一般都不使用头结点，而进行直接实现。</p><img src="/blog/2019/12/29/链式栈/结构图.png" style="zoom: 50%;"><h4 id="1-结点类模板"><a href="#1-结点类模板" class="headerlink" title="1. 结点类模板"></a>1. 结点类模板</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line">Node&lt;ElemType&gt; *next;</span><br><span class="line"></span><br><span class="line">Node();</span><br><span class="line">Node(ElemType item, Node&lt;ElemType&gt; *link);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line">Node&lt;ElemType&gt;::Node()</span><br><span class="line">&#123;</span><br><span class="line">next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line">Node&lt;ElemType&gt;::Node(ElemType item, Node&lt;ElemType&gt; *link)</span><br><span class="line">&#123;</span><br><span class="line">data = item;</span><br><span class="line">next = link;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-链式栈类模板"><a href="#2-链式栈类模板" class="headerlink" title="2. 链式栈类模板"></a>2. 链式栈类模板</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">Node&lt;ElemType&gt; *top;<span class="comment">//栈顶指针</span></span><br><span class="line"><span class="keyword">int</span> count;<span class="comment">//元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">LinkStack();<span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">virtual</span>~LinkStack();<span class="comment">//析构函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">()</span> <span class="keyword">const</span></span>;<span class="comment">//栈的长度</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">()</span> <span class="keyword">const</span></span>;<span class="comment">//栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span></span>;<span class="comment">//清空栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> ElemType&amp;))</span> <span class="keyword">const</span></span>;<span class="comment">//对每个对象调用visit</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(<span class="keyword">const</span> ElemType &amp;e)</span></span>;<span class="comment">//压栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Top</span><span class="params">(ElemType &amp;e)</span> <span class="keyword">const</span></span>;<span class="comment">//返回栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(ElemType &amp;e)</span></span>;<span class="comment">//出栈</span></span><br><span class="line">LinkStack(<span class="keyword">const</span> LinkStack&lt;ElemType&gt;&amp;copy);<span class="comment">//复制构造函数模板</span></span><br><span class="line">LinkStack&lt;ElemType&gt;&amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> LinkStack&lt;ElemType&gt;&amp;copy);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-成员函数"><a href="#3-成员函数" class="headerlink" title="3. 成员函数"></a>3. 成员函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line">LinkStack&lt;ElemType&gt;::LinkStack()</span><br><span class="line">&#123;</span><br><span class="line">top = <span class="literal">NULL</span>;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line">LinkStack&lt;ElemType&gt;::~LinkStack()</span><br><span class="line">&#123;</span><br><span class="line">Clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">int</span> LinkStack&lt;ElemType&gt;::Length() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">bool</span> LinkStack&lt;ElemType&gt;::Empty() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> top == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">void</span> LinkStack&lt;ElemType&gt;::Clear()</span><br><span class="line">&#123;</span><br><span class="line">ElemType tmpElem;</span><br><span class="line"><span class="keyword">while</span> (!Empty())</span><br><span class="line">&#123;</span><br><span class="line">Pop(tmpElem);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">void</span> LinkStack&lt;ElemType&gt;::Traverse(<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> ElemType &amp;)) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">Node&lt;ElemType&gt; *tmpPtr;</span><br><span class="line">LinkStack&lt;ElemType&gt; tmps;</span><br><span class="line"><span class="keyword">for</span> (tmpPtr = top; tmpPtr != <span class="literal">NULL</span>; tmpPtr = tmpPtr-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">tmps.Push(tmpPtr-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (tmpPtr = tmps.top; tmpPtr != <span class="literal">NULL</span>; tmpPtr = tmpPtr-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">(*visit)(tmpPtr-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">bool</span> LinkStack&lt;ElemType&gt;::Push(<span class="keyword">const</span> ElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">Node&lt;ElemType&gt; *newTop = <span class="keyword">new</span> Node&lt;ElemType&gt;(e, top);</span><br><span class="line"><span class="keyword">if</span> (newTop == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">top = newTop;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">bool</span> LinkStack&lt;ElemType&gt;::Top(ElemType &amp;e) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">e = top-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">bool</span> LinkStack&lt;ElemType&gt;::Pop(ElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Node&lt;ElemType&gt; *old_top = top;</span><br><span class="line">e = old_top-&gt;data;</span><br><span class="line">top = old_top-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> old_top;</span><br><span class="line">count--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line">LinkStack&lt;ElemType&gt;::LinkStack(<span class="keyword">const</span> LinkStack&lt;ElemType&gt; &amp;copy)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//由栈copy构造新栈——复制构造函数模板</span></span><br><span class="line"><span class="keyword">if</span> (copy.Empty())</span><br><span class="line">&#123;</span><br><span class="line">top = <span class="literal">NULL</span>;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">top = <span class="keyword">new</span> Node&lt;ElemType&gt;(copy.top-&gt;data,copy.top);<span class="comment">//栈顶</span></span><br><span class="line">count = copy.count;</span><br><span class="line"></span><br><span class="line">Node&lt;ElemType&gt; *buttomPtr = top;<span class="comment">//栈底</span></span><br><span class="line"><span class="keyword">for</span> (Node&lt;ElemType&gt;*tmpPtr = copy.top-&gt;next; tmpPtr != <span class="literal">NULL</span>; tmpPtr = tmpPtr-&gt;next)<span class="comment">//从copy中第二个值开始取，第一个已经被复制给top(buttomPtr)</span></span><br><span class="line">&#123;</span><br><span class="line">buttomPtr-&gt;next = <span class="keyword">new</span> Node&lt;ElemType&gt;(tmpPtr-&gt;data,tmpPtr-&gt;next);</span><br><span class="line">buttomPtr = buttomPtr-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line">LinkStack&lt;ElemType&gt;&amp;LinkStack&lt;ElemType&gt;::<span class="keyword">operator</span>=(<span class="keyword">const</span> LinkStack&lt;ElemType&gt; &amp;copy)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将栈copy赋值给当前栈——重载赋值运算符</span></span><br><span class="line"><span class="keyword">if</span> (&amp;copy != <span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (copy.Empty())</span><br><span class="line">&#123;<span class="comment">//copy为空</span></span><br><span class="line">top = <span class="literal">NULL</span>;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">//copy非空，复制栈</span></span><br><span class="line">Clear();</span><br><span class="line">top = <span class="keyword">new</span> Node&lt;ElemType&gt;(copy.top-&gt;data,copy.top);</span><br><span class="line">count = copy.count;</span><br><span class="line"></span><br><span class="line">Node&lt;ElemType&gt;*buttomPtr = top;</span><br><span class="line"><span class="keyword">for</span> (Node&lt;ElemType&gt;*tmpPtr = copy.top-&gt;next; tmpPtr != <span class="literal">NULL</span>; tmpPtr = tmpPtr-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">buttomPtr-&gt;next = <span class="keyword">new</span> Node&lt;ElemType&gt;(tmpPtr-&gt;data,tmpPtr-next);</span><br><span class="line">buttomPtr = buttomPtr-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-main"><a href="#4-main" class="headerlink" title="4. main()"></a>4. main()</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"alg.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(ElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkStack&lt;<span class="keyword">int</span>&gt; l1;</span><br><span class="line"><span class="keyword">int</span> e1,e2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入的三个数分别为5，1，2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">l1.Push(<span class="number">5</span>);</span><br><span class="line">l1.Push(<span class="number">1</span>);</span><br><span class="line">l1.Push(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"当前栈长为："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; l1.Length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"弹出栈顶，返回值为："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">l1.Pop(e1);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"当前栈长为："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; l1.Length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">l1.Top(e2);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"返回当前栈顶元素：\n"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输出l1当前栈内元素(dir:bottom-&gt;top)：\n"</span>;</span><br><span class="line">l1.Traverse(<span class="built_in">display</span>); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkStack&lt;<span class="keyword">int</span>&gt; <span class="title">l2</span><span class="params">(l1)</span></span>;</span><br><span class="line"><span class="comment">//l2 = l1;//将l1复制给l2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输出l2当前栈内元素(dir:bottom-&gt;top)：\n"</span>;</span><br><span class="line">l2.Traverse(<span class="built_in">display</span>); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如图：</p><img src="/blog/2019/12/29/链式栈/结果图.png" style="zoom: 80%;"><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>设计一个算法判别用字符串表示的表达式中括号()[]{}是否配对出现，括号之间无优先级。</p><p>算法思路：</p><p>如果读入的字符为(、[、{，则进栈；</p><p>若读入的字符为)，如果栈空则说明不匹配；栈顶括号为(，则出栈匹配，否则不匹配，此时栈顶为[、{或空；</p><p>若读入的字符为]，如果栈空则说明不匹配；栈顶括号为[，则出栈匹配，否则不匹配，此时栈顶为(、{或空；</p><p>若读入的字符为}，如果栈空则说明不匹配；栈顶括号为{，则出栈匹配，否则不匹配，此时栈顶为[、(或空；</p><p>若读入其他字符，则继续读入；</p><p>扫描完各字符后，如栈为空则匹配，否则不匹配（括号数量为偶数，但括号不一定匹配）</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkStack&lt;<span class="keyword">char</span>&gt; tmps;<span class="comment">//临时栈</span></span><br><span class="line"><span class="keyword">char</span> tmpch;<span class="comment">//临时字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">'('</span> || s[i] == <span class="string">'['</span> || s[i] == <span class="string">'&#123;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmps.Push(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">')'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tmps.Empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tmps.Top(tmpch), tmpch == <span class="string">'('</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmps.Pop(tmpch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">']'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tmps.Empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tmps.Top(tmpch), tmpch == <span class="string">'['</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmps.Pop(tmpch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">'&#125;'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tmps.Empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tmps.Top(tmpch), tmpch == <span class="string">'&#123;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmps.Pop(tmpch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmps.Empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"无括号优先级"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">char</span> *s1 = <span class="string">"&#123;a*[c+d*(e+f)]&#125;"</span>;</span><br><span class="line"><span class="keyword">char</span> *s2 = <span class="string">"&#123;a*[c+d*[e+f)]&#125;"</span>;</span><br><span class="line"><span class="built_in">string</span> True = <span class="string">"匹配"</span>;</span><br><span class="line"><span class="built_in">string</span> False = <span class="string">"不匹配"</span>;</span><br><span class="line"><span class="built_in">string</span> s1_result = match(s1) ? True : False;</span><br><span class="line"><span class="built_in">string</span> s2_result = match(s2) ? True : False;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1_result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2 &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2_result &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src="/blog/2019/12/29/链式栈/匹配问题.png">]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本次学习要点&quot;&gt;&lt;a href=&quot;#本次学习要点&quot; class=&quot;headerlink&quot; title=&quot;本次学习要点&quot;&gt;&lt;/a&gt;本次学习要点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;编写链式栈&lt;/li&gt;
&lt;li&gt;括号匹配问题&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://www.xingyuzhao.ltd/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://www.xingyuzhao.ltd/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>循环链表解决约瑟夫问题</title>
    <link href="http://www.xingyuzhao.ltd/blog/2019/11/18/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/"/>
    <id>http://www.xingyuzhao.ltd/blog/2019/11/18/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/</id>
    <published>2019-11-18T15:05:26.000Z</published>
    <updated>2019-12-03T05:05:27.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本次学习要点"><a href="#本次学习要点" class="headerlink" title="本次学习要点"></a>本次学习要点</h3><ol><li>编写循环链表，由单链表修改得到</li><li>使用循环链表解决约瑟夫问题</li></ol><a id="more"></a><h3 id="循环链表与单链表的不同之处"><a href="#循环链表与单链表的不同之处" class="headerlink" title="循环链表与单链表的不同之处"></a>循环链表与单链表的不同之处</h3><p>循环链表是另外一种线性表链式存储结构，它的节点结构与单链表相同，与单链表不同的是在循环链表中的表尾节点的<code>next</code>不为空（NULL），而是指向头节点，所以循环链表为空的条件为<code>head-&gt;next==head</code>,如图所示：</p><img src="/blog/2019/11/18/循环链表解决约瑟夫问题/非空循环链表.png" style="zoom: 67%;"><p>​                                                                                    (a)非空循环链表</p><img src="/blog/2019/11/18/循环链表解决约瑟夫问题/空循环链表.png" style="zoom: 67%;"><p>​                                                                                        (b)空循环链表</p><p>循环链表的操作与线性表的操作基本相同，只是将算法中的循环条件改为<code>temPtr</code>是否等于头指针，以下给出与单链表不同之处：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line">Node&lt;ElemType&gt; * SimpleCircLinkList&lt;ElemType&gt;::GetElemPtr(<span class="keyword">int</span> <span class="built_in">position</span>) <span class="keyword">const</span></span><br><span class="line"><span class="comment">//返回指向第position个结点的指针,时间复杂度O(n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">position</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node&lt;ElemType&gt; *tmpPtr = head-&gt;next; <span class="comment">//用tmpPtr遍历线性表以查找第position个结点</span></span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">1</span>;<span class="comment">//tmpPtr所指结点的位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (tmpPtr != head&amp;&amp;pos &lt; <span class="built_in">position</span>)</span><br><span class="line">&#123;<span class="comment">//顺指针向后查找，直到tmpPtr指向第position个结点</span></span><br><span class="line">tmpPtr = tmpPtr-&gt;next;</span><br><span class="line">pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmpPtr != head&amp;&amp;pos == <span class="built_in">position</span>)</span><br><span class="line">&#123;<span class="comment">//查找成功</span></span><br><span class="line"><span class="keyword">return</span> tmpPtr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">//查找失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">int</span> SimpleCircLinkList&lt;ElemType&gt;::Length() <span class="keyword">const</span></span><br><span class="line"><span class="comment">//返回线性表元素的个数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Node&lt;ElemType&gt; *tmpPtr = head-&gt;next; tmpPtr != <span class="literal">NULL</span>; tmpPtr = tmpPtr-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (tmpPtr == head) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">bool</span> SimpleCircLinkList&lt;ElemType&gt;::Empty() <span class="keyword">const</span></span><br><span class="line"><span class="comment">//如果线性表为空，返回true，否则返回false</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next == head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">void</span> SimpleCircLinkList&lt;ElemType&gt;::Traverse(<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> ElemType &amp;)) <span class="keyword">const</span></span><br><span class="line"><span class="comment">//依次对线性表每个元素调用函数(*visit)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (Node&lt;ElemType&gt; * tmpPtr = head-&gt;next; tmpPtr != head; tmpPtr = tmpPtr-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">(*visit)(tmpPtr-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环列表解决与瑟夫问题"><a href="#循环列表解决与瑟夫问题" class="headerlink" title="循环列表解决与瑟夫问题"></a>循环列表解决与瑟夫问题</h3><p>问题描述：一个旅行社要从n个旅客中选出一名旅客，为他提供免费旅行服务，选择方法是让n个旅客围成一个圆圈，然后从信封中取出一张纸条，用上面写着的正整数m(m&lt;n)作为报数值，第一个人从1开始一个人一个人按顺时针报数，报到第m个旅客时，令其出列。然后从下一个人开始，从1顺时针报数，报到第m个游客时，再令其出列，如此下去，直到只剩下一个人为止。此人即为优胜者。如n=8，m=3，出列的顺序为3、6、1、5、2、8、4，最初编号为7的游客获得免费旅行服务。（待更新算法详细步骤）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//main.cpp</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&quot;alg.h&quot;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;typename ElemType&gt;</span><br><span class="line">void display(ElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; e &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">//循环链表解决约瑟夫问题</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">SimpleCircLinkList&lt;int&gt; la;</span><br><span class="line">int n = 8, m = 3;</span><br><span class="line">int position = 1;</span><br><span class="line">int out, winer;</span><br><span class="line">for (int k = 1; k &lt;= n; k++)</span><br><span class="line">&#123;</span><br><span class="line">la.Insert(k, k);</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 1; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">for (int j = 1; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line">if (position &gt; la.Length())</span><br><span class="line">&#123;</span><br><span class="line">position = 1;</span><br><span class="line">&#125;</span><br><span class="line">position++;</span><br><span class="line">&#125;</span><br><span class="line">position--;</span><br><span class="line">la.Delete(position, out);</span><br><span class="line">cout &lt;&lt; out &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">la.GetElem(1, winer);</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; &quot;优胜者：&quot; &lt;&lt; winer &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><img src="/blog/2019/11/18/循环链表解决约瑟夫问题/结果.png">]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本次学习要点&quot;&gt;&lt;a href=&quot;#本次学习要点&quot; class=&quot;headerlink&quot; title=&quot;本次学习要点&quot;&gt;&lt;/a&gt;本次学习要点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;编写循环链表，由单链表修改得到&lt;/li&gt;
&lt;li&gt;使用循环链表解决约瑟夫问题&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://www.xingyuzhao.ltd/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://www.xingyuzhao.ltd/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>单链表的基本操作</title>
    <link href="http://www.xingyuzhao.ltd/blog/2019/10/30/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.xingyuzhao.ltd/blog/2019/10/30/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2019-10-29T16:35:50.000Z</published>
    <updated>2019-12-03T05:05:12.826Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本次学习要点（更新于2019-12-3）"><a href="#本次学习要点（更新于2019-12-3）" class="headerlink" title="本次学习要点（更新于2019.12.3）"></a>本次学习要点（更新于2019.12.3）</h3><ol><li>掌握线性表的抽象数据类型</li><li>掌握链表的基本操作</li><li>学习链表的较复杂的操作</li></ol><a id="more"></a><h3 id="线性表的抽象数据类型"><a href="#线性表的抽象数据类型" class="headerlink" title="线性表的抽象数据类型"></a>线性表的抽象数据类型</h3><ol><li><code>int Length() const</code></li></ol><ul><li>初始条件：线性表已存在</li><li>操作结果：返回线性表中元素的个数</li></ul><ol start="2"><li><code>bool Empty() const</code></li></ol><ul><li>初始条件：线性表已存在</li><li>操作结果：判断线性表是否为空</li></ul><ol start="3"><li><code>void Clear()</code></li></ol><ul><li>初始条件：线性表已存在</li><li>操作结果：清空线性表</li></ul><ol start="4"><li><code>void Traverse(void(*visit)(const ElemType &amp;))</code></li></ol><ul><li>初始条件：线性表已存在</li><li>操作结果：对每个元素调用函数(*visit)</li></ul><ol start="5"><li><code>bool GetElem(int position,ElemType &amp;e) const</code></li></ol><ul><li>初始条件：线性表已存在，1&lt;=position&lt;=Length()</li><li>操作结果：用e返回第position处的元素值</li></ul><ol start="6"><li><code>bool SetElem(int position,const ElemType &amp;e)</code></li></ol><ul><li>初始条件：线性表已存在，1&lt;=position&lt;=Length()</li><li>操作结果：设置第position处的元素值为e</li></ul><ol start="7"><li><code>bool Delete(int position,ElemType &amp;e)</code></li></ol><ul><li>初始条件：线性表已存在，1&lt;=position&lt;=Length()</li><li>操作结果：删除第position个元素，并用e返回其值，长度减少1</li></ul><ol start="8"><li><code>bool Insert(int position,const ElemType &amp;e)</code></li></ol><ul><li>初始条件：线性表已存在，1&lt;=position&lt;=Length()+1</li><li>操作结果：在第position前插入元素e，长度加1</li></ul><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>函数声明中的<code>const</code>是什么作用？在不同位置的意思分别是什么？</p><p>答：在成员函数后的<code>const</code>指常成员函数，不能更改类成员变量的值；在变量前的<code>const</code>指常变量，在函数体重不能更改变量值。</p><h3 id="单链表的实现"><a href="#单链表的实现" class="headerlink" title="单链表的实现"></a>单链表的实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件名alg.h</span></span><br><span class="line"><span class="comment">//结点结构体模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//数据成员</span></span><br><span class="line">ElemType data;</span><br><span class="line">Node&lt;ElemType&gt; *next;</span><br><span class="line"><span class="comment">//构造函数模板</span></span><br><span class="line">Node();<span class="comment">//无参数的构造函数模板</span></span><br><span class="line">Node(ElemType item, Node&lt;ElemType&gt; *link);<span class="comment">//已知数据元素和后继指针建立结构</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//结点模板的实现部分</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line">Node&lt;ElemType&gt;::Node()</span><br><span class="line"><span class="comment">//构造后继指针为空的结点</span></span><br><span class="line">&#123;</span><br><span class="line">next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line">Node&lt;ElemType&gt;::Node(ElemType item, Node&lt;ElemType&gt; *link)</span><br><span class="line"><span class="comment">//构造一个数据元素为item和后继指针为link的结点</span></span><br><span class="line">&#123;</span><br><span class="line">data = item;</span><br><span class="line">next = link;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线性链表简单实现为数据成员只有头指针，成员函数模板与顺序表相似</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//简单线性链表类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleLinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">Node&lt;ElemType&gt; *head;</span><br><span class="line"><span class="function">Node&lt;ElemType&gt; *<span class="title">GetElemPtr</span><span class="params">(<span class="keyword">int</span> <span class="built_in">position</span>)</span> <span class="keyword">const</span></span>;<span class="comment">//返回指向第position个结点的指针</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">SimpleLinkList();</span><br><span class="line"><span class="keyword">virtual</span>~SimpleLinkList();</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> ElemType &amp;))</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> <span class="built_in">position</span>, ElemType &amp;e)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SetElem</span><span class="params">(<span class="keyword">int</span> <span class="built_in">position</span>, <span class="keyword">const</span> ElemType &amp;e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> <span class="built_in">position</span>, ElemType &amp;e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> <span class="built_in">position</span>, <span class="keyword">const</span> ElemType &amp;e)</span></span>;</span><br><span class="line">SimpleLinkList(<span class="keyword">const</span> SimpleLinkList&lt;ElemType&gt; &amp;copy);</span><br><span class="line">SimpleLinkList&lt;ElemType&gt;&amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> SimpleLinkList&lt;ElemType&gt;&amp;copy);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助函数模板的实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line">Node&lt;ElemType&gt; * SimpleLinkList&lt;ElemType&gt;::GetElemPtr(<span class="keyword">int</span> <span class="built_in">position</span>) <span class="keyword">const</span></span><br><span class="line"><span class="comment">//返回指向第position个结点的指针,时间复杂度O(n)</span></span><br><span class="line">&#123;</span><br><span class="line">Node&lt;ElemType&gt; *tmpPtr = head; <span class="comment">//用tmpPtr遍历线性表以查找第position个结点</span></span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;<span class="comment">//tmpPtr所指结点的位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (tmpPtr != <span class="literal">NULL</span>&amp;&amp;pos &lt; <span class="built_in">position</span>)</span><br><span class="line">&#123;<span class="comment">//顺指针向后查找，知道tmpPtr指向第position个结点</span></span><br><span class="line">tmpPtr = tmpPtr-&gt;next;</span><br><span class="line">pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmpPtr != <span class="literal">NULL</span>&amp;&amp;pos == <span class="built_in">position</span>)</span><br><span class="line">&#123;<span class="comment">//查找成功</span></span><br><span class="line"><span class="keyword">return</span> tmpPtr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">//查找失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数的实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line">SimpleLinkList&lt;ElemType&gt;::SimpleLinkList()</span><br><span class="line"><span class="comment">//构造一个空链表</span></span><br><span class="line">&#123;</span><br><span class="line">head = <span class="keyword">new</span> Node&lt;ElemType&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line">SimpleLinkList&lt;ElemType&gt;::~SimpleLinkList()</span><br><span class="line"><span class="comment">//销毁线性表</span></span><br><span class="line">&#123;</span><br><span class="line">Clear();</span><br><span class="line"><span class="keyword">delete</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">int</span> SimpleLinkList&lt;ElemType&gt;::Length() <span class="keyword">const</span></span><br><span class="line"><span class="comment">//返回线性表元素的个数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">Node&lt;ElemType&gt; *tmpPtr;</span><br><span class="line"><span class="keyword">for</span> (tmpPtr = head-&gt;next; tmpPtr != <span class="literal">NULL</span>; tmpPtr = tmpPtr-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">bool</span> SimpleLinkList&lt;ElemType&gt;::Empty() <span class="keyword">const</span></span><br><span class="line"><span class="comment">//如果线性表为空，返回true，否则返回false</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">void</span> SimpleLinkList&lt;ElemType&gt;::Clear()</span><br><span class="line"><span class="comment">//清空线性表</span></span><br><span class="line">&#123;</span><br><span class="line">ElemType tmpElem;</span><br><span class="line"><span class="keyword">while</span> (!Empty())</span><br><span class="line">&#123;<span class="comment">//线性表非空，删除第一个元素</span></span><br><span class="line">Delete(<span class="number">1</span>, tmpElem);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">void</span> SimpleLinkList&lt;ElemType&gt;::Traverse(<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> ElemType &amp;)) <span class="keyword">const</span></span><br><span class="line"><span class="comment">//依次对线性表每个元素调用函数(*visit)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (Node&lt;ElemType&gt; * tmpPtr = head-&gt;next; tmpPtr != <span class="literal">NULL</span>; tmpPtr = tmpPtr-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">(*visit)(tmpPtr-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">bool</span> SimpleLinkList&lt;ElemType&gt;::GetElem(<span class="keyword">int</span> <span class="built_in">position</span>, ElemType &amp;e) <span class="keyword">const</span></span><br><span class="line"><span class="comment">//当线性表存在第position给元素时，用e返回其指，返回true，否则</span></span><br><span class="line"><span class="comment">//返回false</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">position</span>&lt;<span class="number">1</span> || <span class="built_in">position</span>&gt;Length())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Node&lt;ElemType&gt; * tmpPtr;</span><br><span class="line">tmpPtr = GetElemPtr(<span class="built_in">position</span>);</span><br><span class="line">e = tmpPtr-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">bool</span> SimpleLinkList&lt;ElemType&gt;::SetElem(<span class="keyword">int</span> <span class="built_in">position</span>, <span class="keyword">const</span> ElemType &amp;e)</span><br><span class="line"><span class="comment">//将线性表的第position个位置的元素设置成e，position合法时返回true，否则</span></span><br><span class="line"><span class="comment">//返回false</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">position</span>&lt;<span class="number">1</span> || <span class="built_in">position</span>&gt;Length())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Node&lt;ElemType&gt; *tmpPtr;</span><br><span class="line">tmpPtr = GetElemPtr(<span class="built_in">position</span>);</span><br><span class="line">tmpPtr-&gt;data = e;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">bool</span> SimpleLinkList&lt;ElemType&gt;::Delete(<span class="keyword">int</span> <span class="built_in">position</span>, ElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">position</span>&lt;<span class="number">1</span> || <span class="built_in">position</span>&gt;Length())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Node&lt;ElemType&gt; *tmpPtr;</span><br><span class="line">tmpPtr = GetElemPtr(<span class="built_in">position</span> - <span class="number">1</span>);<span class="comment">//取出指向第position-1个结点的指针</span></span><br><span class="line">Node&lt;ElemType&gt; *nextPtr;          <span class="comment">//新建指针nextPtr</span></span><br><span class="line">nextPtr = tmpPtr-&gt;next;           <span class="comment">//新指针为tmpPtr的后继</span></span><br><span class="line">tmpPtr-&gt;next = nextPtr-&gt;next;     <span class="comment">//删除position处的结点</span></span><br><span class="line">e = nextPtr-&gt;data;                <span class="comment">//用e返回其值</span></span><br><span class="line"><span class="keyword">delete</span> nextPtr;                   <span class="comment">//释放被删结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="keyword">bool</span> SimpleLinkList&lt;ElemType&gt;::Insert(<span class="keyword">int</span> <span class="built_in">position</span>, <span class="keyword">const</span> ElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">position</span>&lt;<span class="number">1</span> || <span class="built_in">position</span>&gt;Length() + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Node&lt;ElemType&gt; *tmpPtr;</span><br><span class="line">tmpPtr = GetElemPtr(<span class="built_in">position</span> - <span class="number">1</span>);</span><br><span class="line">Node&lt;ElemType&gt; *nextPtr;</span><br><span class="line">nextPtr = <span class="keyword">new</span> Node&lt;ElemType&gt;(e, tmpPtr-&gt;next);</span><br><span class="line">tmpPtr-&gt;next = nextPtr;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line">SimpleLinkList&lt;ElemType&gt;::SimpleLinkList(<span class="keyword">const</span> SimpleLinkList&lt;ElemType&gt; &amp;copy)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//未写</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line">SimpleLinkList&lt;ElemType&gt;&amp;SimpleLinkList&lt;ElemType&gt;::<span class="keyword">operator</span>=(<span class="keyword">const</span> SimpleLinkList&lt;ElemType&gt;&amp;copy)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//未写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件名main.cpp</span></span><br><span class="line"><span class="comment">//单链表的基本操作</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"alg.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElemType&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(ElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SimpleLinkList&lt;<span class="keyword">int</span>&gt; test;<span class="comment">//定义空链表</span></span><br><span class="line">SimpleLinkList&lt;<span class="keyword">int</span>&gt; test1;<span class="comment">//定义空链表</span></span><br><span class="line"><span class="keyword">int</span> e = <span class="number">0</span>;<span class="comment">//返回值</span></span><br><span class="line"><span class="keyword">int</span> e1 = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)<span class="comment">//建立链表</span></span><br><span class="line">&#123;</span><br><span class="line">test.Insert(k, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"建立的链表:"</span>;</span><br><span class="line">test.Traverse(<span class="built_in">display</span>);<span class="comment">//显示数据</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"链表的长度为:"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; test.Length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"链表是否为空(0代表非空):"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; test.Empty() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"返回第五个位置的值(5)(GetElem):"</span>;</span><br><span class="line">test.GetElem(<span class="number">5</span>, e);<span class="comment">//返回第五个值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"设置第五个位置的值(50)(SetElem):"</span>;</span><br><span class="line">test.SetElem(<span class="number">5</span>, e1);<span class="comment">//设置第五个值为e1;</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输出当前的链表:"</span>;</span><br><span class="line">test.Traverse(<span class="built_in">display</span>);<span class="comment">//显示数据</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除第5个元素:"</span>;</span><br><span class="line">test.Delete(<span class="number">5</span>, e);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除的元素值为:"</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"链表的长度为:"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; test.Length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输出当前的链表:"</span>;</span><br><span class="line">test.Traverse(<span class="built_in">display</span>);<span class="comment">//显示数据</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"清空线性表(Clear)"</span>;</span><br><span class="line">test.Clear();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"链表是否为空(0代表非空):"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; test.Empty() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><img src="/blog/2019/10/30/单链表的基本操作/基本操作.png" style="zoom: 50%;"><h3 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h3><p>已知线性表la和lb中的数据元素按值递增，现在要将la和lb合并成新的线性表lc，使lc中的数据元素扔递增有序。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本次学习要点（更新于2019-12-3）&quot;&gt;&lt;a href=&quot;#本次学习要点（更新于2019-12-3）&quot; class=&quot;headerlink&quot; title=&quot;本次学习要点（更新于2019.12.3）&quot;&gt;&lt;/a&gt;本次学习要点（更新于2019.12.3）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;掌握线性表的抽象数据类型&lt;/li&gt;
&lt;li&gt;掌握链表的基本操作&lt;/li&gt;
&lt;li&gt;学习链表的较复杂的操作&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://www.xingyuzhao.ltd/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://www.xingyuzhao.ltd/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Git的基本使用(三)-Stash、Checkout和Reset（未完待续）</title>
    <link href="http://www.xingyuzhao.ltd/blog/2019/10/08/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-Stash%E3%80%81Checkout%E5%92%8Creset/"/>
    <id>http://www.xingyuzhao.ltd/blog/2019/10/08/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-Stash%E3%80%81Checkout%E5%92%8Creset/</id>
    <published>2019-10-08T15:39:20.000Z</published>
    <updated>2020-01-01T08:59:41.510Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本次学习要点"><a href="#本次学习要点" class="headerlink" title="本次学习要点"></a>本次学习要点</h3><p><code>Stash、Checkout</code>和<code>Reset</code>指令</p><p>经常有这样的事情发生，当你正在进行项目中某一部分的工作，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点，所以你储藏这些变更。为了往堆栈推送一个新的储藏，只要运行 <code>git stash</code>。</p><a id="more"></a><h3 id="基本指令-stash"><a href="#基本指令-stash" class="headerlink" title="基本指令-stash"></a>基本指令-stash</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git stash </span><br><span class="line">#保存当前工作区所有内容到当前分支的储藏栈的栈顶(工作区会变为最后一次commit时的内容)。</span><br><span class="line">git stash apply </span><br><span class="line">#应用当前分支的储藏栈栈顶的储藏到工作区。</span><br><span class="line">git stash apply &lt;stash id&gt; </span><br><span class="line">#应用当前分支的储藏栈指定位置的储藏到工作区，例如git stash apply stash@&#123;0&#125;。</span><br><span class="line">git stash list </span><br><span class="line">#列出当前分支的储藏栈详细信息。</span><br><span class="line">git stash drop &lt;stash id&gt; </span><br><span class="line">#移除当前分支的储藏栈指定位置的储藏。</span><br><span class="line">git stash pop</span><br><span class="line">#从git栈中获取到最近一次stash进去的内容，恢复工作区的内容，获取之后，会删除栈中对应的stash。</span><br></pre></td></tr></table></figure><ul><li>唯一需要注意的是，<code>git stash apply</code>并不会改变储藏栈的内容，所以如果你觉得之前的那个储藏没用了，请手动调用<code>git stash drop &lt;stash id&gt;</code>清理储藏栈。特别的，<code>git stash pop</code>会自动应用当前分支的储藏栈栈顶的储藏到工作区，并将其从栈顶移除。</li></ul><h4 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h4><ol><li>新建一个仓库，建立文件<code>test.txt</code>，随意键入一段内容（123），提交。</li><li>创建分支<code>feature</code>，修改<code>test.txt</code>文件内容（321）然后运行<code>git status</code>可以看到以下中间过程的内容：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><ol start="3"><li>现在你想切换分支，但是你还不想提交你正在进行中的工作；所以你储藏这些变更。为了往堆栈推送一个新的储藏，只要运行 <code>git stash</code>。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on master: 7ac5b3d master注释</span><br><span class="line">#test.txt中的内容变成了“123”，工作区内容变为最后一次提交的内容</span><br></pre></td></tr></table></figure><ol start="4"><li>这时，你可以方便地切换到其他分支工作；你的变更都保存在栈上。要查看现有的储藏，你可以使用 <code>git stash list</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on master: 7ac5b3d master注释</span><br></pre></td></tr></table></figure><ol start="5"><li>切换到分支<code>feature</code>并且使用指令<code>git stash pop</code>，观察<code>test.txt</code>中的内容变化。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop</span><br><span class="line">On branch feature</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class="line">Dropped refs/stash@&#123;0&#125; (81b72af21b8037e4b185820e3a86b78d95b9f8d8)</span><br><span class="line">#文档内容变成了“321”，也就是master修改后的工作区，但现在pop命令把储藏的栈顶弹出，是在feature分支进行工作的，此时feature的工作区是修改后的文档。</span><br></pre></td></tr></table></figure><ol start="6"><li>再次使用指令<code>git stash</code>，然后<code>git checkout master</code>，再次使用<code>git stash pop</code>，那么修改后的文档就是在<code>master</code>工作区了，最后直接查看工作区状态。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><h4 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h4><p>在练习一基础上使用<code>apply</code>指令：</p><ol><li>当前工作区为<code>master</code>，<code>test.txt</code>中的内容是修改后的321，使用<code>stash</code>指令存储当前的工作区。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on master: 7ac5b3d master注释</span><br><span class="line"></span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on master: 7ac5b3d master注释</span><br></pre></td></tr></table></figure><ol start="2"><li>此时<code>test.txt</code>内容为（123），修改其内容（1234），然后进行<code>add</code>（不进行此操作也可以），再进行一次存储。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on master: 7ac5b3d master注释</span><br><span class="line">stash@&#123;1&#125;: WIP on master: 7ac5b3d master注释</span><br><span class="line">#现在堆栈里存储了两个工作区，工作区空</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">#test.txt中内容变为“123”</span><br></pre></td></tr></table></figure><ol start="3"><li>使用<code>apply</code>指令将堆栈中的栈顶应用到当前工作区，当前的栈顶应该是<code>stash@{0}</code>，所以内容应该恢复为“1234”。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class="line">#打开test.txt发现内容已经变回“1234”</span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on master: 7ac5b3d master注释</span><br><span class="line">stash@&#123;1&#125;: WIP on master: 7ac5b3d master注释</span><br><span class="line">#堆栈中的内容不会主动删除，继续保存下来</span><br></pre></td></tr></table></figure><ol start="4"><li>修改<code>test.txt</code>中的“1234”为“123”（初始工作区），然后使用<code>git stash apply</code>指令将栈中的<code>stash@{1}</code>（修改后的工作区，内容是“321”）返回到工作区，此时文档内容是“321”。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply stash@&#123;1&#125;</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class="line">#test.txt中的内容是“321”</span><br></pre></td></tr></table></figure><h4 id="一些标注"><a href="#一些标注" class="headerlink" title="一些标注"></a>一些标注</h4><h5 id="练习一-1"><a href="#练习一-1" class="headerlink" title="练习一"></a>练习一</h5><p>初始工作区的<code>test.txt</code>内容为：123</p><p>第一次修改后的<code>test.txt</code>内容为：321</p><p>最后<code>master</code>中的<code>stash@{0}</code>内容为：321</p><h5 id="练习二-1"><a href="#练习二-1" class="headerlink" title="练习二"></a>练习二</h5><p>初始<code>master</code>中的<code>stash@{0}</code>内容为：321</p><p>修改初始的工作区中的<code>test.txt</code>内容为：1234</p><p>进行存储，<code>stash@{0}-&gt;stash@{1}</code>，内容为：321</p><p>此时<code>stash@{0}</code>中的内容为：1234</p><p>本次练习最后结果改回了“1234”。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本次学习要点&quot;&gt;&lt;a href=&quot;#本次学习要点&quot; class=&quot;headerlink&quot; title=&quot;本次学习要点&quot;&gt;&lt;/a&gt;本次学习要点&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Stash、Checkout&lt;/code&gt;和&lt;code&gt;Reset&lt;/code&gt;指令&lt;/p&gt;
&lt;p&gt;经常有这样的事情发生，当你正在进行项目中某一部分的工作，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点，所以你储藏这些变更。为了往堆栈推送一个新的储藏，只要运行 &lt;code&gt;git stash&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://www.xingyuzhao.ltd/categories/Git/"/>
    
    
      <category term="Git" scheme="http://www.xingyuzhao.ltd/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git的基本使用(二) --撤销提交</title>
    <link href="http://www.xingyuzhao.ltd/blog/2019/09/29/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%92%A4%E9%94%80%E6%8F%90%E4%BA%A4/"/>
    <id>http://www.xingyuzhao.ltd/blog/2019/09/29/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%92%A4%E9%94%80%E6%8F%90%E4%BA%A4/</id>
    <published>2019-09-29T14:13:33.000Z</published>
    <updated>2020-01-01T08:59:52.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本次学习要点："><a href="#本次学习要点：" class="headerlink" title="本次学习要点："></a>本次学习要点：</h3><p>Git的撤销提交操作</p><p>与回滚不同，如果认为某次的提交是有问题的，需要撤回这次的提交，应该怎么做呢？</p><a id="more"></a><h3 id="主要指令"><a href="#主要指令" class="headerlink" title="主要指令"></a>主要指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git revert &lt;SHA ID&gt;</span><br></pre></td></tr></table></figure><p>该指令可以直接把某一次的提交取消，所有在本次提交中发生变更的文件都会还原回上一次提交的内容。因为针对同一分支master操作，所以会产生冲突（解决方法见一），解决冲突后，再将文件放入缓存区，进行提交.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset &lt;之前某个版本ID&gt;</span><br><span class="line">$ git reset --hard &lt;之前某个版本ID&gt;</span><br></pre></td></tr></table></figure><p>上述指令是不安全的撤销方式。当年使用<code>git reset</code>来重置记录时，所有<strong>在此之后</strong>的记录都将永久消失，<strong>但是还会保留当前的提交</strong>。如果带上参数<code>--hard</code>，还会直接清空工作区里的所有变更（<strong>如果此时做了修改但是还没有提交，那么直接就会被撤销到未改动的时刻</strong>），直接使工作区内容撤销到指定提交的时刻，是一种比较暴力的撤销方式。</p><h3 id="实现1"><a href="#实现1" class="headerlink" title="实现1"></a>实现1</h3><ol><li>新建一个库，新建一个文件<code>text.txt</code> ，输入内容“1”，保存后提交。并以此类推，一共得到三次提交，内容分别是“1”，“2”，“3”，使用<code>git log</code>查看提交历史。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 51df17687ea6bb6a53ed24d614ddcfe9e455e9f9</span><br><span class="line">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class="line">Date:   Thu Sep 26 21:47:24 2019 +0800</span><br><span class="line"></span><br><span class="line">    3.第三次提交</span><br><span class="line">    sign off:&lt;543040659@qq.com&gt;</span><br><span class="line"></span><br><span class="line">commit 9e71ea1c78ff7aa910959e02acb44e8e3373a805</span><br><span class="line">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class="line">Date:   Thu Sep 26 21:46:38 2019 +0800</span><br><span class="line"></span><br><span class="line">    2.第二次提交</span><br><span class="line">    sign off:&lt;543040659@qq.com&gt;</span><br><span class="line"></span><br><span class="line">commit 3d4d2f3a3f44c0fcb5d4357d85abf5cb33304e97</span><br><span class="line">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class="line">Date:   Thu Sep 26 21:45:09 2019 +0800</span><br><span class="line"></span><br><span class="line">    1.第一次提交</span><br><span class="line">    sign off:&lt;543040659@qq.com&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用<code>git revert</code>进行撤销操作，撤销到第二次提交，那么结果应该是显示第一次提交的内容，即“1”。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git revert 9e71ea</span><br></pre></td></tr></table></figure><ol start="3"><li>此时产生了冲突，打开<code>test.txt</code>，将第三次的提交内容删除，留下内容“1”，不解决冲突无法提交。然后再加入缓存区，进行提交（当时没有记录，这里只有进行操作的指令，没有结果，失策失策）。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add test.txt</span><br><span class="line">$ git status#可以看到test.txt加入了缓存，可以不写</span><br><span class="line">$ git commit</span><br></pre></td></tr></table></figure><ol start="4"><li>最后使用<code>git log</code>查看提交记录，会产生一个新的提交记录，并且之前记录都会存在，所以是一种安全的撤销操作。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 57124efed6dd52b7224c3e3b5ee0be7042cee27b (HEAD -&gt; master)</span><br><span class="line">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class="line">Date:   Thu Sep 26 21:50:18 2019 +0800</span><br><span class="line"></span><br><span class="line">    Revert &quot;2.第二次提交&quot;</span><br><span class="line"></span><br><span class="line">    This reverts commit 9e71ea1c78ff7aa910959e02acb44e8e3373a805.</span><br><span class="line"></span><br><span class="line">commit 51df17687ea6bb6a53ed24d614ddcfe9e455e9f9</span><br><span class="line">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class="line">Date:   Thu Sep 26 21:47:24 2019 +0800</span><br><span class="line"></span><br><span class="line">    3.第三次提交</span><br><span class="line">    sign off:&lt;543040659@qq.com&gt;</span><br><span class="line"></span><br><span class="line">commit 9e71ea1c78ff7aa910959e02acb44e8e3373a805</span><br><span class="line">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class="line">Date:   Thu Sep 26 21:46:38 2019 +0800</span><br><span class="line"></span><br><span class="line">    2.第二次提交</span><br><span class="line">    sign off:&lt;543040659@qq.com&gt;</span><br><span class="line"></span><br><span class="line">commit 3d4d2f3a3f44c0fcb5d4357d85abf5cb33304e97</span><br><span class="line">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class="line">Date:   Thu Sep 26 21:45:09 2019 +0800</span><br><span class="line"></span><br><span class="line">    1.第一次提交</span><br><span class="line">    sign off:&lt;543040659@qq.com&gt;</span><br></pre></td></tr></table></figure><p>总结：revert指令可以使版本撤销到之前的某一次提交，并且在那次提交中改变的部分都会还原为上一次提交的内容（比如撤销到第二次，那么内容就会还原为第一次提交的内容），并且在这个过程中会产生冲突，按照我的理解，产生冲突之后修改的txt文档，决定了还原的最终结果。如果我在解决冲突的过程中，留下了“3”，而不是“1”，那么还原的内容应该是“3”。</p><h3 id="实现2"><a href="#实现2" class="headerlink" title="实现2"></a>实现2</h3><ol><li>新建一个库，新建一个文件<code>text.txt</code> ，输入内容“1”，保存后提交。并以此类推，一共得到三次提交，内容分别是“1”，“2”，“3”，使用<code>git log</code>查看提交历史。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 9e541291495cfe4c57b62f699ff17deed99bd853 (HEAD -&gt; master)</span><br><span class="line">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class="line">Date:   Thu Sep 26 21:56:32 2019 +0800</span><br><span class="line"></span><br><span class="line">    3.第三次提交</span><br><span class="line">    sign off:&lt;543040659@qq.com&gt;</span><br><span class="line"></span><br><span class="line">commit 1d0feb4e586995b4d1bd6e3d78af5350b2726b68</span><br><span class="line">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class="line">Date:   Thu Sep 26 21:55:37 2019 +0800</span><br><span class="line"></span><br><span class="line">    2.第二次提交</span><br><span class="line">    sign off:&lt;543040659@qq.com&gt;</span><br><span class="line"></span><br><span class="line">commit 47bbd152043e6f2de771413739b2fccadad6893d</span><br><span class="line">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class="line">Date:   Thu Sep 26 21:54:36 2019 +0800</span><br><span class="line"></span><br><span class="line">    1.第一次提交</span><br><span class="line">    sign off:&lt;543040659@qq.com&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用<code>git reset</code>进行撤销操作1。先改变<code>test.txt</code>中的内容，开始应为“3”，现在可以任意改变，假如改为“5”，然后执行指令（撤销到第三次），并得到以下结果：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset 9e5412</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M       test.txt</span><br></pre></td></tr></table></figure><p>执行的结果就是<code>test.txt</code>文档中的”5”又变成了“3”，成功！</p><ol start="3"><li>使用<code>git reset</code>进行撤销操作2。直接执行指令撤销到第二次，得到以下结果：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git reset 1d0fe</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M       test.txt</span><br><span class="line">#再执行git log指令</span><br><span class="line">$ git log</span><br><span class="line">commit 1d0feb4e586995b4d1bd6e3d78af5350b2726b68 (HEAD -&gt; master)</span><br><span class="line">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class="line">Date:   Thu Sep 26 21:55:37 2019 +0800</span><br><span class="line"></span><br><span class="line">    2.第二次提交</span><br><span class="line">    sign off:&lt;543040659@qq.com&gt;</span><br><span class="line"></span><br><span class="line">commit 47bbd152043e6f2de771413739b2fccadad6893d</span><br><span class="line">Author: zhaoxingyu &lt;543040659@qq.com&gt;</span><br><span class="line">Date:   Thu Sep 26 21:54:36 2019 +0800</span><br><span class="line"></span><br><span class="line">    1.第一次提交</span><br><span class="line">    sign off:&lt;543040659@qq.com&gt;</span><br></pre></td></tr></table></figure><p>可以发现第三次的提交已经没有了，所以是一种不安全的撤销，此时<code>test.txt</code>中应为“2”，如果你此时修改了文档中的内容，再执行以上步骤，文档中的内容修改会被继续保留下来，与下面的有所不同。</p><ol start="4"><li>使用<code>git reset --hard</code>进行撤销操作。如前所述，此指令会直接撤销到<strong>当前提交时刻的原始版本</strong>（以撤销到第二次为例）。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 1d0feb</span><br><span class="line">HEAD is now at 1d0feb4 2.第二次提交</span><br></pre></td></tr></table></figure><p>我们一开始在第二次提交时，里面的内容就是“2”，现在执行上述指令后，<code>test.txt</code>中就是“2”。如果把<code>test.txt</code>中的内容修改为“5”，甚至你已经进行add指令加入到了缓存，但是没有提交，那么再次执行上述hard指令后，文档中的内容又变成了“2”，你之前的所有修改都白费了，所以要特别小心，慎用！</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这次的练习收获很多，不过只是很浅显的一些理解，不免有些理解不到位或者容易产生歧义的地方。如果有哪里有疑问，可以和我联系进行讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本次学习要点：&quot;&gt;&lt;a href=&quot;#本次学习要点：&quot; class=&quot;headerlink&quot; title=&quot;本次学习要点：&quot;&gt;&lt;/a&gt;本次学习要点：&lt;/h3&gt;&lt;p&gt;Git的撤销提交操作&lt;/p&gt;
&lt;p&gt;与回滚不同，如果认为某次的提交是有问题的，需要撤回这次的提交，应该怎么做呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://www.xingyuzhao.ltd/categories/Git/"/>
    
    
      <category term="Git" scheme="http://www.xingyuzhao.ltd/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git的基本使用(一)</title>
    <link href="http://www.xingyuzhao.ltd/blog/2019/09/26/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.xingyuzhao.ltd/blog/2019/09/26/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2019-09-26T14:24:21.000Z</published>
    <updated>2020-01-01T08:59:15.366Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本次学习要点："><a href="#本次学习要点：" class="headerlink" title="本次学习要点："></a>本次学习要点：</h3><ol><li><p>如何建立一个本地仓库</p></li><li><p>设置你的个性化信息</p></li><li><p>工作区与缓存区</p></li><li><p>提交与历史</p></li></ol><a id="more"></a><h3 id="如何建立一个本地仓库"><a href="#如何建立一个本地仓库" class="headerlink" title="如何建立一个本地仓库"></a>如何建立一个本地仓库</h3><p>有两种方法，一种是Git GUI，一种是Git Bush，第一步都是先建立一个空文件夹。</p><ol><li>在文件夹空白处右键，选择Git GUI Here，点击Create New Repository，OK。</li><li>在文件夹空白处右键，选择Git Bush Here，输入<code>git init</code>，OK。</li></ol><h3 id="设置你的个性化信息"><a href="#设置你的个性化信息" class="headerlink" title="设置你的个性化信息"></a>设置你的个性化信息</h3><p>Git是一个团队开发工作，你对团队的每次贡献都会有相应的记录。所以此时你应该告诉这个仓库你的个人信息，主要包括两个：</p><ul><li><strong>邮箱</strong> 邮箱是别人联系你的途径，当然你应当留意你的个人隐私问题，这个内容我们会放到之后的几章中讲，此处你可以随便填写一个邮箱。</li><li><strong>姓名</strong> 你可以填真名或是化名，取决于你的实际开发和协作环境。</li></ul><ol><li>打开Git Bash界面，我们输入指令<code>git config --help</code>来查看<code>git config</code>的帮助文档。【–help】是一个很有用的指令参数，当你忘了某个指令的使用方法，你都可以如此进行搜寻。</li><li>我们可以看到如此一行：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user.email</span><br><span class="line">Your email address to be recorded in any newly created commits. </span><br><span class="line">Can be overridden by the GIT_AUTHOR_EMAIL, GIT_COMMITTER_EMAIL, </span><br><span class="line">and EMAIL environment variables. See git-commit-tree(1).</span><br></pre></td></tr></table></figure><ul><li><p>使用<code>git config user.email &lt;你的Email&gt;</code>进行邮箱的设置。同样的，<code>git config user.name &lt;你的名字或化名&gt;</code>可以设置该本地仓库的所有者姓名。</p></li><li><p>当你设置完这些值之后，可以打开<code>.gti/config</code>，查看到你刚刚所设置邮箱和姓名。</p></li></ul><h3 id="工作区与缓存区"><a href="#工作区与缓存区" class="headerlink" title="工作区与缓存区"></a>工作区与缓存区</h3><img src="/blog/2019/09/26/Git的基本使用（一）/GitFlow.jpg" style="zoom:50%;"><p>​                                                            上图来源于西电腾讯TIC-Git的培训资料</p><p>Git的基本工作流程，目前阶段我们需要知道三个区域：<strong>工作区域</strong>、<strong>缓存区</strong>和<strong>仓库记录</strong>。其中，仓库记录是由<strong>历史记录</strong>构成的，因为历史纪录是一棵树状结构，也被叫做(History Tree)。</p><ul><li>用户在工作区域(或工作目录)中进行的修改会被Git检测到，通过<code>add</code>指令被提交到缓存区。</li><li>缓存区中的文件是工作区域中的文件的一次快照备份，你之后在工作区域中做任何修改都不会影响到缓存区中同一个文件的内容，除非再次使用<code>add</code>指令更新缓存区。</li><li>当你觉得工作做得差不多了，你可以使用<code>commit</code>指令，把缓存区中的文件提交到仓库记录，仓库记录会自动生成一次历史记录。你可以简单认为仓库记录就是个数据库，一次<code>commit</code>指令就是一次数据库写入请求。从此之后该记录将一直留在仓库中，你也可以把工作区中的数据文件随时回滚到当时提交的这个版本。</li><li>缓存区中的文件在并未被<code>commit</code>之前，并不会被写入记录，也就意味着有些操作会导致你丢失缓存区的文件快照备份(如<code>checkout</code>等)。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br><span class="line">#添加文件至缓存区</span><br><span class="line">git status</span><br><span class="line">#查看当前缓存区的状态</span><br><span class="line">git commit</span><br><span class="line">#将缓存区的文件提交到仓库</span><br></pre></td></tr></table></figure><h3 id="提交与历史"><a href="#提交与历史" class="headerlink" title="提交与历史"></a>提交与历史</h3><ul><li><p>打开Git Bash，键入<code>git log</code>，即可查看提交的历史纪录。如果对当前提交不满意，找到上一次提交的版本ID值(SHA ID)，键入命令<code>git checkout &lt;SHA ID&gt;</code>，此时版本便已回滚到了之前那个版本，当前的提交会直接删除掉。</p></li><li><p>在Vim界面中，按字母a来进入编辑模式，编辑完毕后按ESC键退出编辑，再按大写锁定，按ZZ来退出Vim。</p></li></ul><p>编辑模板</p><p>提交了xxxx</p><p>来自：Zxy&lt;<a href="mailto:&#x35;&#x34;&#x33;&#x30;&#x34;&#x30;&#54;&#x35;&#57;&#x40;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;" target="_blank" rel="noopener">&#x35;&#x34;&#x33;&#x30;&#x34;&#x30;&#54;&#x35;&#57;&#x40;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;</a>&gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本次学习要点：&quot;&gt;&lt;a href=&quot;#本次学习要点：&quot; class=&quot;headerlink&quot; title=&quot;本次学习要点：&quot;&gt;&lt;/a&gt;本次学习要点：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如何建立一个本地仓库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置你的个性化信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作区与缓存区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提交与历史&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://www.xingyuzhao.ltd/categories/Git/"/>
    
    
      <category term="Git" scheme="http://www.xingyuzhao.ltd/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text3安装Emmet插件遇到的问题及解决</title>
    <link href="http://www.xingyuzhao.ltd/blog/2019/09/16/Sublime-text3%E5%AE%89%E8%A3%85Emmet%E6%8F%92%E4%BB%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>http://www.xingyuzhao.ltd/blog/2019/09/16/Sublime-text3%E5%AE%89%E8%A3%85Emmet%E6%8F%92%E4%BB%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</id>
    <published>2019-09-16T05:52:06.000Z</published>
    <updated>2019-09-29T01:10:30.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>最近对前端的知识准备进行一个入门，首先学习一下html文档的写法，第一步就是选择一个合适的开发工具。<a id="more"></a>当然，html文件也可以用记事本的方式进行编写，不过在尝试了记事本编写之后还是放弃了，缩进或者格式都得自己来，无疑是给自己徒增烦恼。</p><p>在进行一番查看之后，选择了Sublime Text3这款工具来编写html文件，这款工具目前也比较流行，具体的好处就是可以带很多插件，提高你写代码的效率。这里附上ST3的下载网址：</p><p><a href="http://www.sublimetext.com/3" target="_blank" rel="noopener">http://www.sublimetext.com/3</a></p><h1 id="为什么使用Emmet这个插件？"><a href="#为什么使用Emmet这个插件？" class="headerlink" title="为什么使用Emmet这个插件？"></a>为什么使用Emmet这个插件？</h1><p>在没有安装Emmet之前，Sublime Text的使用貌似和记事本没有什么不同，也是得自己写结构，区别就是颜色好看了些，而安装了Emmet之后就不同了，如果你从事Web前端开发的话，对该插件一定不会陌生。它使用仿CSS选择器的语法来生成代码，大大提高了HTML/CSS代码编写的速度，可以直接使用 !+tab 快速得到一个标准的html5文档，如下图所示：</p><img src="/blog/2019/09/16/Sublime-text3安装Emmet插件遇到的问题及解决/ST界面.png" style="zoom:50%;"><h1 id="安装Emmet插件"><a href="#安装Emmet插件" class="headerlink" title="安装Emmet插件"></a>安装Emmet插件</h1><p>这里已经默认你安装了Package Control，这个组件是用来安装/删除插件和其他一些功能要用到的（目前我就用到了安装和删除两个功能）。</p><h2 id="自动安装法"><a href="#自动安装法" class="headerlink" title="自动安装法"></a>自动安装法</h2><p>这个方法就是看你运气，不过过程一定是正确的，但由于各种原因（墙、网络之类的）安装不成功的大有人在，所以先写一下自动安装法。</p><ol><li>在Sublime Text3的主页面按<strong>CTRL+SHIFT+P</strong>打开Package Control</li><li>输入<strong>install</strong>，选择第一个回车</li><li>这时候会让你选择需要安装的插件，你输入<strong>Emmet</strong>，选择第一个回车即可</li><li>左下角会显示下载PyV8，在提示<strong>PyV8 binary successfully loaded</strong>即安装完成</li><li>重启Sublime Text3，安装完成！</li></ol><p>当然，一般人像我运气一样的，这样是成功不了的（坏笑）。</p><h2 id="手动安装法"><a href="#手动安装法" class="headerlink" title="手动安装法"></a>手动安装法</h2><h3 id="1-安装PyV8"><a href="#1-安装PyV8" class="headerlink" title="1.安装PyV8"></a>1.安装PyV8</h3><p>在你安装Emmet时，你可能出现下面这种错误提示：</p><p><strong><em>Sublime Text Error while loading PyV8 binary: exit code 1 Try to manually install Pyv8 form <a href="https://github.com/emetio/pyv8-binaries" target="_blank" rel="noopener">https://github.com/emetio/pyv8-binaries</a></em></strong></p><p>出现这种情况的原因就是下载PyV8这个包不成功，那么你就得手动去下载，这个里也把网址给你了，如下：<a href="https://github.com/emmetio/pyv8-binaries" target="_blank" rel="noopener">https://github.com/emmetio/pyv8-binaries</a> 选择合适你电脑的版本去下载，这个必须记住，不然可能会用不了，我第一次就犯了这个错误。因为我电脑装了python3.7，所以我选择了 <strong>pyv8-win64-p3</strong>，我把下载地址也贴出来，不过因为gtihub是国外的网站，所以下载会很慢，链接如下：</p><p><a href="https://github.com/emmetio/pyv8-binaries/raw/master/pyv8-win64-p3.zip" target="_blank" rel="noopener">https://github.com/emmetio/pyv8-binaries/raw/master/pyv8-win64-p3.zip</a></p><p>下载好了之后，对它进行解压，得到下面这个文件：</p><img src="/blog/2019/09/16/Sublime-text3安装Emmet插件遇到的问题及解决/pyv8.png" style="zoom:80%;"><p>接下来按照以下的步骤做就ok了：</p><ol><li>打开Sublime Text</li><li>依次选择首选项 -&gt; 浏览插件目录（我的汉化了，不然是Preferences -&gt;Browse Packages）</li><li>新建PyV8文件夹</li><li>在PyV8文件夹把上图中的文件复制过来</li><li>重启Sublime Text</li></ol><p>现在你就可以在ST3中使用Emmet的功能了，不过还有运气不好的人，还是不能用，比如说我，那么继续往下看。</p><h3 id="2-手动安装Emmet"><a href="#2-手动安装Emmet" class="headerlink" title="2.手动安装Emmet"></a>2.手动安装Emmet</h3><p>如果你还是无法使用Emmet，但是你在首选项菜单中的Package Settings还能看到Emmet的身影，然而那只是个空壳，继续进入插件目录，你会发现没有与Emmet相关的文件夹的存在，那么你就需要自己手动安装Emmet。下载地址如下（下载也比较慢，但是只有200k左右）：</p><p><a href="https://codeload.github.com/sergeche/emmet-sublime/zip/master" target="_blank" rel="noopener">https://codeload.github.com/sergeche/emmet-sublime/zip/master</a></p><p>下载好了之后，继续进入插件目录（首选项 -&gt; 浏览插件目录），把解压后的文件放进去，如图：</p><img src="/blog/2019/09/16/Sublime-text3安装Emmet插件遇到的问题及解决/emmet.png" style="zoom:50%;"><p>接下来你再重启ST就行了，需要注意的是，如果你没有装PyV8，那么你打开ST之后它会自动再一次下载这个包，同样可能出现1中的问题，那么你可以先把PyV8装好，再手动安装Emmet，重启之后就大功告成，终于装好啦！我属于运气最差的那种，不好的都让我遇到了，刚接触花了几个小时才弄明白，虽然最后成功了，我还是流下了没有技术的眼泪。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;最近对前端的知识准备进行一个入门，首先学习一下html文档的写法，第一步就是选择一个合适的开发工具。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端学习入门" scheme="http://www.xingyuzhao.ltd/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="html" scheme="http://www.xingyuzhao.ltd/tags/html/"/>
    
      <category term="Sublime Text" scheme="http://www.xingyuzhao.ltd/tags/Sublime-Text/"/>
    
  </entry>
  
  <entry>
    <title>一个测试文档</title>
    <link href="http://www.xingyuzhao.ltd/blog/2019/09/06/%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
    <id>http://www.xingyuzhao.ltd/blog/2019/09/06/%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/</id>
    <published>2019-09-06T10:46:20.000Z</published>
    <updated>2019-09-29T01:10:50.713Z</updated>
    
    <content type="html"><![CDATA[<p>目前没有特别需要写的东西，就收藏几个网站，便于之后写文章时查阅语法</p><a id="more"></a><p>参考网站：</p><p>[1]<a href="https://www.jianshu.com/p/56d99a3049a5" target="_blank" rel="noopener">https://www.jianshu.com/p/56d99a3049a5</a></p><p>[2]<a href="https://blog.csdn.net/u014061630/article/details/81359144" target="_blank" rel="noopener">https://blog.csdn.net/u014061630/article/details/81359144</a></p><p>记录一下: <a href="https://www.xingyuzhao.ltd">我的博客</a></p><p><strong>使用该<code>&lt;!-- more --&gt;</code>标志来控制文章的摘要预览，因为这种方式可以让摘要也按照css文件中的样式来渲染。如果使用了自动摘要的功能，你会发现文章摘要是一大团没有样式的文本，很是难看。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前没有特别需要写的东西，就收藏几个网站，便于之后写文章时查阅语法&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://www.xingyuzhao.ltd/categories/Hexo/"/>
    
    
      <category term="Markdown语法" scheme="http://www.xingyuzhao.ltd/tags/Markdown%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
